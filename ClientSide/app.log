
2025-02-13 12:01:28,444 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-13 12:01:28,445 - INFO - Attempting to log in user: test
2025-02-13 12:01:28,456 - DEBUG - Loading KWallet
2025-02-13 12:01:28,458 - DEBUG - Loading SecretService
2025-02-13 12:01:28,486 - DEBUG - Loading Windows
2025-02-13 12:01:28,488 - DEBUG - Loading chainer
2025-02-13 12:01:28,489 - DEBUG - Loading libsecret
2025-02-13 12:01:28,490 - DEBUG - Loading macOS
2025-02-13 12:01:28,627 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-13 12:01:28,631 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 12:01:28,641 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-13 12:01:28,651 - DEBUG - Received response
2025-02-13 12:01:28,705 - INFO - User test logged in successfully.
2025-02-13 12:01:28,706 - INFO - Starting polling for notifications.
2025-02-13 12:01:28,706 - DEBUG - Polling for notifications...
2025-02-13 12:01:28,747 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739444488 with data: None
2025-02-13 12:01:28,750 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 12:01:28,784 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739444488 HTTP/1.1" 200 21
2025-02-13 12:01:28,785 - DEBUG - Received response: {
  "update": -577
}

2025-02-13 12:01:28,786 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-13 12:01:28,788 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 12:01:28,809 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 677
2025-02-13 12:01:28,810 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "main.py"
  },
  {
    "id": 4,
    "name": "core.py"
  },
  {
    "id": 5,
    "name": "main_window.py"
  },
  {
    "id": 6,
    "name": "updater.py"
  },
  {
    "id": 7,
    "name": "plugin_loader.py"
  },
  {
    "id": 8,
    "name": "base.py"
  },
  {
    "id": 9,
    "name": "_termui_impl.py"
  },
  {
    "id": 10,
    "name": "decorators.py"
  },
  {
    "id": 11,
    "name": "script.py"
  },
  {
    "id": 12,
    "name": "script2.py"
  },
  {
    "id": 13,
    "name": "script3.py"
  },
  {
    "id": 14,
    "name": "script4.py"
  }
]

2025-02-13 12:01:31,100 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/12 with data: None
2025-02-13 12:01:31,101 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 12:01:31,122 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/12 HTTP/1.1" 200 40
2025-02-13 12:01:31,123 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-13 12:01:32,020 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/12 with data: {}
2025-02-13 12:01:32,023 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 12:01:32,038 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/12 HTTP/1.1" 200 85
2025-02-13 12:01:32,078 - DEBUG - Received response: {
  "datetime": "2025-02-13 12:01:32",
  "log": "Potassio",
  "status": "finished"
}

2025-02-13 12:01:33,791 - DEBUG - Polling for notifications...
2025-02-13 12:01:33,826 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739444489 with data: None
2025-02-13 12:01:33,829 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 12:01:33,848 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739444489 HTTP/1.1" 200 21
2025-02-13 12:01:33,849 - DEBUG - Received response: {
  "update": -578
}

2025-02-13 18:24:24,023 - INFO - Application started.
2025-02-13 18:24:24,027 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-13 18:24:24,027 - INFO - Attempting to log in user: test
2025-02-13 18:24:24,046 - DEBUG - Loading KWallet
2025-02-13 18:24:24,047 - DEBUG - Loading SecretService
2025-02-13 18:24:24,111 - DEBUG - Loading Windows
2025-02-13 18:24:24,113 - DEBUG - Loading chainer
2025-02-13 18:24:24,114 - DEBUG - Loading libsecret
2025-02-13 18:24:24,115 - DEBUG - Loading macOS
2025-02-13 18:24:24,283 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-13 18:24:24,287 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:24,309 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-13 18:24:24,310 - DEBUG - Received response
2025-02-13 18:24:24,352 - INFO - User test logged in successfully.
2025-02-13 18:24:24,353 - INFO - Starting polling for notifications.
2025-02-13 18:24:24,353 - DEBUG - Polling for notifications...
2025-02-13 18:24:24,390 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739467464 with data: None
2025-02-13 18:24:24,392 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:24,427 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739467464 HTTP/1.1" 200 20
2025-02-13 18:24:24,428 - DEBUG - Received response: {
  "update": -32
}

2025-02-13 18:24:24,429 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-13 18:24:24,431 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:24,458 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-13 18:24:24,459 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-13 18:24:27,324 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-13 18:24:27,326 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:27,349 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-13 18:24:27,350 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-13 18:24:28,439 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-13 18:24:28,440 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:28,488 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 15787
2025-02-13 18:24:28,489 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "i7Swaa2MNdZjOrz1Ckf4";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137722649151744">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137722638590896">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137722638591008">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137722638591120">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137722638591232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137722638591344">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137722638591456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137722638597616">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given


-->

2025-02-13 18:24:28,489 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "i7Swaa2MNdZjOrz1Ckf4";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137722649151744">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137722638590896">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137722638591008">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137722638591120">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137722638591232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137722638591344">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137722638591456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137722638597616">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given


-->

2025-02-13 18:24:29,434 - DEBUG - Polling for notifications...
2025-02-13 18:24:29,470 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739467464 with data: None
2025-02-13 18:24:29,471 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:29,491 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739467464 HTTP/1.1" 200 20
2025-02-13 18:24:29,492 - DEBUG - Received response: {
  "update": -32
}

2025-02-13 18:24:34,497 - DEBUG - Polling for notifications...
2025-02-13 18:24:34,534 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739467464 with data: None
2025-02-13 18:24:34,536 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:34,555 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739467464 HTTP/1.1" 200 20
2025-02-13 18:24:34,556 - DEBUG - Received response: {
  "update": -32
}

2025-02-13 18:24:35,783 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-13 18:24:35,785 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:35,806 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-13 18:24:35,807 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-13 18:24:36,857 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-13 18:24:36,859 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:36,874 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 500 15787
2025-02-13 18:24:36,914 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "i7Swaa2MNdZjOrz1Ckf4";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137722638668672">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137722638669456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137722638668784">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137722638668336">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137722638669344">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137722638669792">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137722638668896">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137722638669232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given


-->

2025-02-13 18:24:36,915 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "i7Swaa2MNdZjOrz1Ckf4";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137722638668672">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137722638669456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137722638668784">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137722638668336">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137722638669344">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137722638669792">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137722638668896">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137722638669232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given


-->

2025-02-13 18:24:39,561 - DEBUG - Polling for notifications...
2025-02-13 18:24:39,599 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739467464 with data: None
2025-02-13 18:24:39,600 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:39,619 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739467464 HTTP/1.1" 200 20
2025-02-13 18:24:39,620 - DEBUG - Received response: {
  "update": -32
}

2025-02-13 18:24:44,626 - DEBUG - Polling for notifications...
2025-02-13 18:24:44,662 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739467464 with data: None
2025-02-13 18:24:44,663 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:44,682 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739467464 HTTP/1.1" 200 20
2025-02-13 18:24:44,683 - DEBUG - Received response: {
  "update": -32
}

2025-02-14 08:08:50,157 - INFO - Application started.
2025-02-14 08:08:50,161 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:08:50,162 - INFO - Attempting to log in user: test
2025-02-14 08:08:50,174 - DEBUG - Loading KWallet
2025-02-14 08:08:50,176 - DEBUG - Loading SecretService
2025-02-14 08:08:50,226 - DEBUG - Loading Windows
2025-02-14 08:08:50,227 - DEBUG - Loading chainer
2025-02-14 08:08:50,228 - DEBUG - Loading libsecret
2025-02-14 08:08:50,229 - DEBUG - Loading macOS
2025-02-14 08:08:50,387 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:08:50,392 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:08:50,403 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:08:50,414 - DEBUG - Received response
2025-02-14 08:08:50,455 - INFO - User test logged in successfully.
2025-02-14 08:08:50,455 - INFO - Starting polling for notifications.
2025-02-14 08:08:50,456 - DEBUG - Polling for notifications...
2025-02-14 08:08:50,496 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739516930 with data: None
2025-02-14 08:08:50,499 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:08:50,534 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739516930 HTTP/1.1" 200 20
2025-02-14 08:08:50,535 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:08:50,536 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:08:50,538 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:08:50,566 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:08:50,567 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:08:52,350 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:08:52,351 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:08:52,376 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 08:08:52,376 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:08:53,535 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:08:53,537 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:08:53,559 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 15787
2025-02-14 08:08:53,600 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Z20za28vqbOkWXn1vsFJ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137215691049216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137215689597872">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137215689597984">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137215689598096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137215689598208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137215689598320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137215689598432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137215689604592">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given


-->

2025-02-14 08:08:53,601 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Z20za28vqbOkWXn1vsFJ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137215691049216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137215689597872">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137215689597984">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137215689598096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137215689598208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137215689598320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137215689598432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137215689604592">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given


-->

2025-02-14 08:08:55,541 - DEBUG - Polling for notifications...
2025-02-14 08:08:55,576 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739516931 with data: None
2025-02-14 08:08:55,577 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:08:55,596 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739516931 HTTP/1.1" 200 20
2025-02-14 08:08:55,597 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:15:13,052 - INFO - Application started.
2025-02-14 08:15:13,052 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:15:13,052 - INFO - Attempting to log in user: test
2025-02-14 08:15:13,061 - DEBUG - Loading KWallet
2025-02-14 08:15:13,063 - DEBUG - Loading SecretService
2025-02-14 08:15:13,087 - DEBUG - Loading Windows
2025-02-14 08:15:13,088 - DEBUG - Loading chainer
2025-02-14 08:15:13,089 - DEBUG - Loading libsecret
2025-02-14 08:15:13,090 - DEBUG - Loading macOS
2025-02-14 08:15:13,236 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:15:13,241 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:13,254 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:15:13,265 - DEBUG - Received response
2025-02-14 08:15:13,318 - INFO - User test logged in successfully.
2025-02-14 08:15:13,319 - INFO - Starting polling for notifications.
2025-02-14 08:15:13,319 - DEBUG - Polling for notifications...
2025-02-14 08:15:13,362 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:13,364 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:13,403 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517313 HTTP/1.1" 200 20
2025-02-14 08:15:13,405 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:15:13,406 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:15:13,409 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:13,438 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:15:13,439 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:15:15,103 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:15:15,105 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:15,128 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 08:15:15,129 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:15:16,199 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:15:16,201 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:16,248 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 19758
2025-02-14 08:15:16,249 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;nome_plugin&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "YZk0efmzLUFHgVO7WK5B";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;nome_plugin&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-123313041986656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">31</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>print(&#34;Errore: impossibile rinominare il nome del file&#34;)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line after"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-123313043344064">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-123313041909104">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-123313041909216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-123313041909328">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-123313041909440">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-123313041909552">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-123313041909664">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-123313041981504">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-123313041985648">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin, &#39;datetime&#39;: datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;nome_plugin&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 31, in avvia_plugin
    modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)
NameError: name &#39;nome_plugin&#39; is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin, &#39;datetime&#39;: datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
NameError: name &#39;nome_plugin&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 31, in avvia_plugin
    modulo = importlib.import_module('plugins.'+nome_plugin)
NameError: name 'nome_plugin' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin, 'datetime': datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
NameError: name 'nome_plugin' is not defined


-->

2025-02-14 08:15:16,250 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;nome_plugin&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "YZk0efmzLUFHgVO7WK5B";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;nome_plugin&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-123313041986656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">31</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>print(&#34;Errore: impossibile rinominare il nome del file&#34;)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line after"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-123313043344064">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-123313041909104">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-123313041909216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-123313041909328">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-123313041909440">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-123313041909552">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-123313041909664">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-123313041981504">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-123313041985648">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin, &#39;datetime&#39;: datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;nome_plugin&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 31, in avvia_plugin
    modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)
NameError: name &#39;nome_plugin&#39; is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin, &#39;datetime&#39;: datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
NameError: name &#39;nome_plugin&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 31, in avvia_plugin
    modulo = importlib.import_module('plugins.'+nome_plugin)
NameError: name 'nome_plugin' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin, 'datetime': datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
NameError: name 'nome_plugin' is not defined


-->

2025-02-14 08:15:18,411 - DEBUG - Polling for notifications...
2025-02-14 08:15:18,447 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:18,449 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:18,468 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517313 HTTP/1.1" 200 20
2025-02-14 08:15:18,469 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:15:23,475 - DEBUG - Polling for notifications...
2025-02-14 08:15:23,511 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:23,513 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:23,532 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517313 HTTP/1.1" 200 20
2025-02-14 08:15:23,533 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:15:28,539 - DEBUG - Polling for notifications...
2025-02-14 08:15:28,580 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:28,583 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:28,603 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517313 HTTP/1.1" 200 20
2025-02-14 08:15:28,603 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:15:33,607 - DEBUG - Polling for notifications...
2025-02-14 08:15:33,643 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:33,644 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:33,663 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517313 HTTP/1.1" 200 20
2025-02-14 08:15:33,664 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:15:38,669 - DEBUG - Polling for notifications...
2025-02-14 08:15:38,705 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:38,707 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:38,727 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517313 HTTP/1.1" 200 20
2025-02-14 08:15:38,728 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:15:43,754 - DEBUG - Polling for notifications...
2025-02-14 08:15:43,793 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:43,795 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:43,996 - ERROR - Error during request: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))
2025-02-14 08:16:16,434 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:16:16,436 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:16,459 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 422 45
2025-02-14 08:16:16,460 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:16:16,460 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:16:17,869 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:16:17,871 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:17,879 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 422 45
2025-02-14 08:16:17,920 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:16:17,920 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:16:32,133 - INFO - Application started.
2025-02-14 08:16:32,133 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:16:32,134 - INFO - Attempting to log in user: test
2025-02-14 08:16:32,144 - DEBUG - Loading KWallet
2025-02-14 08:16:32,145 - DEBUG - Loading SecretService
2025-02-14 08:16:32,172 - DEBUG - Loading Windows
2025-02-14 08:16:32,173 - DEBUG - Loading chainer
2025-02-14 08:16:32,174 - DEBUG - Loading libsecret
2025-02-14 08:16:32,175 - DEBUG - Loading macOS
2025-02-14 08:16:32,315 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:16:32,319 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:32,329 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:16:32,339 - DEBUG - Received response
2025-02-14 08:16:32,384 - INFO - User test logged in successfully.
2025-02-14 08:16:32,385 - INFO - Starting polling for notifications.
2025-02-14 08:16:32,385 - DEBUG - Polling for notifications...
2025-02-14 08:16:32,423 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517392 with data: None
2025-02-14 08:16:32,425 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:32,461 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517392 HTTP/1.1" 200 20
2025-02-14 08:16:32,462 - DEBUG - Received response: {
  "update": -16
}

2025-02-14 08:16:32,463 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:16:32,465 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:32,492 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:16:32,493 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:16:34,845 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:16:34,847 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:34,871 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 08:16:34,872 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:16:35,861 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:16:35,863 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:35,910 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 19697
2025-02-14 08:16:35,911 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;datetime&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "xevwUq3FXdwu0NEkcdMm";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;datetime&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-128806758159568">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-128806759549072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-128806758082016">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-128806758082128">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-128806758082240">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-128806758082352">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-128806758082464">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-128806758082576">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-128806758154416">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-128806758158560">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;datetime&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.pluginEs&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
NameError: name &#39;datetime&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.pluginEs' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
NameError: name 'datetime' is not defined


-->

2025-02-14 08:16:35,912 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;datetime&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "xevwUq3FXdwu0NEkcdMm";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;datetime&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-128806758159568">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-128806759549072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-128806758082016">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-128806758082128">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-128806758082240">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-128806758082352">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-128806758082464">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-128806758082576">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-128806758154416">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-128806758158560">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;datetime&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.pluginEs&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
NameError: name &#39;datetime&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.pluginEs' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
NameError: name 'datetime' is not defined


-->

2025-02-14 08:16:37,468 - DEBUG - Polling for notifications...
2025-02-14 08:16:37,504 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517392 with data: None
2025-02-14 08:16:37,506 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:37,527 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517392 HTTP/1.1" 200 20
2025-02-14 08:16:37,528 - DEBUG - Received response: {
  "update": -16
}

2025-02-14 08:17:01,506 - INFO - Application started.
2025-02-14 08:17:01,506 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:17:01,506 - INFO - Attempting to log in user: test
2025-02-14 08:17:01,515 - DEBUG - Loading KWallet
2025-02-14 08:17:01,517 - DEBUG - Loading SecretService
2025-02-14 08:17:01,540 - DEBUG - Loading Windows
2025-02-14 08:17:01,542 - DEBUG - Loading chainer
2025-02-14 08:17:01,543 - DEBUG - Loading libsecret
2025-02-14 08:17:01,544 - DEBUG - Loading macOS
2025-02-14 08:17:01,684 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:17:01,688 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:01,700 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:17:01,710 - DEBUG - Received response
2025-02-14 08:17:01,754 - INFO - User test logged in successfully.
2025-02-14 08:17:01,755 - INFO - Starting polling for notifications.
2025-02-14 08:17:01,755 - DEBUG - Polling for notifications...
2025-02-14 08:17:01,798 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517422 with data: None
2025-02-14 08:17:01,800 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:01,834 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517422 HTTP/1.1" 200 20
2025-02-14 08:17:01,835 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:17:01,836 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:17:01,838 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:01,865 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:17:01,866 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:17:03,541 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 08:17:03,543 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:03,566 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 08:17:03,567 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:17:04,825 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:17:04,827 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:04,851 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 19811
2025-02-14 08:17:04,891 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123073856">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056133540096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056122996304">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056122996416">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056122996528">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056122996640">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056122996752">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056122996864">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123068704">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123072848">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:04,892 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123073856">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056133540096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056122996304">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056122996416">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056122996528">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056122996640">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056122996752">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056122996864">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123068704">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123072848">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:05,791 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:17:05,793 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:05,840 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 19811
2025-02-14 08:17:05,841 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123076320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056123076208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056123076096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056123075872">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056123075536">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056123075648">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056123075312">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056123074976">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123073968">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123075984">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:05,842 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123076320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056123076208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056123076096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056123075872">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056123075536">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056123075648">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056123075312">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056123074976">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123073968">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123075984">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:06,819 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:17:06,821 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:06,839 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 19811
2025-02-14 08:17:06,840 - DEBUG - Polling for notifications...
2025-02-14 08:17:06,877 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517422 with data: None
2025-02-14 08:17:06,879 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:06,880 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123077552">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056123077440">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056123077328">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056123077104">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056123076768">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056123076880">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056123076544">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056123075088">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123075424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123077216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:06,881 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123077552">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056123077440">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056123077328">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056123077104">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056123076768">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056123076880">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056123076544">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056123075088">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123075424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123077216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:06,900 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517422 HTTP/1.1" 200 20
2025-02-14 08:17:06,900 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:17:09,503 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:17:09,505 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:09,522 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 19811
2025-02-14 08:17:09,562 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123078000">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056123077888">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056123076656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056123077664">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056123076432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056123078112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056123078448">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056123078672">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123077776">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123078224">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:09,563 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123078000">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056123077888">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056123076656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056123077664">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056123076432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056123078112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056123078448">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056123078672">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123077776">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123078224">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:11,906 - DEBUG - Polling for notifications...
2025-02-14 08:17:11,944 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517422 with data: None
2025-02-14 08:17:11,945 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:11,965 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517422 HTTP/1.1" 200 20
2025-02-14 08:17:11,966 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:17:16,970 - DEBUG - Polling for notifications...
2025-02-14 08:17:17,007 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517422 with data: None
2025-02-14 08:17:17,009 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:17,029 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517422 HTTP/1.1" 200 20
2025-02-14 08:17:17,030 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:17:22,055 - DEBUG - Polling for notifications...
2025-02-14 08:17:22,101 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517422 with data: None
2025-02-14 08:17:22,103 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:22,339 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517422 HTTP/1.1" 422 45
2025-02-14 08:17:22,341 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:17:22,341 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:17:41,226 - INFO - Application started.
2025-02-14 08:17:41,226 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:17:41,226 - INFO - Attempting to log in user: test
2025-02-14 08:17:41,235 - DEBUG - Loading KWallet
2025-02-14 08:17:41,236 - DEBUG - Loading SecretService
2025-02-14 08:17:41,264 - DEBUG - Loading Windows
2025-02-14 08:17:41,266 - DEBUG - Loading chainer
2025-02-14 08:17:41,267 - DEBUG - Loading libsecret
2025-02-14 08:17:41,268 - DEBUG - Loading macOS
2025-02-14 08:17:41,408 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:17:41,412 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:41,426 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:17:41,436 - DEBUG - Received response
2025-02-14 08:17:41,484 - INFO - User test logged in successfully.
2025-02-14 08:17:41,484 - INFO - Starting polling for notifications.
2025-02-14 08:17:41,485 - DEBUG - Polling for notifications...
2025-02-14 08:17:41,523 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517461 with data: None
2025-02-14 08:17:41,526 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:41,559 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517461 HTTP/1.1" 200 20
2025-02-14 08:17:41,561 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:17:41,561 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:17:41,563 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:41,591 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:17:41,592 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:17:42,832 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:17:42,833 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:42,857 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 08:17:42,858 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:17:43,951 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:17:43,953 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:44,000 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17204
2025-02-14 08:17:44,001 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;datetime&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "mviurktM35L8IDtmOhGL";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;datetime&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139013449434384">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139013448000880">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139013448000992">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139013448001104">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-139013448001216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139013448001328">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139013448001440">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139013448073280">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-139013448077424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">211</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if log_entries is None or not log_entries:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404&#34;</pre>
<pre class="line before"><span class="ws">    </span>return jsonify([log_entries.logList()])</pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line current"><span class="ws">    </span>print(type(result[&#39;datetime&#39;]))</pre>
<pre class="line after"><span class="ws">    </span>print(type(datetime.datetime.fromisoformat(result[&#39;datetime&#39;])))</pre>
<pre class="line after"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line after"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;datetime&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 181, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 211, in logUpdate
    print(type(result[&#39;datetime&#39;]))
KeyError: &#39;datetime&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 181, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 211, in logUpdate
    print(type(result['datetime']))
KeyError: 'datetime'


-->

2025-02-14 08:17:44,001 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;datetime&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "mviurktM35L8IDtmOhGL";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;datetime&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139013449434384">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139013448000880">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139013448000992">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139013448001104">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-139013448001216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139013448001328">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139013448001440">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139013448073280">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-139013448077424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">211</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if log_entries is None or not log_entries:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404&#34;</pre>
<pre class="line before"><span class="ws">    </span>return jsonify([log_entries.logList()])</pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line current"><span class="ws">    </span>print(type(result[&#39;datetime&#39;]))</pre>
<pre class="line after"><span class="ws">    </span>print(type(datetime.datetime.fromisoformat(result[&#39;datetime&#39;])))</pre>
<pre class="line after"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line after"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;datetime&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 181, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 211, in logUpdate
    print(type(result[&#39;datetime&#39;]))
KeyError: &#39;datetime&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 181, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 211, in logUpdate
    print(type(result['datetime']))
KeyError: 'datetime'


-->

2025-02-14 08:17:46,568 - DEBUG - Polling for notifications...
2025-02-14 08:17:46,605 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517462 with data: None
2025-02-14 08:17:46,607 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:46,626 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517462 HTTP/1.1" 200 20
2025-02-14 08:17:46,627 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:17:51,633 - DEBUG - Polling for notifications...
2025-02-14 08:17:51,670 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517462 with data: None
2025-02-14 08:17:51,672 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:51,691 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517462 HTTP/1.1" 200 20
2025-02-14 08:17:51,692 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:19:57,508 - INFO - Application started.
2025-02-14 08:19:57,508 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:19:57,508 - INFO - Attempting to log in user: test
2025-02-14 08:19:57,518 - DEBUG - Loading KWallet
2025-02-14 08:19:57,519 - DEBUG - Loading SecretService
2025-02-14 08:19:57,545 - DEBUG - Loading Windows
2025-02-14 08:19:57,547 - DEBUG - Loading chainer
2025-02-14 08:19:57,548 - DEBUG - Loading libsecret
2025-02-14 08:19:57,549 - DEBUG - Loading macOS
2025-02-14 08:19:57,690 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:19:57,694 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:19:57,707 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:19:57,717 - DEBUG - Received response
2025-02-14 08:19:57,765 - INFO - User test logged in successfully.
2025-02-14 08:19:57,766 - INFO - Starting polling for notifications.
2025-02-14 08:19:57,766 - DEBUG - Polling for notifications...
2025-02-14 08:19:57,804 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:19:57,806 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:19:57,827 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:19:57,831 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:19:57,863 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:19:57,866 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:19:57,894 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:19:57,895 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:19:59,264 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 08:19:59,266 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:19:59,290 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 08:19:59,291 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:20:00,332 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:20:00,334 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:00,381 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17204
2025-02-14 08:20:00,382 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;datetime&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Z7mXIe8Y6Gl86au5sLJ5";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;datetime&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-131798339520096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-131798328944096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-131798328944208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-131798328944320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-131798328944432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-131798328944544">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-131798328944656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-131798329016496">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-131798329020640">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">211</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if log_entries is None or not log_entries:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404&#34;</pre>
<pre class="line before"><span class="ws">    </span>return jsonify([log_entries.logList()])</pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line current"><span class="ws">    </span>print(type(result[&#39;datetime&#39;]))</pre>
<pre class="line after"><span class="ws">    </span>print(type(datetime.datetime.fromisoformat(result[&#39;datetime&#39;])))</pre>
<pre class="line after"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line after"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;datetime&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 181, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 211, in logUpdate
    print(type(result[&#39;datetime&#39;]))
KeyError: &#39;datetime&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 181, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 211, in logUpdate
    print(type(result['datetime']))
KeyError: 'datetime'


-->

2025-02-14 08:20:00,383 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;datetime&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Z7mXIe8Y6Gl86au5sLJ5";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;datetime&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-131798339520096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-131798328944096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-131798328944208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-131798328944320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-131798328944432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-131798328944544">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-131798328944656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-131798329016496">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-131798329020640">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">211</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if log_entries is None or not log_entries:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404&#34;</pre>
<pre class="line before"><span class="ws">    </span>return jsonify([log_entries.logList()])</pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line current"><span class="ws">    </span>print(type(result[&#39;datetime&#39;]))</pre>
<pre class="line after"><span class="ws">    </span>print(type(datetime.datetime.fromisoformat(result[&#39;datetime&#39;])))</pre>
<pre class="line after"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line after"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;datetime&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 181, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 211, in logUpdate
    print(type(result[&#39;datetime&#39;]))
KeyError: &#39;datetime&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 181, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 211, in logUpdate
    print(type(result['datetime']))
KeyError: 'datetime'


-->

2025-02-14 08:20:02,845 - DEBUG - Polling for notifications...
2025-02-14 08:20:02,880 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:02,882 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:02,901 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:02,902 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:07,908 - DEBUG - Polling for notifications...
2025-02-14 08:20:07,944 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:07,946 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:07,965 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:07,966 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:12,972 - DEBUG - Polling for notifications...
2025-02-14 08:20:13,006 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:13,008 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:13,027 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:13,028 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:18,033 - DEBUG - Polling for notifications...
2025-02-14 08:20:18,070 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:18,071 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:18,091 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:18,092 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:23,098 - DEBUG - Polling for notifications...
2025-02-14 08:20:23,133 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:23,136 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:23,155 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:23,156 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:28,161 - DEBUG - Polling for notifications...
2025-02-14 08:20:28,197 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:28,199 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:28,218 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:28,219 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:33,225 - DEBUG - Polling for notifications...
2025-02-14 08:20:33,261 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:33,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:33,281 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:33,282 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:38,288 - DEBUG - Polling for notifications...
2025-02-14 08:20:38,324 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:38,326 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:38,344 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:38,345 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:43,351 - DEBUG - Polling for notifications...
2025-02-14 08:20:43,387 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:43,389 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:43,408 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:43,409 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:48,412 - DEBUG - Polling for notifications...
2025-02-14 08:20:48,447 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:48,449 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:48,469 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:48,470 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:53,475 - DEBUG - Polling for notifications...
2025-02-14 08:20:53,510 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:53,512 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:53,531 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:53,532 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:58,556 - DEBUG - Polling for notifications...
2025-02-14 08:20:58,596 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:58,599 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:58,620 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:58,621 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:21:03,646 - DEBUG - Polling for notifications...
2025-02-14 08:21:03,683 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:21:03,685 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:03,704 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:21:03,705 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:21:08,715 - DEBUG - Polling for notifications...
2025-02-14 08:21:08,751 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:21:08,753 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:08,772 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:21:08,773 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:21:13,395 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:21:13,397 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:13,419 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 422 45
2025-02-14 08:21:13,420 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:21:13,420 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:21:13,799 - DEBUG - Polling for notifications...
2025-02-14 08:21:13,836 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:21:13,837 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:13,856 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 422 45
2025-02-14 08:21:13,857 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:21:13,857 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:21:26,159 - INFO - Application started.
2025-02-14 08:21:26,159 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:21:26,159 - INFO - Attempting to log in user: test
2025-02-14 08:21:26,168 - DEBUG - Loading KWallet
2025-02-14 08:21:26,170 - DEBUG - Loading SecretService
2025-02-14 08:21:26,195 - DEBUG - Loading Windows
2025-02-14 08:21:26,196 - DEBUG - Loading chainer
2025-02-14 08:21:26,197 - DEBUG - Loading libsecret
2025-02-14 08:21:26,198 - DEBUG - Loading macOS
2025-02-14 08:21:26,332 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:21:26,336 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:26,345 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:21:26,356 - DEBUG - Received response
2025-02-14 08:21:26,401 - INFO - User test logged in successfully.
2025-02-14 08:21:26,401 - INFO - Starting polling for notifications.
2025-02-14 08:21:26,402 - DEBUG - Polling for notifications...
2025-02-14 08:21:26,438 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517686 with data: None
2025-02-14 08:21:26,440 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:26,475 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517686 HTTP/1.1" 200 20
2025-02-14 08:21:26,476 - DEBUG - Received response: {
  "update": -15
}

2025-02-14 08:21:26,477 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:21:26,479 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:26,506 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:21:26,507 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:21:27,788 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 08:21:27,790 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:27,813 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 08:21:27,814 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:21:28,932 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:21:28,934 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:28,981 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17175
2025-02-14 08:21:28,982 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;datetime&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "UxqMHdjokNOyM9d3Dafy";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;datetime&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-128761570051232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-128761568601456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-128761568601568">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-128761568601680">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-128761568601792">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-128761568601904">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-128761568602016">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-128761568673856">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-128761568678000">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">212</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404&#34;</pre>
<pre class="line before"><span class="ws">    </span>return jsonify([log_entries.logList()])</pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>print(result)</pre>
<pre class="line current"><span class="ws">    </span>print(type(result[&#39;datetime&#39;]))</pre>
<pre class="line after"><span class="ws">    </span>print(type(datetime.datetime.fromisoformat(result[&#39;datetime&#39;])))</pre>
<pre class="line after"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line after"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;datetime&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 181, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 212, in logUpdate
    print(type(result[&#39;datetime&#39;]))
KeyError: &#39;datetime&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 181, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 212, in logUpdate
    print(type(result['datetime']))
KeyError: 'datetime'


-->

2025-02-14 08:21:28,983 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;datetime&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "UxqMHdjokNOyM9d3Dafy";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;datetime&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-128761570051232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-128761568601456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-128761568601568">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-128761568601680">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-128761568601792">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-128761568601904">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-128761568602016">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-128761568673856">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-128761568678000">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">212</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404&#34;</pre>
<pre class="line before"><span class="ws">    </span>return jsonify([log_entries.logList()])</pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>print(result)</pre>
<pre class="line current"><span class="ws">    </span>print(type(result[&#39;datetime&#39;]))</pre>
<pre class="line after"><span class="ws">    </span>print(type(datetime.datetime.fromisoformat(result[&#39;datetime&#39;])))</pre>
<pre class="line after"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line after"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;datetime&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 181, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 212, in logUpdate
    print(type(result[&#39;datetime&#39;]))
KeyError: &#39;datetime&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 181, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 212, in logUpdate
    print(type(result['datetime']))
KeyError: 'datetime'


-->

2025-02-14 08:21:31,482 - DEBUG - Polling for notifications...
2025-02-14 08:21:31,519 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517687 with data: None
2025-02-14 08:21:31,520 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:31,540 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517687 HTTP/1.1" 200 20
2025-02-14 08:21:31,541 - DEBUG - Received response: {
  "update": -16
}

2025-02-14 08:21:36,546 - DEBUG - Polling for notifications...
2025-02-14 08:21:36,583 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517687 with data: None
2025-02-14 08:21:36,584 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:36,604 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517687 HTTP/1.1" 200 20
2025-02-14 08:21:36,605 - DEBUG - Received response: {
  "update": -16
}

2025-02-14 08:21:59,942 - INFO - Application started.
2025-02-14 08:21:59,942 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:21:59,943 - INFO - Attempting to log in user: test
2025-02-14 08:21:59,953 - DEBUG - Loading KWallet
2025-02-14 08:21:59,954 - DEBUG - Loading SecretService
2025-02-14 08:21:59,978 - DEBUG - Loading Windows
2025-02-14 08:21:59,980 - DEBUG - Loading chainer
2025-02-14 08:21:59,980 - DEBUG - Loading libsecret
2025-02-14 08:21:59,981 - DEBUG - Loading macOS
2025-02-14 08:22:00,122 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:22:00,125 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:00,148 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:22:00,149 - DEBUG - Received response
2025-02-14 08:22:00,203 - INFO - User test logged in successfully.
2025-02-14 08:22:00,203 - INFO - Starting polling for notifications.
2025-02-14 08:22:00,204 - DEBUG - Polling for notifications...
2025-02-14 08:22:00,243 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:00,246 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:00,280 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 200 20
2025-02-14 08:22:00,281 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:22:00,282 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:22:00,284 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:00,312 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:22:00,313 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:22:01,456 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:22:01,458 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:01,481 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 08:22:01,482 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:22:02,357 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:22:02,359 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:02,382 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-14 08:22:02,422 - DEBUG - Received response: {
  "datetime": "2025-02-14 08:22:02",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-14 08:22:05,287 - DEBUG - Polling for notifications...
2025-02-14 08:22:05,323 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:05,324 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:05,344 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 200 20
2025-02-14 08:22:05,345 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:22:10,350 - DEBUG - Polling for notifications...
2025-02-14 08:22:10,388 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:10,390 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:10,409 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 200 20
2025-02-14 08:22:10,409 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:22:15,435 - DEBUG - Polling for notifications...
2025-02-14 08:22:15,471 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:15,473 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:15,492 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 200 20
2025-02-14 08:22:15,493 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:22:20,504 - DEBUG - Polling for notifications...
2025-02-14 08:22:20,544 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:20,547 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:20,567 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 200 20
2025-02-14 08:22:20,568 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:22:25,594 - DEBUG - Polling for notifications...
2025-02-14 08:22:25,632 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:25,634 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:25,653 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 200 20
2025-02-14 08:22:25,654 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:22:30,680 - DEBUG - Polling for notifications...
2025-02-14 08:22:30,718 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:30,720 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:30,742 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 422 45
2025-02-14 08:22:30,743 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:22:30,744 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:32,148 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:23:32,150 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:32,170 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 422 45
2025-02-14 08:23:32,171 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:32,171 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:32,326 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:23:32,328 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:32,357 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 422 45
2025-02-14 08:23:32,358 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:32,359 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:33,432 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:23:33,434 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:33,442 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 422 45
2025-02-14 08:23:33,483 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:33,483 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:48,484 - INFO - Application started.
2025-02-14 08:23:48,484 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:23:48,488 - INFO - Attempting to log in user: test
2025-02-14 08:23:48,496 - DEBUG - Loading KWallet
2025-02-14 08:23:48,498 - DEBUG - Loading SecretService
2025-02-14 08:23:48,525 - DEBUG - Loading Windows
2025-02-14 08:23:48,527 - DEBUG - Loading chainer
2025-02-14 08:23:48,528 - DEBUG - Loading libsecret
2025-02-14 08:23:48,529 - DEBUG - Loading macOS
2025-02-14 08:23:48,672 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:23:48,676 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:48,686 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:23:48,696 - DEBUG - Received response
2025-02-14 08:23:48,741 - INFO - User test logged in successfully.
2025-02-14 08:23:48,742 - INFO - Starting polling for notifications.
2025-02-14 08:23:48,742 - DEBUG - Polling for notifications...
2025-02-14 08:23:48,779 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517828 with data: None
2025-02-14 08:23:48,781 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:48,817 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517828 HTTP/1.1" 200 20
2025-02-14 08:23:48,818 - DEBUG - Received response: {
  "update": -80
}

2025-02-14 08:23:48,819 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:23:48,821 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:48,849 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:23:48,851 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:23:51,638 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:23:51,640 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:51,688 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 125
2025-02-14 08:23:51,689 - DEBUG - Received response: {
  "datetime": "2025-02-14 08:23:51",
  "log": "Error during the execution of the plugin: newPlugin",
  "status": "Error"
}

2025-02-14 08:23:53,824 - DEBUG - Polling for notifications...
2025-02-14 08:23:53,860 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517829 with data: None
2025-02-14 08:23:53,863 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:53,882 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517829 HTTP/1.1" 200 20
2025-02-14 08:23:53,883 - DEBUG - Received response: {
  "update": -81
}

2025-02-14 08:23:58,888 - DEBUG - Polling for notifications...
2025-02-14 08:23:58,926 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517829 with data: None
2025-02-14 08:23:58,928 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:58,947 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517829 HTTP/1.1" 200 20
2025-02-14 08:23:58,948 - DEBUG - Received response: {
  "update": -81
}

2025-02-14 08:23:59,472 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 08:23:59,473 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:59,494 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 08:23:59,495 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:24:03,952 - DEBUG - Polling for notifications...
2025-02-14 08:24:03,989 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517829 with data: None
2025-02-14 08:24:03,990 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:24:04,010 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517829 HTTP/1.1" 200 20
2025-02-14 08:24:04,011 - DEBUG - Received response: {
  "update": -81
}

2025-02-14 08:24:09,017 - DEBUG - Polling for notifications...
2025-02-14 08:24:09,054 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517829 with data: None
2025-02-14 08:24:09,056 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:24:09,076 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517829 HTTP/1.1" 200 20
2025-02-14 08:24:09,077 - DEBUG - Received response: {
  "update": -81
}

2025-02-14 10:17:41,514 - INFO - Application started.
2025-02-14 10:17:41,519 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 10:17:41,519 - INFO - Attempting to log in user: test
2025-02-14 10:17:41,533 - DEBUG - Loading KWallet
2025-02-14 10:17:41,535 - DEBUG - Loading SecretService
2025-02-14 10:17:41,590 - DEBUG - Loading Windows
2025-02-14 10:17:41,592 - DEBUG - Loading chainer
2025-02-14 10:17:41,593 - DEBUG - Loading libsecret
2025-02-14 10:17:41,594 - DEBUG - Loading macOS
2025-02-14 10:17:41,755 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 10:17:41,759 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:17:41,771 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 401 35
2025-02-14 10:17:41,781 - DEBUG - Received response
2025-02-14 10:17:41,782 - ERROR - Error 401: {
  "msg": "Error, login failed"
}

2025-02-14 10:17:56,324 - INFO - Application started.
2025-02-14 10:17:56,325 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 10:17:56,325 - INFO - Attempting to log in user: test
2025-02-14 10:17:56,334 - DEBUG - Loading KWallet
2025-02-14 10:17:56,336 - DEBUG - Loading SecretService
2025-02-14 10:17:56,367 - DEBUG - Loading Windows
2025-02-14 10:17:56,368 - DEBUG - Loading chainer
2025-02-14 10:17:56,369 - DEBUG - Loading libsecret
2025-02-14 10:17:56,370 - DEBUG - Loading macOS
2025-02-14 10:17:56,510 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 10:17:56,515 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:17:56,524 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 10:17:56,535 - DEBUG - Received response
2025-02-14 10:17:56,588 - INFO - User test logged in successfully.
2025-02-14 10:17:56,588 - INFO - Starting polling for notifications.
2025-02-14 10:17:56,589 - DEBUG - Polling for notifications...
2025-02-14 10:17:56,628 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739524676 with data: None
2025-02-14 10:17:56,630 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:17:56,652 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739524676 HTTP/1.1" 200 20
2025-02-14 10:17:56,653 - DEBUG - Received response: {
  "update": -44
}

2025-02-14 10:17:56,668 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 10:17:56,669 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:17:56,697 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 10:17:56,698 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 10:17:58,274 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 10:17:58,275 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:17:58,299 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 10:17:58,301 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 10:17:59,766 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 10:17:59,768 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:17:59,790 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-14 10:17:59,831 - DEBUG - Received response: {
  "datetime": "2025-02-14 10:17:59",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-14 10:18:01,659 - DEBUG - Polling for notifications...
2025-02-14 10:18:01,694 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739524677 with data: None
2025-02-14 10:18:01,696 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:18:01,715 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739524677 HTTP/1.1" 200 20
2025-02-14 10:18:01,716 - DEBUG - Received response: {
  "update": -45
}

2025-02-14 10:18:03,305 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 10:18:03,306 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:18:03,327 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 10:18:03,328 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 10:18:04,555 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-14 10:18:04,557 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:18:04,574 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 122
2025-02-14 10:18:04,615 - DEBUG - Received response: {
  "datetime": "2025-02-14 10:18:04",
  "log": "Error during the execution of the plugin: saluti",
  "status": "Error"
}

2025-02-14 10:18:06,721 - DEBUG - Polling for notifications...
2025-02-14 10:18:06,757 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739524677 with data: None
2025-02-14 10:18:06,759 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:18:06,779 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739524677 HTTP/1.1" 200 20
2025-02-14 10:18:06,780 - DEBUG - Received response: {
  "update": -45
}

2025-02-14 10:18:07,854 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 10:18:07,856 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:18:07,877 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 10:18:07,878 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 10:18:08,902 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 10:18:08,904 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:18:08,923 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 125
2025-02-14 10:18:08,963 - DEBUG - Received response: {
  "datetime": "2025-02-14 10:18:08",
  "log": "Error during the execution of the plugin: newPlugin",
  "status": "Error"
}

2025-02-14 10:38:22,420 - INFO - Application started.
2025-02-14 10:38:22,421 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 10:38:22,421 - INFO - Attempting to log in user: test
2025-02-14 10:38:22,431 - DEBUG - Loading KWallet
2025-02-14 10:38:22,433 - DEBUG - Loading SecretService
2025-02-14 10:38:22,459 - DEBUG - Loading Windows
2025-02-14 10:38:22,461 - DEBUG - Loading chainer
2025-02-14 10:38:22,461 - DEBUG - Loading libsecret
2025-02-14 10:38:22,462 - DEBUG - Loading macOS
2025-02-14 10:38:22,598 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 10:38:22,602 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:38:22,615 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 10:38:22,625 - DEBUG - Received response
2025-02-14 10:38:22,680 - INFO - User test logged in successfully.
2025-02-14 10:38:22,681 - INFO - Starting polling for notifications.
2025-02-14 10:38:22,681 - DEBUG - Polling for notifications...
2025-02-14 10:38:22,719 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739525902 with data: None
2025-02-14 10:38:22,721 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:38:22,757 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739525902 HTTP/1.1" 200 20
2025-02-14 10:38:22,759 - DEBUG - Received response: {
  "update": -44
}

2025-02-14 10:38:22,760 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 10:38:22,762 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:38:22,792 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 10:38:22,792 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 10:38:24,231 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 10:38:24,233 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:38:24,257 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 10:38:24,258 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 10:38:25,131 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 10:38:25,132 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:38:25,155 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 125
2025-02-14 10:38:25,195 - DEBUG - Received response: {
  "datetime": "2025-02-14 10:38:25",
  "log": "Error during the execution of the plugin: newPlugin",
  "status": "Error"
}

2025-02-14 10:38:27,766 - DEBUG - Polling for notifications...
2025-02-14 10:38:27,804 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739525903 with data: None
2025-02-14 10:38:27,806 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:38:27,825 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739525903 HTTP/1.1" 200 20
2025-02-14 10:38:27,826 - DEBUG - Received response: {
  "update": -45
}

2025-02-14 11:18:09,195 - INFO - Application started.
2025-02-14 11:18:09,200 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:18:09,201 - INFO - Attempting to log in user: test
2025-02-14 11:18:09,214 - DEBUG - Loading KWallet
2025-02-14 11:18:09,216 - DEBUG - Loading SecretService
2025-02-14 11:18:09,271 - DEBUG - Loading Windows
2025-02-14 11:18:09,274 - DEBUG - Loading chainer
2025-02-14 11:18:09,275 - DEBUG - Loading libsecret
2025-02-14 11:18:09,276 - DEBUG - Loading macOS
2025-02-14 11:18:09,427 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:18:09,431 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:09,453 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:18:09,454 - DEBUG - Received response
2025-02-14 11:18:09,497 - INFO - User test logged in successfully.
2025-02-14 11:18:09,497 - INFO - Starting polling for notifications.
2025-02-14 11:18:09,498 - DEBUG - Polling for notifications...
2025-02-14 11:18:09,536 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528289 with data: None
2025-02-14 11:18:09,538 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:09,559 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528289 HTTP/1.1" 200 20
2025-02-14 11:18:09,561 - DEBUG - Received response: {
  "update": -27
}

2025-02-14 11:18:14,566 - DEBUG - Polling for notifications...
2025-02-14 11:18:14,605 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528289 with data: None
2025-02-14 11:18:14,607 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:14,627 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528289 HTTP/1.1" 200 20
2025-02-14 11:18:14,628 - DEBUG - Received response: {
  "update": -27
}

2025-02-14 11:18:19,633 - DEBUG - Polling for notifications...
2025-02-14 11:18:19,671 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528289 with data: None
2025-02-14 11:18:19,673 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:19,693 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528289 HTTP/1.1" 200 20
2025-02-14 11:18:19,694 - DEBUG - Received response: {
  "update": -27
}

2025-02-14 11:18:24,699 - DEBUG - Polling for notifications...
2025-02-14 11:18:24,734 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528289 with data: None
2025-02-14 11:18:24,736 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:24,755 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528289 HTTP/1.1" 200 20
2025-02-14 11:18:24,756 - DEBUG - Received response: {
  "update": -27
}

2025-02-14 11:18:29,762 - DEBUG - Polling for notifications...
2025-02-14 11:18:29,798 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528289 with data: None
2025-02-14 11:18:29,800 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:29,819 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528289 HTTP/1.1" 200 20
2025-02-14 11:18:29,820 - DEBUG - Received response: {
  "update": -27
}

2025-02-14 11:18:34,826 - DEBUG - Polling for notifications...
2025-02-14 11:18:34,863 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528289 with data: None
2025-02-14 11:18:34,865 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:34,884 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528289 HTTP/1.1" 200 20
2025-02-14 11:18:34,885 - DEBUG - Received response: {
  "update": -27
}

2025-02-14 11:19:23,436 - INFO - Application started.
2025-02-14 11:19:23,436 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:19:23,436 - INFO - Attempting to log in user: test
2025-02-14 11:19:23,446 - DEBUG - Loading KWallet
2025-02-14 11:19:23,448 - DEBUG - Loading SecretService
2025-02-14 11:19:23,475 - DEBUG - Loading Windows
2025-02-14 11:19:23,477 - DEBUG - Loading chainer
2025-02-14 11:19:23,478 - DEBUG - Loading libsecret
2025-02-14 11:19:23,478 - DEBUG - Loading macOS
2025-02-14 11:19:23,608 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:19:23,612 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:19:23,624 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:19:23,635 - DEBUG - Received response
2025-02-14 11:19:23,690 - INFO - User test logged in successfully.
2025-02-14 11:19:23,690 - INFO - Starting polling for notifications.
2025-02-14 11:19:23,690 - DEBUG - Polling for notifications...
2025-02-14 11:19:23,727 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528363 with data: None
2025-02-14 11:19:23,729 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:19:23,750 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528363 HTTP/1.1" 200 20
2025-02-14 11:19:23,751 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:19:28,756 - DEBUG - Polling for notifications...
2025-02-14 11:19:28,794 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528363 with data: None
2025-02-14 11:19:28,796 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:19:28,815 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528363 HTTP/1.1" 200 20
2025-02-14 11:19:28,816 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:19:33,822 - DEBUG - Polling for notifications...
2025-02-14 11:19:33,859 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528363 with data: None
2025-02-14 11:19:33,860 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:19:33,880 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528363 HTTP/1.1" 200 20
2025-02-14 11:19:33,881 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:20:33,593 - INFO - Application started.
2025-02-14 11:20:33,593 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:20:33,593 - INFO - Attempting to log in user: test
2025-02-14 11:20:33,603 - DEBUG - Loading KWallet
2025-02-14 11:20:33,604 - DEBUG - Loading SecretService
2025-02-14 11:20:33,636 - DEBUG - Loading Windows
2025-02-14 11:20:33,638 - DEBUG - Loading chainer
2025-02-14 11:20:33,638 - DEBUG - Loading libsecret
2025-02-14 11:20:33,639 - DEBUG - Loading macOS
2025-02-14 11:20:33,773 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:20:33,777 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:33,789 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:20:33,799 - DEBUG - Received response
2025-02-14 11:20:33,844 - INFO - User test logged in successfully.
2025-02-14 11:20:33,845 - INFO - Starting polling for notifications.
2025-02-14 11:20:33,845 - DEBUG - Polling for notifications...
2025-02-14 11:20:33,881 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:20:33,883 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:33,905 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:20:33,906 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:20:38,912 - DEBUG - Polling for notifications...
2025-02-14 11:20:38,949 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:20:38,950 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:38,969 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:20:38,970 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:20:43,975 - DEBUG - Polling for notifications...
2025-02-14 11:20:44,012 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:20:44,014 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:44,033 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:20:44,034 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:20:49,039 - DEBUG - Polling for notifications...
2025-02-14 11:20:49,077 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:20:49,080 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:49,100 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:20:49,101 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:20:54,107 - DEBUG - Polling for notifications...
2025-02-14 11:20:54,143 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:20:54,145 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:54,164 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:20:54,165 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:20:59,171 - DEBUG - Polling for notifications...
2025-02-14 11:20:59,206 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:20:59,208 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:59,227 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:20:59,228 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:21:04,234 - DEBUG - Polling for notifications...
2025-02-14 11:21:04,271 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:21:04,273 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:21:04,293 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:21:04,294 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:22:10,734 - INFO - Application started.
2025-02-14 11:22:10,734 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:22:10,735 - INFO - Attempting to log in user: test
2025-02-14 11:22:10,744 - DEBUG - Loading KWallet
2025-02-14 11:22:10,746 - DEBUG - Loading SecretService
2025-02-14 11:22:10,773 - DEBUG - Loading Windows
2025-02-14 11:22:10,775 - DEBUG - Loading chainer
2025-02-14 11:22:10,775 - DEBUG - Loading libsecret
2025-02-14 11:22:10,776 - DEBUG - Loading macOS
2025-02-14 11:22:10,908 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:22:10,912 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:10,924 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:22:10,935 - DEBUG - Received response
2025-02-14 11:22:10,982 - INFO - User test logged in successfully.
2025-02-14 11:22:10,983 - INFO - Starting polling for notifications.
2025-02-14 11:22:10,984 - DEBUG - Polling for notifications...
2025-02-14 11:22:11,020 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528531 with data: None
2025-02-14 11:22:11,022 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:11,043 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528531 HTTP/1.1" 200 20
2025-02-14 11:22:11,044 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:22:16,050 - DEBUG - Polling for notifications...
2025-02-14 11:22:16,085 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528531 with data: None
2025-02-14 11:22:16,087 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:16,106 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528531 HTTP/1.1" 200 20
2025-02-14 11:22:16,107 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:22:21,113 - DEBUG - Polling for notifications...
2025-02-14 11:22:21,151 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528531 with data: None
2025-02-14 11:22:21,153 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:21,172 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528531 HTTP/1.1" 200 20
2025-02-14 11:22:21,173 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:22:26,179 - DEBUG - Polling for notifications...
2025-02-14 11:22:26,216 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528531 with data: None
2025-02-14 11:22:26,218 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:26,237 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528531 HTTP/1.1" 200 20
2025-02-14 11:22:26,238 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:22:31,244 - DEBUG - Polling for notifications...
2025-02-14 11:22:31,283 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528531 with data: None
2025-02-14 11:22:31,285 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:31,304 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528531 HTTP/1.1" 200 20
2025-02-14 11:22:31,305 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:22:36,311 - DEBUG - Polling for notifications...
2025-02-14 11:22:36,349 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528531 with data: None
2025-02-14 11:22:36,351 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:36,370 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528531 HTTP/1.1" 200 20
2025-02-14 11:22:36,371 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:23:33,053 - INFO - Application started.
2025-02-14 11:23:33,053 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:23:33,053 - INFO - Attempting to log in user: test
2025-02-14 11:23:33,066 - DEBUG - Loading KWallet
2025-02-14 11:23:33,068 - DEBUG - Loading SecretService
2025-02-14 11:23:33,098 - DEBUG - Loading Windows
2025-02-14 11:23:33,100 - DEBUG - Loading chainer
2025-02-14 11:23:33,101 - DEBUG - Loading libsecret
2025-02-14 11:23:33,103 - DEBUG - Loading macOS
2025-02-14 11:23:33,240 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:23:33,244 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:33,254 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:23:33,264 - DEBUG - Received response
2025-02-14 11:23:33,308 - INFO - User test logged in successfully.
2025-02-14 11:23:33,309 - INFO - Starting polling for notifications.
2025-02-14 11:23:33,310 - DEBUG - Polling for notifications...
2025-02-14 11:23:33,348 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:23:33,350 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:33,370 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:23:33,371 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:23:38,377 - DEBUG - Polling for notifications...
2025-02-14 11:23:38,414 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:23:38,416 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:38,435 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:23:38,436 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:23:43,442 - DEBUG - Polling for notifications...
2025-02-14 11:23:43,478 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:23:43,480 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:43,499 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:23:43,500 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:23:48,506 - DEBUG - Polling for notifications...
2025-02-14 11:23:48,543 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:23:48,545 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:48,565 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:23:48,565 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:23:53,571 - DEBUG - Polling for notifications...
2025-02-14 11:23:53,607 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:23:53,609 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:53,627 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:23:53,628 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:23:58,634 - DEBUG - Polling for notifications...
2025-02-14 11:23:58,670 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:23:58,672 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:58,692 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:23:58,693 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:24:03,698 - DEBUG - Polling for notifications...
2025-02-14 11:24:03,735 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:24:03,737 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:24:03,756 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:24:03,757 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:24:08,763 - DEBUG - Polling for notifications...
2025-02-14 11:24:08,797 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:24:08,799 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:24:08,818 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:24:08,819 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:30:18,483 - INFO - Application started.
2025-02-14 11:30:18,483 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:30:18,486 - INFO - Attempting to log in user: test
2025-02-14 11:30:18,495 - DEBUG - Loading KWallet
2025-02-14 11:30:18,497 - DEBUG - Loading SecretService
2025-02-14 11:30:18,523 - DEBUG - Loading Windows
2025-02-14 11:30:18,524 - DEBUG - Loading chainer
2025-02-14 11:30:18,525 - DEBUG - Loading libsecret
2025-02-14 11:30:18,526 - DEBUG - Loading macOS
2025-02-14 11:30:18,668 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:30:18,672 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:30:18,684 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:30:18,694 - DEBUG - Received response
2025-02-14 11:30:18,741 - INFO - User test logged in successfully.
2025-02-14 11:30:18,741 - INFO - Starting polling for notifications.
2025-02-14 11:30:18,742 - DEBUG - Polling for notifications...
2025-02-14 11:30:18,781 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529018 with data: None
2025-02-14 11:30:18,783 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:30:18,802 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529018 HTTP/1.1" 200 21
2025-02-14 11:30:18,804 - DEBUG - Received response: {
  "update": -498
}

2025-02-14 11:30:23,809 - DEBUG - Polling for notifications...
2025-02-14 11:30:23,847 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529018 with data: None
2025-02-14 11:30:23,850 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:30:23,870 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529018 HTTP/1.1" 200 21
2025-02-14 11:30:23,871 - DEBUG - Received response: {
  "update": -498
}

2025-02-14 11:30:28,877 - DEBUG - Polling for notifications...
2025-02-14 11:30:28,914 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529018 with data: None
2025-02-14 11:30:28,917 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:30:28,937 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529018 HTTP/1.1" 200 21
2025-02-14 11:30:28,938 - DEBUG - Received response: {
  "update": -498
}

2025-02-14 11:31:11,619 - INFO - Application started.
2025-02-14 11:31:11,619 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:31:11,619 - INFO - Attempting to log in user: test
2025-02-14 11:31:11,628 - DEBUG - Loading KWallet
2025-02-14 11:31:11,630 - DEBUG - Loading SecretService
2025-02-14 11:31:11,656 - DEBUG - Loading Windows
2025-02-14 11:31:11,658 - DEBUG - Loading chainer
2025-02-14 11:31:11,659 - DEBUG - Loading libsecret
2025-02-14 11:31:11,660 - DEBUG - Loading macOS
2025-02-14 11:31:11,797 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:31:11,801 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:11,811 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:31:11,821 - DEBUG - Received response
2025-02-14 11:31:11,867 - INFO - User test logged in successfully.
2025-02-14 11:31:11,867 - INFO - Starting polling for notifications.
2025-02-14 11:31:11,868 - DEBUG - Polling for notifications...
2025-02-14 11:31:11,905 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:11,908 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:11,929 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:11,930 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:31:16,936 - DEBUG - Polling for notifications...
2025-02-14 11:31:16,973 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:16,975 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:16,994 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:16,995 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:31:22,001 - DEBUG - Polling for notifications...
2025-02-14 11:31:22,037 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:22,039 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:22,058 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:22,059 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:31:27,064 - DEBUG - Polling for notifications...
2025-02-14 11:31:27,101 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:27,103 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:27,122 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:27,123 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:31:32,129 - DEBUG - Polling for notifications...
2025-02-14 11:31:32,165 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:32,167 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:32,186 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:32,187 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:31:37,192 - DEBUG - Polling for notifications...
2025-02-14 11:31:37,229 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:37,231 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:37,251 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:37,252 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:31:42,257 - DEBUG - Polling for notifications...
2025-02-14 11:31:42,294 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:42,296 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:42,315 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:42,315 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:32:48,727 - INFO - Application started.
2025-02-14 11:32:48,728 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:32:48,728 - INFO - Attempting to log in user: test
2025-02-14 11:32:48,737 - DEBUG - Loading KWallet
2025-02-14 11:32:48,738 - DEBUG - Loading SecretService
2025-02-14 11:32:48,763 - DEBUG - Loading Windows
2025-02-14 11:32:48,765 - DEBUG - Loading chainer
2025-02-14 11:32:48,766 - DEBUG - Loading libsecret
2025-02-14 11:32:48,767 - DEBUG - Loading macOS
2025-02-14 11:32:48,899 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:32:48,902 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:32:48,912 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:32:48,922 - DEBUG - Received response
2025-02-14 11:32:48,968 - INFO - User test logged in successfully.
2025-02-14 11:32:48,969 - INFO - Starting polling for notifications.
2025-02-14 11:32:48,970 - DEBUG - Polling for notifications...
2025-02-14 11:32:49,009 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529169 with data: None
2025-02-14 11:32:49,011 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:32:49,031 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529169 HTTP/1.1" 200 21
2025-02-14 11:32:49,032 - DEBUG - Received response: {
  "update": -649
}

2025-02-14 11:32:54,038 - DEBUG - Polling for notifications...
2025-02-14 11:32:54,074 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529169 with data: None
2025-02-14 11:32:54,075 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:32:54,094 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529169 HTTP/1.1" 200 21
2025-02-14 11:32:54,095 - DEBUG - Received response: {
  "update": -649
}

2025-02-14 11:35:40,369 - INFO - Application started.
2025-02-14 11:35:40,369 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:35:40,372 - INFO - Attempting to log in user: test
2025-02-14 11:35:40,381 - DEBUG - Loading KWallet
2025-02-14 11:35:40,382 - DEBUG - Loading SecretService
2025-02-14 11:35:40,408 - DEBUG - Loading Windows
2025-02-14 11:35:40,410 - DEBUG - Loading chainer
2025-02-14 11:35:40,411 - DEBUG - Loading libsecret
2025-02-14 11:35:40,412 - DEBUG - Loading macOS
2025-02-14 11:35:40,547 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:35:40,551 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:35:40,563 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:35:40,573 - DEBUG - Received response
2025-02-14 11:35:40,620 - INFO - User test logged in successfully.
2025-02-14 11:35:40,621 - INFO - Starting polling for notifications.
2025-02-14 11:35:40,621 - DEBUG - Polling for notifications...
2025-02-14 11:35:40,660 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529340 with data: None
2025-02-14 11:35:40,662 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:35:40,683 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529340 HTTP/1.1" 200 21
2025-02-14 11:35:40,684 - DEBUG - Received response: {
  "update": -820
}

2025-02-14 11:36:51,899 - INFO - Application started.
2025-02-14 11:36:51,899 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:36:51,899 - INFO - Attempting to log in user: test
2025-02-14 11:36:51,908 - DEBUG - Loading KWallet
2025-02-14 11:36:51,909 - DEBUG - Loading SecretService
2025-02-14 11:36:51,935 - DEBUG - Loading Windows
2025-02-14 11:36:51,936 - DEBUG - Loading chainer
2025-02-14 11:36:51,937 - DEBUG - Loading libsecret
2025-02-14 11:36:51,938 - DEBUG - Loading macOS
2025-02-14 11:36:52,068 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:36:52,071 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:36:52,081 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:36:52,092 - DEBUG - Received response
2025-02-14 11:36:52,145 - INFO - User test logged in successfully.
2025-02-14 11:36:52,146 - INFO - Starting polling for notifications.
2025-02-14 11:36:52,146 - DEBUG - Polling for notifications...
2025-02-14 11:36:52,184 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529412 with data: None
2025-02-14 11:36:52,186 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:36:52,207 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529412 HTTP/1.1" 200 21
2025-02-14 11:36:52,208 - DEBUG - Received response: {
  "update": -892
}

2025-02-14 11:37:54,009 - INFO - Application started.
2025-02-14 11:37:54,009 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:37:54,010 - INFO - Attempting to log in user: test
2025-02-14 11:37:54,019 - DEBUG - Loading KWallet
2025-02-14 11:37:54,021 - DEBUG - Loading SecretService
2025-02-14 11:37:54,051 - DEBUG - Loading Windows
2025-02-14 11:37:54,052 - DEBUG - Loading chainer
2025-02-14 11:37:54,053 - DEBUG - Loading libsecret
2025-02-14 11:37:54,054 - DEBUG - Loading macOS
2025-02-14 11:37:54,192 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:37:54,196 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:37:54,206 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:37:54,216 - DEBUG - Received response
2025-02-14 11:37:54,260 - INFO - User test logged in successfully.
2025-02-14 11:37:54,260 - INFO - Starting polling for notifications.
2025-02-14 11:37:54,261 - DEBUG - Polling for notifications...
2025-02-14 11:37:54,297 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529474 with data: None
2025-02-14 11:37:54,299 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:37:54,319 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529474 HTTP/1.1" 200 21
2025-02-14 11:37:54,321 - DEBUG - Received response: {
  "update": -954
}

2025-02-14 11:37:54,759 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:37:54,760 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:37:54,788 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:37:54,788 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:38:51,513 - INFO - Application started.
2025-02-14 11:38:51,513 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:38:51,514 - INFO - Attempting to log in user: test
2025-02-14 11:38:51,523 - DEBUG - Loading KWallet
2025-02-14 11:38:51,524 - DEBUG - Loading SecretService
2025-02-14 11:38:51,554 - DEBUG - Loading Windows
2025-02-14 11:38:51,556 - DEBUG - Loading chainer
2025-02-14 11:38:51,557 - DEBUG - Loading libsecret
2025-02-14 11:38:51,558 - DEBUG - Loading macOS
2025-02-14 11:38:51,700 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:38:51,704 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:38:51,718 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:38:51,729 - DEBUG - Received response
2025-02-14 11:38:51,783 - INFO - User test logged in successfully.
2025-02-14 11:38:51,784 - INFO - Starting polling for notifications.
2025-02-14 11:38:51,785 - DEBUG - Polling for notifications...
2025-02-14 11:38:51,821 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529532 with data: None
2025-02-14 11:38:51,823 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:38:51,844 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529532 HTTP/1.1" 200 22
2025-02-14 11:38:51,845 - DEBUG - Received response: {
  "update": -1012
}

2025-02-14 11:38:52,278 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:38:52,280 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:38:52,300 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:38:52,301 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:40:50,239 - INFO - Application started.
2025-02-14 11:40:50,239 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:40:50,240 - INFO - Attempting to log in user: test
2025-02-14 11:40:50,253 - DEBUG - Loading KWallet
2025-02-14 11:40:50,255 - DEBUG - Loading SecretService
2025-02-14 11:40:50,290 - DEBUG - Loading Windows
2025-02-14 11:40:50,292 - DEBUG - Loading chainer
2025-02-14 11:40:50,293 - DEBUG - Loading libsecret
2025-02-14 11:40:50,294 - DEBUG - Loading macOS
2025-02-14 11:40:50,425 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:40:50,429 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:40:50,439 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:40:50,449 - DEBUG - Received response
2025-02-14 11:40:50,493 - INFO - User test logged in successfully.
2025-02-14 11:40:50,493 - INFO - Starting polling for notifications.
2025-02-14 11:40:50,494 - DEBUG - Polling for notifications...
2025-02-14 11:40:50,530 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529650 with data: None
2025-02-14 11:40:50,532 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:40:50,553 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529650 HTTP/1.1" 200 22
2025-02-14 11:40:50,554 - DEBUG - Received response: {
  "update": -1130
}

2025-02-14 11:40:50,992 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:40:50,994 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:40:51,014 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:40:51,015 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:41:14,001 - INFO - Application started.
2025-02-14 11:41:14,001 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:41:14,002 - INFO - Attempting to log in user: test
2025-02-14 11:41:14,011 - DEBUG - Loading KWallet
2025-02-14 11:41:14,012 - DEBUG - Loading SecretService
2025-02-14 11:41:14,037 - DEBUG - Loading Windows
2025-02-14 11:41:14,038 - DEBUG - Loading chainer
2025-02-14 11:41:14,039 - DEBUG - Loading libsecret
2025-02-14 11:41:14,040 - DEBUG - Loading macOS
2025-02-14 11:41:14,170 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:41:14,173 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:41:14,183 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:41:14,193 - DEBUG - Received response
2025-02-14 11:41:14,241 - INFO - User test logged in successfully.
2025-02-14 11:41:14,241 - INFO - Starting polling for notifications.
2025-02-14 11:41:14,242 - DEBUG - Polling for notifications...
2025-02-14 11:41:14,277 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529674 with data: None
2025-02-14 11:41:14,279 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:41:14,299 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529674 HTTP/1.1" 200 22
2025-02-14 11:41:14,301 - DEBUG - Received response: {
  "update": -1154
}

2025-02-14 11:41:14,754 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:41:14,755 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:41:14,776 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:41:14,777 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:41:19,307 - DEBUG - Polling for notifications...
2025-02-14 11:41:19,343 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529675 with data: None
2025-02-14 11:41:19,345 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:41:19,364 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529675 HTTP/1.1" 200 22
2025-02-14 11:41:19,365 - DEBUG - Received response: {
  "update": -1155
}

2025-02-14 11:41:24,370 - DEBUG - Polling for notifications...
2025-02-14 11:41:24,404 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529675 with data: None
2025-02-14 11:41:24,406 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:41:24,425 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529675 HTTP/1.1" 200 22
2025-02-14 11:41:24,426 - DEBUG - Received response: {
  "update": -1155
}

2025-02-14 11:43:22,138 - INFO - Application started.
2025-02-14 11:43:22,139 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:43:22,139 - INFO - Attempting to log in user: test
2025-02-14 11:43:22,149 - DEBUG - Loading KWallet
2025-02-14 11:43:22,150 - DEBUG - Loading SecretService
2025-02-14 11:43:22,183 - DEBUG - Loading Windows
2025-02-14 11:43:22,185 - DEBUG - Loading chainer
2025-02-14 11:43:22,185 - DEBUG - Loading libsecret
2025-02-14 11:43:22,186 - DEBUG - Loading macOS
2025-02-14 11:43:22,319 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:43:22,323 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:22,332 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:43:22,343 - DEBUG - Received response
2025-02-14 11:43:22,388 - INFO - User test logged in successfully.
2025-02-14 11:43:22,388 - INFO - Starting polling for notifications.
2025-02-14 11:43:22,389 - DEBUG - Polling for notifications...
2025-02-14 11:43:22,427 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529802 with data: None
2025-02-14 11:43:22,429 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:22,450 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529802 HTTP/1.1" 200 22
2025-02-14 11:43:22,452 - DEBUG - Received response: {
  "update": -1282
}

2025-02-14 11:43:22,887 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:43:22,889 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:22,909 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:43:22,910 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:43:27,458 - DEBUG - Polling for notifications...
2025-02-14 11:43:27,496 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:27,498 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:27,518 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:27,519 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:43:32,525 - DEBUG - Polling for notifications...
2025-02-14 11:43:32,561 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:32,563 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:32,583 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:32,584 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:43:37,589 - DEBUG - Polling for notifications...
2025-02-14 11:43:37,627 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:37,628 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:37,647 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:37,648 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:43:42,653 - DEBUG - Polling for notifications...
2025-02-14 11:43:42,689 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:42,691 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:42,710 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:42,710 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:43:47,712 - DEBUG - Polling for notifications...
2025-02-14 11:43:47,749 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:47,750 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:47,769 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:47,770 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:43:52,775 - DEBUG - Polling for notifications...
2025-02-14 11:43:52,812 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:52,814 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:52,833 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:52,834 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:43:57,839 - DEBUG - Polling for notifications...
2025-02-14 11:43:57,876 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:57,878 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:57,897 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:57,898 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:44:02,904 - DEBUG - Polling for notifications...
2025-02-14 11:44:02,941 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:44:02,943 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:44:02,962 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:44:02,962 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:44:07,968 - DEBUG - Polling for notifications...
2025-02-14 11:44:08,005 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:44:08,007 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:44:08,026 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:44:08,027 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:44:13,033 - DEBUG - Polling for notifications...
2025-02-14 11:44:13,070 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:44:13,072 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:44:13,091 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:44:13,092 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:44:18,098 - DEBUG - Polling for notifications...
2025-02-14 11:44:18,133 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:44:18,135 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:44:18,155 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:44:18,156 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:45:33,353 - INFO - Application started.
2025-02-14 11:45:33,353 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:45:33,354 - INFO - Attempting to log in user: test
2025-02-14 11:45:33,363 - DEBUG - Loading KWallet
2025-02-14 11:45:33,365 - DEBUG - Loading SecretService
2025-02-14 11:45:33,390 - DEBUG - Loading Windows
2025-02-14 11:45:33,392 - DEBUG - Loading chainer
2025-02-14 11:45:33,393 - DEBUG - Loading libsecret
2025-02-14 11:45:33,394 - DEBUG - Loading macOS
2025-02-14 11:45:33,525 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:45:33,529 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:33,539 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:45:33,550 - DEBUG - Received response
2025-02-14 11:45:33,602 - INFO - User test logged in successfully.
2025-02-14 11:45:33,603 - INFO - Starting polling for notifications.
2025-02-14 11:45:33,603 - DEBUG - Polling for notifications...
2025-02-14 11:45:33,640 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529933 with data: None
2025-02-14 11:45:33,642 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:33,663 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529933 HTTP/1.1" 200 22
2025-02-14 11:45:33,664 - DEBUG - Received response: {
  "update": -1413
}

2025-02-14 11:45:34,098 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:45:34,100 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:34,120 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:45:34,121 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:45:38,670 - DEBUG - Polling for notifications...
2025-02-14 11:45:38,708 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:45:38,710 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:38,731 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:45:38,732 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:45:43,737 - DEBUG - Polling for notifications...
2025-02-14 11:45:43,774 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:45:43,776 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:43,795 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:45:43,796 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:45:48,802 - DEBUG - Polling for notifications...
2025-02-14 11:45:48,838 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:45:48,841 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:48,860 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:45:48,861 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:45:53,866 - DEBUG - Polling for notifications...
2025-02-14 11:45:53,903 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:45:53,905 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:53,924 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:45:53,925 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:45:58,931 - DEBUG - Polling for notifications...
2025-02-14 11:45:58,967 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:45:58,969 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:58,988 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:45:58,989 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:04,015 - DEBUG - Polling for notifications...
2025-02-14 11:46:04,051 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:04,053 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:04,072 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:04,073 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:09,098 - DEBUG - Polling for notifications...
2025-02-14 11:46:09,139 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:09,142 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:09,163 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:09,164 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:14,190 - DEBUG - Polling for notifications...
2025-02-14 11:46:14,225 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:14,227 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:14,246 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:14,247 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:19,273 - DEBUG - Polling for notifications...
2025-02-14 11:46:19,309 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:19,311 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:19,330 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:19,331 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:24,332 - DEBUG - Polling for notifications...
2025-02-14 11:46:24,369 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:24,370 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:24,389 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:24,390 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:29,416 - DEBUG - Polling for notifications...
2025-02-14 11:46:29,454 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:29,456 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:29,475 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:29,476 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:34,501 - DEBUG - Polling for notifications...
2025-02-14 11:46:34,537 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:34,539 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:34,557 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:34,558 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:39,584 - DEBUG - Polling for notifications...
2025-02-14 11:46:39,621 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:39,623 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:39,644 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:39,645 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:44,647 - DEBUG - Polling for notifications...
2025-02-14 11:46:44,683 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:44,685 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:44,704 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:44,705 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:49,730 - DEBUG - Polling for notifications...
2025-02-14 11:46:49,767 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:49,769 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:49,789 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:49,790 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:54,815 - DEBUG - Polling for notifications...
2025-02-14 11:46:54,852 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:54,854 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:54,873 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:54,874 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:59,895 - DEBUG - Polling for notifications...
2025-02-14 11:46:59,932 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:59,934 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:59,954 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:59,954 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:04,980 - DEBUG - Polling for notifications...
2025-02-14 11:47:05,017 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:05,019 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:05,038 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:05,039 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:10,056 - DEBUG - Polling for notifications...
2025-02-14 11:47:10,094 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:10,096 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:10,116 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:10,117 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:15,142 - DEBUG - Polling for notifications...
2025-02-14 11:47:15,177 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:15,179 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:15,198 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:15,199 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:20,206 - DEBUG - Polling for notifications...
2025-02-14 11:47:20,243 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:20,245 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:20,265 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:20,266 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:25,288 - DEBUG - Polling for notifications...
2025-02-14 11:47:25,324 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:25,326 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:25,345 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:25,346 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:30,358 - DEBUG - Polling for notifications...
2025-02-14 11:47:30,394 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:30,396 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:30,415 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:30,416 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:35,441 - DEBUG - Polling for notifications...
2025-02-14 11:47:35,476 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:35,477 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:35,496 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:35,497 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:40,522 - DEBUG - Polling for notifications...
2025-02-14 11:47:40,559 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:40,561 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:40,580 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:40,581 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:45,607 - DEBUG - Polling for notifications...
2025-02-14 11:47:45,643 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:45,644 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:45,663 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:45,664 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:50,690 - DEBUG - Polling for notifications...
2025-02-14 11:47:50,725 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:50,726 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:50,745 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:50,746 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:55,764 - DEBUG - Polling for notifications...
2025-02-14 11:47:55,798 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:55,800 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:55,819 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:55,820 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:00,832 - DEBUG - Polling for notifications...
2025-02-14 11:48:00,866 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:00,868 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:00,887 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:00,888 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:05,901 - DEBUG - Polling for notifications...
2025-02-14 11:48:05,939 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:05,942 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:05,962 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:05,963 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:10,989 - DEBUG - Polling for notifications...
2025-02-14 11:48:11,025 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:11,026 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:11,046 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:11,047 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:16,073 - DEBUG - Polling for notifications...
2025-02-14 11:48:16,109 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:16,111 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:16,130 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:16,131 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:21,137 - DEBUG - Polling for notifications...
2025-02-14 11:48:21,176 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:21,179 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:21,200 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:21,200 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:26,226 - DEBUG - Polling for notifications...
2025-02-14 11:48:26,262 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:26,263 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:26,282 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:26,283 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:31,285 - DEBUG - Polling for notifications...
2025-02-14 11:48:31,322 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:31,324 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:31,343 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:31,344 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:36,356 - DEBUG - Polling for notifications...
2025-02-14 11:48:36,392 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:36,395 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:36,414 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:36,415 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:41,417 - DEBUG - Polling for notifications...
2025-02-14 11:48:41,454 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:41,456 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:41,475 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:41,476 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:46,501 - DEBUG - Polling for notifications...
2025-02-14 11:48:46,537 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:46,538 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:46,558 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:46,558 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:51,584 - DEBUG - Polling for notifications...
2025-02-14 11:48:51,620 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:51,622 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:51,641 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:51,642 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:56,668 - DEBUG - Polling for notifications...
2025-02-14 11:48:56,703 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:56,705 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:56,724 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:56,725 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:01,750 - DEBUG - Polling for notifications...
2025-02-14 11:49:01,787 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:01,789 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:01,808 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:01,809 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:06,834 - DEBUG - Polling for notifications...
2025-02-14 11:49:06,870 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:06,872 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:06,891 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:06,892 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:11,918 - DEBUG - Polling for notifications...
2025-02-14 11:49:11,954 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:11,956 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:11,975 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:11,976 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:17,001 - DEBUG - Polling for notifications...
2025-02-14 11:49:17,056 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:17,060 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:17,101 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:17,103 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:22,129 - DEBUG - Polling for notifications...
2025-02-14 11:49:22,167 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:22,169 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:22,190 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:22,191 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:27,216 - DEBUG - Polling for notifications...
2025-02-14 11:49:27,253 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:27,255 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:27,278 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:27,280 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:32,305 - DEBUG - Polling for notifications...
2025-02-14 11:49:32,342 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:32,344 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:32,365 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:32,366 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:37,391 - DEBUG - Polling for notifications...
2025-02-14 11:49:37,432 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:37,433 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:37,453 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:37,454 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:42,480 - DEBUG - Polling for notifications...
2025-02-14 11:49:42,517 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:42,520 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:42,541 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:42,542 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:47,545 - DEBUG - Polling for notifications...
2025-02-14 11:49:47,582 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:47,584 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:47,603 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:47,605 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:52,631 - DEBUG - Polling for notifications...
2025-02-14 11:49:52,669 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:52,671 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:52,693 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:52,694 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:57,720 - DEBUG - Polling for notifications...
2025-02-14 11:49:57,757 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:57,760 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:57,781 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:57,782 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:02,792 - DEBUG - Polling for notifications...
2025-02-14 11:50:02,830 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:02,832 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:02,854 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:02,856 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:07,881 - DEBUG - Polling for notifications...
2025-02-14 11:50:07,919 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:07,921 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:07,940 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:07,942 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:12,968 - DEBUG - Polling for notifications...
2025-02-14 11:50:13,005 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:13,010 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:13,030 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:13,031 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:18,057 - DEBUG - Polling for notifications...
2025-02-14 11:50:18,097 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:18,099 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:18,118 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:18,119 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:23,144 - DEBUG - Polling for notifications...
2025-02-14 11:50:23,182 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:23,185 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:23,208 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:23,209 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:28,234 - DEBUG - Polling for notifications...
2025-02-14 11:50:28,271 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:28,273 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:28,294 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:28,295 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:33,320 - DEBUG - Polling for notifications...
2025-02-14 11:50:33,361 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:33,363 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:33,387 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:33,393 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:38,420 - DEBUG - Polling for notifications...
2025-02-14 11:50:38,458 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:38,461 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:38,481 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:38,482 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:43,507 - DEBUG - Polling for notifications...
2025-02-14 11:50:43,548 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:43,550 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:43,572 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:43,574 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:48,600 - DEBUG - Polling for notifications...
2025-02-14 11:50:48,645 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:48,649 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:48,687 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:48,688 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:53,704 - DEBUG - Polling for notifications...
2025-02-14 11:50:53,740 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:53,743 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:53,765 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:53,766 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:58,792 - DEBUG - Polling for notifications...
2025-02-14 11:50:58,829 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:58,831 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:58,850 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:58,851 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:03,876 - DEBUG - Polling for notifications...
2025-02-14 11:51:03,916 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:03,918 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:03,939 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:03,940 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:08,965 - DEBUG - Polling for notifications...
2025-02-14 11:51:09,004 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:09,006 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:09,026 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:09,029 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:14,054 - DEBUG - Polling for notifications...
2025-02-14 11:51:14,092 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:14,094 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:14,117 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:14,118 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:19,143 - DEBUG - Polling for notifications...
2025-02-14 11:51:19,183 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:19,188 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:19,208 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:19,209 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:24,235 - DEBUG - Polling for notifications...
2025-02-14 11:51:24,287 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:24,293 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:24,328 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:24,333 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:29,360 - DEBUG - Polling for notifications...
2025-02-14 11:51:29,403 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:29,405 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:29,427 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:29,429 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:34,454 - DEBUG - Polling for notifications...
2025-02-14 11:51:34,495 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:34,498 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:34,523 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:34,526 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:39,552 - DEBUG - Polling for notifications...
2025-02-14 11:51:39,589 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:39,592 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:39,613 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:39,615 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:44,640 - DEBUG - Polling for notifications...
2025-02-14 11:51:44,678 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:44,680 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:44,702 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:44,703 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:49,728 - DEBUG - Polling for notifications...
2025-02-14 11:51:49,767 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:49,769 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:49,790 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:49,791 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:54,816 - DEBUG - Polling for notifications...
2025-02-14 11:51:54,853 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:54,855 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:54,874 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:54,876 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:59,902 - DEBUG - Polling for notifications...
2025-02-14 11:51:59,942 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:59,944 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:59,965 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:59,966 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:04,992 - DEBUG - Polling for notifications...
2025-02-14 11:52:05,033 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:05,035 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:05,059 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:05,060 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:10,086 - DEBUG - Polling for notifications...
2025-02-14 11:52:10,128 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:10,131 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:10,151 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:10,152 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:15,163 - DEBUG - Polling for notifications...
2025-02-14 11:52:15,201 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:15,203 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:15,223 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:15,224 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:20,232 - DEBUG - Polling for notifications...
2025-02-14 11:52:20,268 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:20,270 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:20,289 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:20,290 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:25,316 - DEBUG - Polling for notifications...
2025-02-14 11:52:25,351 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:25,353 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:25,372 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:25,373 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:30,376 - DEBUG - Polling for notifications...
2025-02-14 11:52:30,411 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:30,412 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:30,431 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:30,432 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:35,444 - DEBUG - Polling for notifications...
2025-02-14 11:52:35,481 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:35,482 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:35,501 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:35,502 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:40,528 - DEBUG - Polling for notifications...
2025-02-14 11:52:40,563 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:40,565 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:40,584 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:40,585 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:45,611 - DEBUG - Polling for notifications...
2025-02-14 11:52:45,646 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:45,648 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:45,667 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:45,668 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:50,694 - DEBUG - Polling for notifications...
2025-02-14 11:52:50,730 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:50,732 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:50,751 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:50,752 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:55,777 - DEBUG - Polling for notifications...
2025-02-14 11:52:55,815 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:55,817 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:55,836 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:55,837 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:53:00,843 - DEBUG - Polling for notifications...
2025-02-14 11:53:00,880 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:53:00,882 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:53:00,902 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:53:00,903 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:53:18,356 - INFO - Application started.
2025-02-14 11:53:18,356 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:53:18,356 - INFO - Attempting to log in user: test
2025-02-14 11:53:18,365 - DEBUG - Loading KWallet
2025-02-14 11:53:18,366 - DEBUG - Loading SecretService
2025-02-14 11:53:18,392 - DEBUG - Loading Windows
2025-02-14 11:53:18,393 - DEBUG - Loading chainer
2025-02-14 11:53:18,394 - DEBUG - Loading libsecret
2025-02-14 11:53:18,395 - DEBUG - Loading macOS
2025-02-14 11:53:18,529 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:53:18,532 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:53:18,542 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:53:18,552 - DEBUG - Received response
2025-02-14 11:53:18,598 - INFO - User test logged in successfully.
2025-02-14 11:53:18,598 - INFO - Starting polling for notifications.
2025-02-14 11:53:18,599 - DEBUG - Polling for notifications...
2025-02-14 11:53:18,635 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530398 with data: None
2025-02-14 11:53:18,637 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:53:18,657 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530398 HTTP/1.1" 200 22
2025-02-14 11:53:18,658 - DEBUG - Received response: {
  "update": -1878
}

2025-02-14 11:53:19,095 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:53:19,097 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:53:19,118 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:53:19,119 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:54:09,997 - INFO - Application started.
2025-02-14 11:54:09,997 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:54:09,997 - INFO - Attempting to log in user: test
2025-02-14 11:54:10,006 - DEBUG - Loading KWallet
2025-02-14 11:54:10,008 - DEBUG - Loading SecretService
2025-02-14 11:54:10,035 - DEBUG - Loading Windows
2025-02-14 11:54:10,037 - DEBUG - Loading chainer
2025-02-14 11:54:10,038 - DEBUG - Loading libsecret
2025-02-14 11:54:10,039 - DEBUG - Loading macOS
2025-02-14 11:54:10,173 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:54:10,178 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:10,190 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:54:10,200 - DEBUG - Received response
2025-02-14 11:54:10,250 - INFO - User test logged in successfully.
2025-02-14 11:54:10,251 - INFO - Starting polling for notifications.
2025-02-14 11:54:10,251 - DEBUG - Polling for notifications...
2025-02-14 11:54:10,288 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530450 with data: None
2025-02-14 11:54:10,291 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:10,310 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530450 HTTP/1.1" 200 22
2025-02-14 11:54:10,311 - DEBUG - Received response: {
  "update": -1930
}

2025-02-14 11:54:10,760 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:54:10,762 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:10,782 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:54:10,783 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:54:15,317 - DEBUG - Polling for notifications...
2025-02-14 11:54:15,354 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:15,356 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:15,375 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:15,376 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:20,382 - DEBUG - Polling for notifications...
2025-02-14 11:54:20,418 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:20,420 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:20,439 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:20,440 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:25,466 - DEBUG - Polling for notifications...
2025-02-14 11:54:25,502 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:25,504 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:25,523 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:25,524 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:30,550 - DEBUG - Polling for notifications...
2025-02-14 11:54:30,588 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:30,590 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:30,609 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:30,611 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:35,636 - DEBUG - Polling for notifications...
2025-02-14 11:54:35,672 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:35,674 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:35,693 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:35,694 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:40,716 - DEBUG - Polling for notifications...
2025-02-14 11:54:40,753 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:40,754 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:40,773 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:40,774 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:45,783 - DEBUG - Polling for notifications...
2025-02-14 11:54:45,819 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:45,820 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:45,839 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:45,840 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:50,846 - DEBUG - Polling for notifications...
2025-02-14 11:54:50,886 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:50,888 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:50,910 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:50,911 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:55,924 - DEBUG - Polling for notifications...
2025-02-14 11:54:55,963 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:55,964 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:55,983 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:55,984 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:01,009 - DEBUG - Polling for notifications...
2025-02-14 11:55:01,051 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:55:01,053 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:01,075 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:55:01,077 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:06,102 - DEBUG - Polling for notifications...
2025-02-14 11:55:06,139 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:55:06,140 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:06,159 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:55:06,160 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:11,185 - DEBUG - Polling for notifications...
2025-02-14 11:55:11,223 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:55:11,225 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:11,247 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:55:11,247 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:16,273 - DEBUG - Polling for notifications...
2025-02-14 11:55:16,307 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:55:16,309 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:16,327 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:55:16,328 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:21,354 - DEBUG - Polling for notifications...
2025-02-14 11:55:21,389 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:55:21,392 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:21,413 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:55:21,414 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:26,428 - DEBUG - Polling for notifications...
2025-02-14 11:55:26,465 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:55:26,467 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:26,486 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:55:26,487 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:39,476 - INFO - Application started.
2025-02-14 11:55:39,476 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:55:39,477 - INFO - Attempting to log in user: test
2025-02-14 11:55:39,486 - DEBUG - Loading KWallet
2025-02-14 11:55:39,487 - DEBUG - Loading SecretService
2025-02-14 11:55:39,516 - DEBUG - Loading Windows
2025-02-14 11:55:39,517 - DEBUG - Loading chainer
2025-02-14 11:55:39,518 - DEBUG - Loading libsecret
2025-02-14 11:55:39,519 - DEBUG - Loading macOS
2025-02-14 11:55:39,647 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:55:39,650 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:39,661 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:55:39,671 - DEBUG - Received response
2025-02-14 11:55:39,717 - INFO - User test logged in successfully.
2025-02-14 11:55:39,717 - INFO - Starting polling for notifications.
2025-02-14 11:55:39,718 - DEBUG - Polling for notifications...
2025-02-14 11:55:39,755 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530539 with data: None
2025-02-14 11:55:39,757 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:39,778 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530539 HTTP/1.1" 200 22
2025-02-14 11:55:39,780 - DEBUG - Received response: {
  "update": -2019
}

2025-02-14 11:55:40,227 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:55:40,229 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:40,249 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:55:40,250 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:55:43,044 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 11:55:43,046 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:43,093 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 125
2025-02-14 11:55:43,094 - DEBUG - Received response: {
  "datetime": "2025-02-14 11:55:43",
  "log": "Error during the execution of the plugin: newPlugin",
  "status": "Error"
}

2025-02-14 11:55:44,785 - DEBUG - Polling for notifications...
2025-02-14 11:55:44,821 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530540 with data: None
2025-02-14 11:55:44,823 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:44,842 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530540 HTTP/1.1" 200 22
2025-02-14 11:55:44,843 - DEBUG - Received response: {
  "update": -2020
}

2025-02-14 11:55:49,848 - DEBUG - Polling for notifications...
2025-02-14 11:55:49,884 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530540 with data: None
2025-02-14 11:55:49,886 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:49,905 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530540 HTTP/1.1" 200 22
2025-02-14 11:55:49,907 - DEBUG - Received response: {
  "update": -2020
}

2025-02-14 11:57:46,477 - INFO - Application started.
2025-02-14 11:57:46,477 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:57:46,477 - INFO - Attempting to log in user: test
2025-02-14 11:57:46,487 - DEBUG - Loading KWallet
2025-02-14 11:57:46,488 - DEBUG - Loading SecretService
2025-02-14 11:57:46,514 - DEBUG - Loading Windows
2025-02-14 11:57:46,515 - DEBUG - Loading chainer
2025-02-14 11:57:46,515 - DEBUG - Loading libsecret
2025-02-14 11:57:46,516 - DEBUG - Loading macOS
2025-02-14 11:57:46,652 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:57:46,656 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:57:46,667 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:57:46,677 - DEBUG - Received response
2025-02-14 11:57:46,723 - INFO - User test logged in successfully.
2025-02-14 11:57:46,723 - INFO - Starting polling for notifications.
2025-02-14 11:57:46,724 - DEBUG - Polling for notifications...
2025-02-14 11:57:46,762 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530666 with data: None
2025-02-14 11:57:46,764 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:57:46,785 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530666 HTTP/1.1" 200 22
2025-02-14 11:57:46,786 - DEBUG - Received response: {
  "update": -2146
}

2025-02-14 11:57:47,226 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:57:47,228 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:57:47,249 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:57:47,250 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:57:51,792 - DEBUG - Polling for notifications...
2025-02-14 11:57:51,829 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530667 with data: None
2025-02-14 11:57:51,831 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:57:51,850 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530667 HTTP/1.1" 200 22
2025-02-14 11:57:51,851 - DEBUG - Received response: {
  "update": -2147
}

2025-02-14 11:59:10,647 - INFO - Application started.
2025-02-14 11:59:10,647 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:59:10,648 - INFO - Attempting to log in user: test
2025-02-14 11:59:10,658 - DEBUG - Loading KWallet
2025-02-14 11:59:10,660 - DEBUG - Loading SecretService
2025-02-14 11:59:10,687 - DEBUG - Loading Windows
2025-02-14 11:59:10,689 - DEBUG - Loading chainer
2025-02-14 11:59:10,690 - DEBUG - Loading libsecret
2025-02-14 11:59:10,691 - DEBUG - Loading macOS
2025-02-14 11:59:10,819 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:59:10,822 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:59:10,832 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:59:10,842 - DEBUG - Received response
2025-02-14 11:59:10,887 - INFO - User test logged in successfully.
2025-02-14 11:59:10,888 - INFO - Starting polling for notifications.
2025-02-14 11:59:10,888 - DEBUG - Polling for notifications...
2025-02-14 11:59:10,925 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530751 with data: None
2025-02-14 11:59:10,927 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:59:10,947 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530751 HTTP/1.1" 200 22
2025-02-14 11:59:10,949 - DEBUG - Received response: {
  "update": -2231
}

2025-02-14 11:59:11,375 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:59:11,377 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:59:11,397 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:59:11,398 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:59:15,954 - DEBUG - Polling for notifications...
2025-02-14 11:59:15,991 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530751 with data: None
2025-02-14 11:59:15,994 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:59:16,014 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530751 HTTP/1.1" 200 22
2025-02-14 11:59:16,016 - DEBUG - Received response: {
  "update": -2231
}

2025-02-14 11:59:21,021 - DEBUG - Polling for notifications...
2025-02-14 11:59:21,058 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530751 with data: None
2025-02-14 11:59:21,060 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:59:21,079 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530751 HTTP/1.1" 200 22
2025-02-14 11:59:21,080 - DEBUG - Received response: {
  "update": -2231
}

2025-02-14 12:00:25,219 - INFO - Application started.
2025-02-14 12:00:25,220 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:00:25,220 - INFO - Attempting to log in user: test
2025-02-14 12:00:25,230 - DEBUG - Loading KWallet
2025-02-14 12:00:25,231 - DEBUG - Loading SecretService
2025-02-14 12:00:25,256 - DEBUG - Loading Windows
2025-02-14 12:00:25,258 - DEBUG - Loading chainer
2025-02-14 12:00:25,259 - DEBUG - Loading libsecret
2025-02-14 12:00:25,259 - DEBUG - Loading macOS
2025-02-14 12:00:25,392 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:00:25,396 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:25,407 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:00:25,418 - DEBUG - Received response
2025-02-14 12:00:25,463 - INFO - User test logged in successfully.
2025-02-14 12:00:25,463 - INFO - Starting polling for notifications.
2025-02-14 12:00:25,464 - DEBUG - Polling for notifications...
2025-02-14 12:00:25,502 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530825 with data: None
2025-02-14 12:00:25,504 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:25,524 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530825 HTTP/1.1" 200 22
2025-02-14 12:00:25,525 - DEBUG - Received response: {
  "update": -2305
}

2025-02-14 12:00:25,958 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:00:25,960 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:25,981 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:00:25,982 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:00:28,602 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:28,604 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:28,625 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:28,625 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:28,663 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:28,666 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:28,687 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:28,688 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:30,531 - DEBUG - Polling for notifications...
2025-02-14 12:00:30,570 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530826 with data: None
2025-02-14 12:00:30,572 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:30,591 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530826 HTTP/1.1" 200 22
2025-02-14 12:00:30,592 - DEBUG - Received response: {
  "update": -2306
}

2025-02-14 12:00:30,631 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 12:00:30,633 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:30,658 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-14 12:00:30,698 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:00:30",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-14 12:00:35,598 - DEBUG - Polling for notifications...
2025-02-14 12:00:35,635 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530826 with data: None
2025-02-14 12:00:35,637 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:35,656 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530826 HTTP/1.1" 200 22
2025-02-14 12:00:35,657 - DEBUG - Received response: {
  "update": -2306
}

2025-02-14 12:00:37,426 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,427 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,448 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,449 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,486 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,487 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,508 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,509 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,579 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,581 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,602 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,603 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,639 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,641 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,661 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,662 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,747 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,749 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,769 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,770 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,807 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,809 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,830 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,831 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,900 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,901 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,922 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,923 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,959 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,961 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,982 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,983 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:38,039 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:38,041 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:38,063 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:38,064 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:38,103 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:38,105 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:38,126 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:38,127 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:05:57,268 - INFO - Application started.
2025-02-14 12:05:57,268 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:05:57,268 - INFO - Attempting to log in user: test
2025-02-14 12:05:57,277 - DEBUG - Loading KWallet
2025-02-14 12:05:57,279 - DEBUG - Loading SecretService
2025-02-14 12:05:57,305 - DEBUG - Loading Windows
2025-02-14 12:05:57,306 - DEBUG - Loading chainer
2025-02-14 12:05:57,307 - DEBUG - Loading libsecret
2025-02-14 12:05:57,308 - DEBUG - Loading macOS
2025-02-14 12:05:57,436 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:05:57,440 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:05:57,461 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:05:57,462 - DEBUG - Received response
2025-02-14 12:05:57,515 - INFO - User test logged in successfully.
2025-02-14 12:05:57,515 - INFO - Starting polling for notifications.
2025-02-14 12:05:57,517 - DEBUG - Polling for notifications...
2025-02-14 12:05:57,554 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531157 with data: None
2025-02-14 12:05:57,557 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:05:57,578 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531157 HTTP/1.1" 200 22
2025-02-14 12:05:57,579 - DEBUG - Received response: {
  "update": -2637
}

2025-02-14 12:05:58,020 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:05:58,022 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:05:58,043 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:05:58,043 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:05:59,009 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:05:59,011 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:05:59,032 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:05:59,033 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:05:59,070 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:05:59,072 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:05:59,095 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:05:59,096 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:06:01,180 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:06:01,182 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:01,202 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:06:01,203 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:06:01,239 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:06:01,241 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:01,262 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:06:01,263 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:06:02,584 - DEBUG - Polling for notifications...
2025-02-14 12:06:02,621 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:02,623 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:02,641 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:02,642 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:03,876 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-14 12:06:03,878 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:03,926 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 122
2025-02-14 12:06:03,927 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:06:03",
  "log": "Error during the execution of the plugin: saluti",
  "status": "Error"
}

2025-02-14 12:06:07,647 - DEBUG - Polling for notifications...
2025-02-14 12:06:07,684 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:07,686 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:07,705 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:07,706 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:12,731 - DEBUG - Polling for notifications...
2025-02-14 12:06:12,768 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:12,770 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:12,790 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:12,791 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:17,816 - DEBUG - Polling for notifications...
2025-02-14 12:06:17,853 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:17,855 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:17,874 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:17,875 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:22,900 - DEBUG - Polling for notifications...
2025-02-14 12:06:22,935 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:22,937 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:22,956 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:22,957 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:27,982 - DEBUG - Polling for notifications...
2025-02-14 12:06:28,019 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:28,020 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:28,039 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:28,040 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:33,066 - DEBUG - Polling for notifications...
2025-02-14 12:06:33,104 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:33,106 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:33,130 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:33,132 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:38,157 - DEBUG - Polling for notifications...
2025-02-14 12:06:38,193 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:38,195 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:38,214 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:38,214 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:43,221 - DEBUG - Polling for notifications...
2025-02-14 12:06:43,258 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:43,260 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:43,282 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:43,283 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:48,299 - DEBUG - Polling for notifications...
2025-02-14 12:06:48,340 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:48,342 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:48,361 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:48,362 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:53,388 - DEBUG - Polling for notifications...
2025-02-14 12:06:53,425 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:53,427 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:53,446 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:53,447 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:58,464 - DEBUG - Polling for notifications...
2025-02-14 12:06:58,499 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:58,501 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:58,520 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:58,521 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:07:03,546 - DEBUG - Polling for notifications...
2025-02-14 12:07:03,582 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:07:03,584 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:03,603 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:07:03,604 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:07:08,629 - DEBUG - Polling for notifications...
2025-02-14 12:07:08,665 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:07:08,667 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:08,686 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:07:08,687 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:07:13,703 - DEBUG - Polling for notifications...
2025-02-14 12:07:13,738 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:07:13,740 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:13,759 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:07:13,760 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:07:18,786 - DEBUG - Polling for notifications...
2025-02-14 12:07:18,822 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:07:18,823 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:18,842 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:07:18,843 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:07:23,868 - DEBUG - Polling for notifications...
2025-02-14 12:07:23,909 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:07:23,911 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:23,933 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:07:23,934 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:07:34,328 - INFO - Application started.
2025-02-14 12:07:34,328 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:07:34,329 - INFO - Attempting to log in user: test
2025-02-14 12:07:34,337 - DEBUG - Loading KWallet
2025-02-14 12:07:34,339 - DEBUG - Loading SecretService
2025-02-14 12:07:34,365 - DEBUG - Loading Windows
2025-02-14 12:07:34,367 - DEBUG - Loading chainer
2025-02-14 12:07:34,368 - DEBUG - Loading libsecret
2025-02-14 12:07:34,369 - DEBUG - Loading macOS
2025-02-14 12:07:34,500 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:07:34,504 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:34,514 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:07:34,524 - DEBUG - Received response
2025-02-14 12:07:34,581 - INFO - User test logged in successfully.
2025-02-14 12:07:34,582 - INFO - Starting polling for notifications.
2025-02-14 12:07:34,582 - DEBUG - Polling for notifications...
2025-02-14 12:07:34,618 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531254 with data: None
2025-02-14 12:07:34,620 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:34,640 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531254 HTTP/1.1" 200 22
2025-02-14 12:07:34,641 - DEBUG - Received response: {
  "update": -2734
}

2025-02-14 12:07:58,591 - INFO - Application started.
2025-02-14 12:07:58,591 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:07:58,591 - INFO - Attempting to log in user: test
2025-02-14 12:07:58,601 - DEBUG - Loading KWallet
2025-02-14 12:07:58,603 - DEBUG - Loading SecretService
2025-02-14 12:07:58,631 - DEBUG - Loading Windows
2025-02-14 12:07:58,632 - DEBUG - Loading chainer
2025-02-14 12:07:58,633 - DEBUG - Loading libsecret
2025-02-14 12:07:58,634 - DEBUG - Loading macOS
2025-02-14 12:07:58,768 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:07:58,771 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:58,781 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:07:58,792 - DEBUG - Received response
2025-02-14 12:07:58,835 - INFO - User test logged in successfully.
2025-02-14 12:07:58,836 - INFO - Starting polling for notifications.
2025-02-14 12:07:58,837 - DEBUG - Polling for notifications...
2025-02-14 12:07:58,874 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531279 with data: None
2025-02-14 12:07:58,876 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:58,896 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531279 HTTP/1.1" 200 22
2025-02-14 12:07:58,897 - DEBUG - Received response: {
  "update": -2759
}

2025-02-14 12:07:59,346 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:07:59,348 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:59,369 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:07:59,370 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:08:01,753 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:08:01,755 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:01,776 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:08:01,777 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:08:01,816 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:08:01,818 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:01,839 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:08:01,840 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:08:03,903 - DEBUG - Polling for notifications...
2025-02-14 12:08:03,937 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531279 with data: None
2025-02-14 12:08:03,938 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:03,957 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531279 HTTP/1.1" 200 22
2025-02-14 12:08:03,958 - DEBUG - Received response: {
  "update": -2759
}

2025-02-14 12:08:06,850 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-14 12:08:06,853 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:06,900 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 122
2025-02-14 12:08:06,901 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:08:06",
  "log": "Error during the execution of the plugin: saluti",
  "status": "Error"
}

2025-02-14 12:08:08,963 - DEBUG - Polling for notifications...
2025-02-14 12:08:09,000 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531279 with data: None
2025-02-14 12:08:09,001 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:09,020 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531279 HTTP/1.1" 200 22
2025-02-14 12:08:09,021 - DEBUG - Received response: {
  "update": -2759
}

2025-02-14 12:08:10,249 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:08:10,251 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:10,272 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:08:10,273 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:08:10,309 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:08:10,311 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:10,332 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:08:10,333 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:09:13,503 - INFO - Application started.
2025-02-14 12:09:13,504 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:09:13,504 - INFO - Attempting to log in user: test
2025-02-14 12:09:13,514 - DEBUG - Loading KWallet
2025-02-14 12:09:13,515 - DEBUG - Loading SecretService
2025-02-14 12:09:13,541 - DEBUG - Loading Windows
2025-02-14 12:09:13,543 - DEBUG - Loading chainer
2025-02-14 12:09:13,543 - DEBUG - Loading libsecret
2025-02-14 12:09:13,544 - DEBUG - Loading macOS
2025-02-14 12:09:13,674 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:09:13,678 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:13,688 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:09:13,698 - DEBUG - Received response
2025-02-14 12:09:13,747 - INFO - User test logged in successfully.
2025-02-14 12:09:13,748 - INFO - Starting polling for notifications.
2025-02-14 12:09:13,749 - DEBUG - Polling for notifications...
2025-02-14 12:09:13,787 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531354 with data: None
2025-02-14 12:09:13,789 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:13,810 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531354 HTTP/1.1" 200 22
2025-02-14 12:09:13,811 - DEBUG - Received response: {
  "update": -2834
}

2025-02-14 12:09:14,239 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:09:14,241 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:14,262 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:09:14,263 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:09:15,102 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:09:15,104 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:15,124 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:09:15,125 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:09:17,529 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 12:09:17,531 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:17,578 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 125
2025-02-14 12:09:17,579 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:09:17",
  "log": "Error during the execution of the plugin: newPlugin",
  "status": "Error"
}

2025-02-14 12:09:18,817 - DEBUG - Polling for notifications...
2025-02-14 12:09:18,854 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531354 with data: None
2025-02-14 12:09:18,856 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:18,875 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531354 HTTP/1.1" 200 22
2025-02-14 12:09:18,876 - DEBUG - Received response: {
  "update": -2834
}

2025-02-14 12:09:23,187 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:09:23,189 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:23,210 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:09:23,211 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:09:23,879 - DEBUG - Polling for notifications...
2025-02-14 12:09:23,916 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531354 with data: None
2025-02-14 12:09:23,918 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:23,937 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531354 HTTP/1.1" 200 22
2025-02-14 12:09:23,938 - DEBUG - Received response: {
  "update": -2834
}

2025-02-14 12:09:24,605 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-14 12:09:24,607 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:24,633 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 122
2025-02-14 12:09:24,673 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:09:24",
  "log": "Error during the execution of the plugin: saluti",
  "status": "Error"
}

2025-02-14 12:09:59,747 - INFO - Application started.
2025-02-14 12:09:59,747 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:09:59,748 - INFO - Attempting to log in user: test
2025-02-14 12:09:59,758 - DEBUG - Loading KWallet
2025-02-14 12:09:59,759 - DEBUG - Loading SecretService
2025-02-14 12:09:59,786 - DEBUG - Loading Windows
2025-02-14 12:09:59,788 - DEBUG - Loading chainer
2025-02-14 12:09:59,788 - DEBUG - Loading libsecret
2025-02-14 12:09:59,790 - DEBUG - Loading macOS
2025-02-14 12:09:59,922 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:09:59,926 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:59,936 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:09:59,946 - DEBUG - Received response
2025-02-14 12:10:00,000 - INFO - User test logged in successfully.
2025-02-14 12:10:00,000 - INFO - Starting polling for notifications.
2025-02-14 12:10:00,001 - DEBUG - Polling for notifications...
2025-02-14 12:10:00,038 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531400 with data: None
2025-02-14 12:10:00,040 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:00,061 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531400 HTTP/1.1" 200 22
2025-02-14 12:10:00,062 - DEBUG - Received response: {
  "update": -2880
}

2025-02-14 12:10:00,490 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:10:00,492 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:00,515 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:10:00,515 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:10:02,225 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:10:02,227 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:02,248 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:10:02,248 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:10:04,716 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 12:10:04,718 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:04,765 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-14 12:10:04,766 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:10:04",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-14 12:10:05,067 - DEBUG - Polling for notifications...
2025-02-14 12:10:05,104 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531401 with data: None
2025-02-14 12:10:05,106 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:05,127 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531401 HTTP/1.1" 200 22
2025-02-14 12:10:05,127 - DEBUG - Received response: {
  "update": -2881
}

2025-02-14 12:10:06,544 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:10:06,546 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:06,567 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:10:06,568 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:10:07,539 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:10:07,541 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:07,561 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:10:07,562 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:11:06,211 - INFO - Application started.
2025-02-14 12:11:06,211 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:11:06,211 - INFO - Attempting to log in user: test
2025-02-14 12:11:06,221 - DEBUG - Loading KWallet
2025-02-14 12:11:06,223 - DEBUG - Loading SecretService
2025-02-14 12:11:06,249 - DEBUG - Loading Windows
2025-02-14 12:11:06,251 - DEBUG - Loading chainer
2025-02-14 12:11:06,252 - DEBUG - Loading libsecret
2025-02-14 12:11:06,253 - DEBUG - Loading macOS
2025-02-14 12:11:06,387 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:11:06,391 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:06,401 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:11:06,411 - DEBUG - Received response
2025-02-14 12:11:06,457 - INFO - User test logged in successfully.
2025-02-14 12:11:06,457 - INFO - Starting polling for notifications.
2025-02-14 12:11:06,458 - DEBUG - Polling for notifications...
2025-02-14 12:11:06,494 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531466 with data: None
2025-02-14 12:11:06,497 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:06,518 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531466 HTTP/1.1" 200 22
2025-02-14 12:11:06,519 - DEBUG - Received response: {
  "update": -2946
}

2025-02-14 12:11:06,917 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:11:06,919 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:06,940 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:11:06,941 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:11:08,571 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:11:08,573 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:08,594 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:11:08,595 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:11:09,557 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:11:09,559 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:09,579 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:11:09,580 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:11:11,525 - DEBUG - Polling for notifications...
2025-02-14 12:11:11,560 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531467 with data: None
2025-02-14 12:11:11,561 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:11,581 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531467 HTTP/1.1" 200 22
2025-02-14 12:11:11,582 - DEBUG - Received response: {
  "update": -2947
}

2025-02-14 12:11:39,749 - INFO - Application started.
2025-02-14 12:11:39,750 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:11:39,750 - INFO - Attempting to log in user: test
2025-02-14 12:11:39,759 - DEBUG - Loading KWallet
2025-02-14 12:11:39,760 - DEBUG - Loading SecretService
2025-02-14 12:11:39,787 - DEBUG - Loading Windows
2025-02-14 12:11:39,789 - DEBUG - Loading chainer
2025-02-14 12:11:39,790 - DEBUG - Loading libsecret
2025-02-14 12:11:39,790 - DEBUG - Loading macOS
2025-02-14 12:11:39,922 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:11:39,926 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:39,936 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:11:39,947 - DEBUG - Received response
2025-02-14 12:11:40,002 - INFO - User test logged in successfully.
2025-02-14 12:11:40,002 - INFO - Starting polling for notifications.
2025-02-14 12:11:40,003 - DEBUG - Polling for notifications...
2025-02-14 12:11:40,039 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531500 with data: None
2025-02-14 12:11:40,041 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:40,061 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531500 HTTP/1.1" 200 22
2025-02-14 12:11:40,062 - DEBUG - Received response: {
  "update": -2980
}

2025-02-14 12:11:40,502 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:11:40,503 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:40,524 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:11:40,525 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:11:59,142 - INFO - Application started.
2025-02-14 12:11:59,142 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:11:59,143 - INFO - Attempting to log in user: test
2025-02-14 12:11:59,152 - DEBUG - Loading KWallet
2025-02-14 12:11:59,153 - DEBUG - Loading SecretService
2025-02-14 12:11:59,183 - DEBUG - Loading Windows
2025-02-14 12:11:59,184 - DEBUG - Loading chainer
2025-02-14 12:11:59,185 - DEBUG - Loading libsecret
2025-02-14 12:11:59,186 - DEBUG - Loading macOS
2025-02-14 12:11:59,323 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:11:59,328 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:59,349 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:11:59,350 - DEBUG - Received response
2025-02-14 12:11:59,402 - INFO - User test logged in successfully.
2025-02-14 12:11:59,403 - INFO - Starting polling for notifications.
2025-02-14 12:11:59,403 - DEBUG - Polling for notifications...
2025-02-14 12:11:59,441 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531519 with data: None
2025-02-14 12:11:59,443 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:59,464 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531519 HTTP/1.1" 200 22
2025-02-14 12:11:59,465 - DEBUG - Received response: {
  "update": -2999
}

2025-02-14 12:11:59,889 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:11:59,891 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:59,911 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:11:59,912 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:12:48,973 - INFO - Application started.
2025-02-14 12:12:48,973 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:12:48,974 - INFO - Attempting to log in user: test
2025-02-14 12:12:48,983 - DEBUG - Loading KWallet
2025-02-14 12:12:48,985 - DEBUG - Loading SecretService
2025-02-14 12:12:49,011 - DEBUG - Loading Windows
2025-02-14 12:12:49,013 - DEBUG - Loading chainer
2025-02-14 12:12:49,013 - DEBUG - Loading libsecret
2025-02-14 12:12:49,014 - DEBUG - Loading macOS
2025-02-14 12:12:49,150 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:12:49,154 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:49,165 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:12:49,175 - DEBUG - Received response
2025-02-14 12:12:49,238 - INFO - User test logged in successfully.
2025-02-14 12:12:49,238 - INFO - Starting polling for notifications.
2025-02-14 12:12:49,239 - DEBUG - Polling for notifications...
2025-02-14 12:12:49,276 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531569 with data: None
2025-02-14 12:12:49,278 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:49,298 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531569 HTTP/1.1" 200 22
2025-02-14 12:12:49,299 - DEBUG - Received response: {
  "update": -3049
}

2025-02-14 12:12:49,754 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:12:49,756 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:49,777 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:12:49,778 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:12:50,852 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:12:50,854 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:50,874 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:12:50,875 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:12:53,062 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:12:53,064 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:53,086 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:12:53,087 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:12:54,305 - DEBUG - Polling for notifications...
2025-02-14 12:12:54,343 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531570 with data: None
2025-02-14 12:12:54,345 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:54,365 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531570 HTTP/1.1" 200 22
2025-02-14 12:12:54,366 - DEBUG - Received response: {
  "update": -3050
}

2025-02-14 12:12:59,372 - DEBUG - Polling for notifications...
2025-02-14 12:12:59,408 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531570 with data: None
2025-02-14 12:12:59,410 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:59,429 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531570 HTTP/1.1" 200 22
2025-02-14 12:12:59,430 - DEBUG - Received response: {
  "update": -3050
}

2025-02-14 12:14:54,588 - INFO - Application started.
2025-02-14 12:14:54,588 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:14:54,588 - INFO - Attempting to log in user: test
2025-02-14 12:14:54,599 - DEBUG - Loading KWallet
2025-02-14 12:14:54,601 - DEBUG - Loading SecretService
2025-02-14 12:14:54,630 - DEBUG - Loading Windows
2025-02-14 12:14:54,632 - DEBUG - Loading chainer
2025-02-14 12:14:54,633 - DEBUG - Loading libsecret
2025-02-14 12:14:54,634 - DEBUG - Loading macOS
2025-02-14 12:14:54,771 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:14:54,775 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:14:54,786 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:14:54,796 - DEBUG - Received response
2025-02-14 12:14:54,850 - INFO - User test logged in successfully.
2025-02-14 12:14:54,851 - INFO - Starting polling for notifications.
2025-02-14 12:14:54,851 - DEBUG - Polling for notifications...
2025-02-14 12:14:54,887 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531695 with data: None
2025-02-14 12:14:54,889 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:14:54,909 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531695 HTTP/1.1" 200 22
2025-02-14 12:14:54,911 - DEBUG - Received response: {
  "update": -3175
}

2025-02-14 12:14:55,330 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:14:55,331 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:14:55,352 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:14:55,353 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:14:56,648 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:14:56,650 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:14:56,670 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:14:56,671 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:14:59,914 - DEBUG - Polling for notifications...
2025-02-14 12:14:59,952 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531695 with data: None
2025-02-14 12:14:59,954 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:14:59,973 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531695 HTTP/1.1" 200 22
2025-02-14 12:14:59,974 - DEBUG - Received response: {
  "update": -3175
}

2025-02-14 12:15:04,979 - DEBUG - Polling for notifications...
2025-02-14 12:15:05,017 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531695 with data: None
2025-02-14 12:15:05,019 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:15:05,038 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531695 HTTP/1.1" 200 22
2025-02-14 12:15:05,039 - DEBUG - Received response: {
  "update": -3175
}

2025-02-14 12:15:10,045 - DEBUG - Polling for notifications...
2025-02-14 12:15:10,081 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531695 with data: None
2025-02-14 12:15:10,083 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:15:10,103 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531695 HTTP/1.1" 200 22
2025-02-14 12:15:10,104 - DEBUG - Received response: {
  "update": -3175
}

2025-02-14 12:15:15,109 - DEBUG - Polling for notifications...
2025-02-14 12:15:15,146 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531695 with data: None
2025-02-14 12:15:15,148 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:15:15,168 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531695 HTTP/1.1" 200 22
2025-02-14 12:15:15,169 - DEBUG - Received response: {
  "update": -3175
}

2025-02-14 12:17:10,758 - INFO - Application started.
2025-02-14 12:17:10,758 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:17:10,758 - INFO - Attempting to log in user: test
2025-02-14 12:17:10,768 - DEBUG - Loading KWallet
2025-02-14 12:17:10,769 - DEBUG - Loading SecretService
2025-02-14 12:17:10,798 - DEBUG - Loading Windows
2025-02-14 12:17:10,800 - DEBUG - Loading chainer
2025-02-14 12:17:10,801 - DEBUG - Loading libsecret
2025-02-14 12:17:10,802 - DEBUG - Loading macOS
2025-02-14 12:17:10,934 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:17:10,938 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:17:10,948 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:17:10,958 - DEBUG - Received response
2025-02-14 12:17:11,003 - INFO - User test logged in successfully.
2025-02-14 12:17:11,003 - INFO - Starting polling for notifications.
2025-02-14 12:17:11,004 - DEBUG - Polling for notifications...
2025-02-14 12:17:11,041 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531831 with data: None
2025-02-14 12:17:11,044 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:17:11,064 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531831 HTTP/1.1" 200 22
2025-02-14 12:17:11,065 - DEBUG - Received response: {
  "update": -3311
}

2025-02-14 12:18:47,255 - INFO - Application started.
2025-02-14 12:18:47,255 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:18:47,256 - INFO - Attempting to log in user: test
2025-02-14 12:18:47,265 - DEBUG - Loading KWallet
2025-02-14 12:18:47,267 - DEBUG - Loading SecretService
2025-02-14 12:18:47,294 - DEBUG - Loading Windows
2025-02-14 12:18:47,296 - DEBUG - Loading chainer
2025-02-14 12:18:47,296 - DEBUG - Loading libsecret
2025-02-14 12:18:47,298 - DEBUG - Loading macOS
2025-02-14 12:18:47,434 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:18:47,439 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:47,448 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:18:47,458 - DEBUG - Received response
2025-02-14 12:18:47,502 - INFO - User test logged in successfully.
2025-02-14 12:18:47,502 - INFO - Starting polling for notifications.
2025-02-14 12:18:47,503 - DEBUG - Polling for notifications...
2025-02-14 12:18:47,541 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531927 with data: None
2025-02-14 12:18:47,543 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:47,563 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531927 HTTP/1.1" 200 22
2025-02-14 12:18:47,564 - DEBUG - Received response: {
  "update": -3407
}

2025-02-14 12:18:48,006 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:18:48,007 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:48,028 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:18:48,029 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:18:49,286 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:18:49,288 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:49,309 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:18:49,310 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:18:51,507 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 12:18:51,509 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:51,535 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-14 12:18:51,575 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:18:51",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-14 12:18:52,569 - DEBUG - Polling for notifications...
2025-02-14 12:18:52,607 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:18:52,609 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:52,628 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:18:52,629 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:18:57,634 - DEBUG - Polling for notifications...
2025-02-14 12:18:57,670 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:18:57,672 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:57,691 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:18:57,692 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:02,696 - DEBUG - Polling for notifications...
2025-02-14 12:19:02,735 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:02,737 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:02,757 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:02,758 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:07,776 - DEBUG - Polling for notifications...
2025-02-14 12:19:07,812 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:07,814 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:07,833 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:07,833 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:12,859 - DEBUG - Polling for notifications...
2025-02-14 12:19:12,898 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:12,900 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:12,919 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:12,920 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:17,928 - DEBUG - Polling for notifications...
2025-02-14 12:19:17,966 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:17,968 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:17,988 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:17,989 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:23,011 - DEBUG - Polling for notifications...
2025-02-14 12:19:23,048 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:23,050 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:23,069 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:23,070 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:28,095 - DEBUG - Polling for notifications...
2025-02-14 12:19:28,133 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:28,135 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:28,154 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:28,155 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:33,180 - DEBUG - Polling for notifications...
2025-02-14 12:19:33,218 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:33,220 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:33,239 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:33,240 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:38,265 - DEBUG - Polling for notifications...
2025-02-14 12:19:38,304 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:38,305 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:38,324 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:38,325 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:50,386 - INFO - Application started.
2025-02-14 12:19:50,386 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:19:50,386 - INFO - Attempting to log in user: test
2025-02-14 12:19:50,399 - DEBUG - Loading KWallet
2025-02-14 12:19:50,400 - DEBUG - Loading SecretService
2025-02-14 12:19:50,428 - DEBUG - Loading Windows
2025-02-14 12:19:50,430 - DEBUG - Loading chainer
2025-02-14 12:19:50,431 - DEBUG - Loading libsecret
2025-02-14 12:19:50,432 - DEBUG - Loading macOS
2025-02-14 12:19:50,573 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:19:50,577 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:50,587 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:19:50,597 - DEBUG - Received response
2025-02-14 12:19:50,645 - INFO - User test logged in successfully.
2025-02-14 12:19:50,645 - INFO - Starting polling for notifications.
2025-02-14 12:19:50,646 - DEBUG - Polling for notifications...
2025-02-14 12:19:50,684 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531990 with data: None
2025-02-14 12:19:50,686 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:50,707 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531990 HTTP/1.1" 200 22
2025-02-14 12:19:50,708 - DEBUG - Received response: {
  "update": -3470
}

2025-02-14 12:19:51,139 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:19:51,141 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:51,162 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:19:51,163 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:19:52,137 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:19:52,139 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:52,160 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:19:52,161 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:19:55,713 - DEBUG - Polling for notifications...
2025-02-14 12:19:55,750 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531991 with data: None
2025-02-14 12:19:55,752 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:55,771 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531991 HTTP/1.1" 200 22
2025-02-14 12:19:55,772 - DEBUG - Received response: {
  "update": -3471
}

2025-02-14 12:20:00,778 - DEBUG - Polling for notifications...
2025-02-14 12:20:00,815 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531991 with data: None
2025-02-14 12:20:00,817 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:20:00,836 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531991 HTTP/1.1" 200 22
2025-02-14 12:20:00,837 - DEBUG - Received response: {
  "update": -3471
}

2025-02-14 12:20:05,842 - DEBUG - Polling for notifications...
2025-02-14 12:20:05,879 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531991 with data: None
2025-02-14 12:20:05,881 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:20:05,900 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531991 HTTP/1.1" 200 22
2025-02-14 12:20:05,901 - DEBUG - Received response: {
  "update": -3471
}

2025-02-14 12:20:10,906 - DEBUG - Polling for notifications...
2025-02-14 12:20:10,945 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531991 with data: None
2025-02-14 12:20:10,947 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:20:10,965 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531991 HTTP/1.1" 200 22
2025-02-14 12:20:10,966 - DEBUG - Received response: {
  "update": -3471
}

2025-02-14 12:20:15,992 - DEBUG - Polling for notifications...
2025-02-14 12:20:16,029 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531991 with data: None
2025-02-14 12:20:16,031 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:20:16,050 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531991 HTTP/1.1" 200 22
2025-02-14 12:20:16,051 - DEBUG - Received response: {
  "update": -3471
}

2025-02-14 12:23:15,556 - INFO - Application started.
2025-02-14 12:23:15,556 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:23:15,557 - INFO - Attempting to log in user: test
2025-02-14 12:23:15,568 - DEBUG - Loading KWallet
2025-02-14 12:23:15,569 - DEBUG - Loading SecretService
2025-02-14 12:23:15,597 - DEBUG - Loading Windows
2025-02-14 12:23:15,599 - DEBUG - Loading chainer
2025-02-14 12:23:15,599 - DEBUG - Loading libsecret
2025-02-14 12:23:15,600 - DEBUG - Loading macOS
2025-02-14 12:23:15,731 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:23:15,735 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:15,744 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:23:15,755 - DEBUG - Received response
2025-02-14 12:23:15,809 - INFO - User test logged in successfully.
2025-02-14 12:23:15,810 - INFO - Starting polling for notifications.
2025-02-14 12:23:15,811 - DEBUG - Polling for notifications...
2025-02-14 12:23:15,847 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:15,849 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:15,871 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:15,872 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:16,313 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:23:16,315 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:16,336 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:23:16,336 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:23:17,472 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:23:17,474 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:17,494 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:23:17,495 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:23:20,877 - DEBUG - Polling for notifications...
2025-02-14 12:23:20,915 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:20,917 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:20,936 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:20,937 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:25,942 - DEBUG - Polling for notifications...
2025-02-14 12:23:25,977 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:25,978 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:25,998 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:25,999 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:31,005 - DEBUG - Polling for notifications...
2025-02-14 12:23:31,042 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:31,044 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:31,063 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:31,064 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:36,069 - DEBUG - Polling for notifications...
2025-02-14 12:23:36,106 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:36,108 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:36,127 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:36,128 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:41,133 - DEBUG - Polling for notifications...
2025-02-14 12:23:41,172 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:41,174 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:41,193 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:41,194 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:46,198 - DEBUG - Polling for notifications...
2025-02-14 12:23:46,235 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:46,237 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:46,257 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:46,257 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:51,263 - DEBUG - Polling for notifications...
2025-02-14 12:23:51,301 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:51,303 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:51,322 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:51,323 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:56,328 - DEBUG - Polling for notifications...
2025-02-14 12:23:56,366 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:56,368 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:56,387 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:56,388 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:24:01,393 - DEBUG - Polling for notifications...
2025-02-14 12:24:01,430 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:24:01,432 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:24:01,451 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:24:01,452 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:49:43,546 - INFO - Application started.
2025-02-14 12:49:43,546 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:49:43,547 - INFO - Attempting to log in user: test
2025-02-14 12:49:43,561 - DEBUG - Loading KWallet
2025-02-14 12:49:43,562 - DEBUG - Loading SecretService
2025-02-14 12:49:43,592 - DEBUG - Loading Windows
2025-02-14 12:49:43,593 - DEBUG - Loading chainer
2025-02-14 12:49:43,594 - DEBUG - Loading libsecret
2025-02-14 12:49:43,595 - DEBUG - Loading macOS
2025-02-14 12:49:43,730 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:49:43,733 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:49:43,745 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:49:43,756 - DEBUG - Received response
2025-02-14 12:49:43,810 - INFO - User test logged in successfully.
2025-02-14 12:49:43,810 - INFO - Starting polling for notifications.
2025-02-14 12:49:43,811 - DEBUG - Polling for notifications...
2025-02-14 12:49:43,848 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739533784 with data: None
2025-02-14 12:49:43,850 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:49:43,872 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739533784 HTTP/1.1" 200 20
2025-02-14 12:49:43,873 - DEBUG - Received response: {
  "update": -15
}

2025-02-14 12:49:44,376 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:49:44,378 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:49:44,405 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:49:44,406 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:49:46,066 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:49:46,068 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:49:46,092 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:49:46,092 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:49:47,510 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 12:49:47,511 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:49:47,541 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-14 12:49:47,581 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:49:47",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-14 12:49:48,879 - DEBUG - Polling for notifications...
2025-02-14 12:49:48,917 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739533784 with data: None
2025-02-14 12:49:48,919 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:49:48,938 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739533784 HTTP/1.1" 200 20
2025-02-14 12:49:48,939 - DEBUG - Received response: {
  "update": -15
}

2025-02-15 10:07:03,969 - INFO - Application started.
2025-02-15 10:07:03,969 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:07:03,970 - INFO - Attempting to log in user: test
2025-02-15 10:07:03,978 - DEBUG - Loading KWallet
2025-02-15 10:07:03,979 - DEBUG - Loading SecretService
2025-02-15 10:07:04,005 - DEBUG - Loading Windows
2025-02-15 10:07:04,006 - DEBUG - Loading chainer
2025-02-15 10:07:04,007 - DEBUG - Loading libsecret
2025-02-15 10:07:04,007 - DEBUG - Loading macOS
2025-02-15 10:07:04,139 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:07:04,143 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:07:04,157 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:07:04,167 - DEBUG - Received response
2025-02-15 10:07:04,215 - INFO - User test logged in successfully.
2025-02-15 10:07:04,216 - INFO - Starting polling for notifications.
2025-02-15 10:07:04,216 - DEBUG - Polling for notifications...
2025-02-15 10:07:04,253 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739610424 with data: None
2025-02-15 10:07:04,255 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:07:04,276 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739610424 HTTP/1.1" 200 19
2025-02-15 10:07:04,277 - DEBUG - Received response: {
  "update": -3
}

2025-02-15 10:07:04,768 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:07:04,770 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:07:04,798 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:07:04,798 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:07:06,914 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 10:07:06,916 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:07:06,940 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 10:07:06,941 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:07:08,696 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 10:07:08,698 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:07:08,724 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-15 10:07:08,765 - DEBUG - Received response: {
  "datetime": "2025-02-15 10:07:08",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-15 10:07:09,282 - DEBUG - Polling for notifications...
2025-02-15 10:07:09,320 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739610425 with data: None
2025-02-15 10:07:09,321 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:07:09,340 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739610425 HTTP/1.1" 200 19
2025-02-15 10:07:09,341 - DEBUG - Received response: {
  "update": -4
}

2025-02-15 10:15:26,507 - INFO - Application started.
2025-02-15 10:15:26,507 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:15:26,507 - INFO - Attempting to log in user: test
2025-02-15 10:15:26,516 - DEBUG - Loading KWallet
2025-02-15 10:15:26,517 - DEBUG - Loading SecretService
2025-02-15 10:15:26,542 - DEBUG - Loading Windows
2025-02-15 10:15:26,544 - DEBUG - Loading chainer
2025-02-15 10:15:26,545 - DEBUG - Loading libsecret
2025-02-15 10:15:26,546 - DEBUG - Loading macOS
2025-02-15 10:15:26,681 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:15:26,686 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:15:26,703 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:15:26,713 - DEBUG - Received response
2025-02-15 10:15:26,772 - INFO - User test logged in successfully.
2025-02-15 10:15:26,773 - INFO - Starting polling for notifications.
2025-02-15 10:15:26,773 - DEBUG - Polling for notifications...
2025-02-15 10:15:26,812 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739610927 with data: None
2025-02-15 10:15:26,815 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:15:26,836 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739610927 HTTP/1.1" 200 20
2025-02-15 10:15:26,838 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:15:27,316 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:15:27,318 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:15:27,344 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:15:27,345 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:15:29,200 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-15 10:15:29,202 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:15:29,225 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-15 10:15:29,226 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:15:31,224 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-15 10:15:31,226 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:15:31,255 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 122
2025-02-15 10:15:31,296 - DEBUG - Received response: {
  "datetime": "2025-02-15 10:15:31",
  "log": "Error during the execution of the plugin: saluti",
  "status": "Error"
}

2025-02-15 10:15:31,843 - DEBUG - Polling for notifications...
2025-02-15 10:15:31,879 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739610927 with data: None
2025-02-15 10:15:31,881 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:15:31,900 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739610927 HTTP/1.1" 200 20
2025-02-15 10:15:31,901 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:28:01,095 - INFO - Application started.
2025-02-15 10:28:01,095 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:28:01,095 - INFO - Attempting to log in user: test
2025-02-15 10:28:01,105 - DEBUG - Loading KWallet
2025-02-15 10:28:01,107 - DEBUG - Loading SecretService
2025-02-15 10:28:01,135 - DEBUG - Loading Windows
2025-02-15 10:28:01,137 - DEBUG - Loading chainer
2025-02-15 10:28:01,137 - DEBUG - Loading libsecret
2025-02-15 10:28:01,138 - DEBUG - Loading macOS
2025-02-15 10:28:01,276 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:28:01,279 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:28:01,291 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:28:01,302 - DEBUG - Received response
2025-02-15 10:28:01,356 - INFO - User test logged in successfully.
2025-02-15 10:28:01,357 - INFO - Starting polling for notifications.
2025-02-15 10:28:01,357 - DEBUG - Polling for notifications...
2025-02-15 10:28:01,395 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739611681 with data: None
2025-02-15 10:28:01,397 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:28:01,418 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739611681 HTTP/1.1" 200 20
2025-02-15 10:28:01,419 - DEBUG - Received response: {
  "update": -13
}

2025-02-15 10:28:01,837 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:28:01,838 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:28:01,865 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:28:01,865 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:29:47,775 - INFO - Application started.
2025-02-15 10:29:47,775 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:29:47,776 - INFO - Attempting to log in user: test
2025-02-15 10:29:47,785 - DEBUG - Loading KWallet
2025-02-15 10:29:47,786 - DEBUG - Loading SecretService
2025-02-15 10:29:47,812 - DEBUG - Loading Windows
2025-02-15 10:29:47,813 - DEBUG - Loading chainer
2025-02-15 10:29:47,814 - DEBUG - Loading libsecret
2025-02-15 10:29:47,815 - DEBUG - Loading macOS
2025-02-15 10:29:47,946 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:29:47,950 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:47,963 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:29:47,974 - DEBUG - Received response
2025-02-15 10:29:48,029 - INFO - User test logged in successfully.
2025-02-15 10:29:48,030 - INFO - Starting polling for notifications.
2025-02-15 10:29:48,030 - DEBUG - Polling for notifications...
2025-02-15 10:29:48,066 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739611788 with data: None
2025-02-15 10:29:48,068 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:48,089 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739611788 HTTP/1.1" 200 19
2025-02-15 10:29:48,090 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 10:29:48,506 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:29:48,508 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:48,534 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:29:48,535 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:29:49,845 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 10:29:49,847 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:49,870 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 10:29:49,871 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:29:51,553 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 10:29:51,555 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:51,602 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-15 10:29:51,602 - DEBUG - Received response: {
  "datetime": "2025-02-15 10:29:51",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-15 10:29:53,096 - DEBUG - Polling for notifications...
2025-02-15 10:29:53,132 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739611789 with data: None
2025-02-15 10:29:53,134 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:53,153 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739611789 HTTP/1.1" 200 19
2025-02-15 10:29:53,154 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 10:29:58,160 - DEBUG - Polling for notifications...
2025-02-15 10:29:58,196 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739611789 with data: None
2025-02-15 10:29:58,197 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:58,216 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739611789 HTTP/1.1" 200 19
2025-02-15 10:29:58,217 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 10:30:03,223 - DEBUG - Polling for notifications...
2025-02-15 10:30:03,260 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739611789 with data: None
2025-02-15 10:30:03,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:30:03,282 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739611789 HTTP/1.1" 200 19
2025-02-15 10:30:03,283 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 10:36:35,965 - INFO - Application started.
2025-02-15 10:36:35,966 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:36:35,966 - INFO - Attempting to log in user: test
2025-02-15 10:36:35,976 - DEBUG - Loading KWallet
2025-02-15 10:36:35,978 - DEBUG - Loading SecretService
2025-02-15 10:36:36,005 - DEBUG - Loading Windows
2025-02-15 10:36:36,007 - DEBUG - Loading chainer
2025-02-15 10:36:36,007 - DEBUG - Loading libsecret
2025-02-15 10:36:36,009 - DEBUG - Loading macOS
2025-02-15 10:36:36,145 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:36:36,149 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:36,161 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:36:36,171 - DEBUG - Received response
2025-02-15 10:36:36,224 - INFO - User test logged in successfully.
2025-02-15 10:36:36,224 - INFO - Starting polling for notifications.
2025-02-15 10:36:36,225 - DEBUG - Polling for notifications...
2025-02-15 10:36:36,260 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612196 with data: None
2025-02-15 10:36:36,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:36,285 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612196 HTTP/1.1" 200 19
2025-02-15 10:36:36,286 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 10:36:36,715 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:36:36,717 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:36,743 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:36:36,744 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:36:38,194 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 10:36:38,196 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:38,219 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 10:36:38,221 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:36:40,321 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 10:36:40,322 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:40,342 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17141
2025-02-15 10:36:40,383 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "bvCUuOXVw13FgQredGMt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124492919980880">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124492918547040">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124492918547152">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124492918547264">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124492918547376">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124492918547488">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124492918547600">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124492918553760">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>name, extension = plugin.name.split(&#39;.&#39;)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(name,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-124492918607200">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:36:40,383 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "bvCUuOXVw13FgQredGMt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124492919980880">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124492918547040">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124492918547152">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124492918547264">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124492918547376">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124492918547488">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124492918547600">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124492918553760">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>name, extension = plugin.name.split(&#39;.&#39;)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(name,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-124492918607200">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:36:41,291 - DEBUG - Polling for notifications...
2025-02-15 10:36:41,328 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612197 with data: None
2025-02-15 10:36:41,330 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:41,350 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612197 HTTP/1.1" 200 20
2025-02-15 10:36:41,351 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:36:46,357 - DEBUG - Polling for notifications...
2025-02-15 10:36:46,393 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612197 with data: None
2025-02-15 10:36:46,395 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:46,414 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612197 HTTP/1.1" 200 20
2025-02-15 10:36:46,415 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:38:40,989 - INFO - Application started.
2025-02-15 10:38:40,990 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:38:40,990 - INFO - Attempting to log in user: test
2025-02-15 10:38:40,999 - DEBUG - Loading KWallet
2025-02-15 10:38:41,001 - DEBUG - Loading SecretService
2025-02-15 10:38:41,028 - DEBUG - Loading Windows
2025-02-15 10:38:41,029 - DEBUG - Loading chainer
2025-02-15 10:38:41,030 - DEBUG - Loading libsecret
2025-02-15 10:38:41,031 - DEBUG - Loading macOS
2025-02-15 10:38:41,167 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:38:41,171 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:38:41,195 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:38:41,196 - DEBUG - Received response
2025-02-15 10:38:41,242 - INFO - User test logged in successfully.
2025-02-15 10:38:41,243 - INFO - Starting polling for notifications.
2025-02-15 10:38:41,244 - DEBUG - Polling for notifications...
2025-02-15 10:38:41,283 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612321 with data: None
2025-02-15 10:38:41,285 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:38:41,306 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612321 HTTP/1.1" 200 20
2025-02-15 10:38:41,308 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:38:41,735 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:38:41,736 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:38:41,762 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:38:41,763 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:38:42,775 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 10:38:42,776 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:38:42,800 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 10:38:42,801 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:38:44,304 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 10:38:44,306 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:38:44,354 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17141
2025-02-15 10:38:44,354 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "gok5dvKhTwMB57PaNd6L";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-130656895321360">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-130656885056208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-130656885056320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-130656885056432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-130656885056544">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-130656885056656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-130656885056768">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-130656885062928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>name, extension = plugin.name.split(&#39;.&#39;)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(name,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-130656885116368">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:38:44,355 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "gok5dvKhTwMB57PaNd6L";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-130656895321360">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-130656885056208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-130656885056320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-130656885056432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-130656885056544">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-130656885056656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-130656885056768">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-130656885062928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>name, extension = plugin.name.split(&#39;.&#39;)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(name,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-130656885116368">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:38:46,314 - DEBUG - Polling for notifications...
2025-02-15 10:38:46,350 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612322 with data: None
2025-02-15 10:38:46,352 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:38:46,371 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612322 HTTP/1.1" 200 20
2025-02-15 10:38:46,372 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 10:43:42,211 - INFO - Application started.
2025-02-15 10:43:42,212 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:43:42,212 - INFO - Attempting to log in user: test
2025-02-15 10:43:42,221 - DEBUG - Loading KWallet
2025-02-15 10:43:42,222 - DEBUG - Loading SecretService
2025-02-15 10:43:42,248 - DEBUG - Loading Windows
2025-02-15 10:43:42,249 - DEBUG - Loading chainer
2025-02-15 10:43:42,250 - DEBUG - Loading libsecret
2025-02-15 10:43:42,250 - DEBUG - Loading macOS
2025-02-15 10:43:42,386 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:43:42,390 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:43:42,403 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:43:42,413 - DEBUG - Received response
2025-02-15 10:43:42,461 - INFO - User test logged in successfully.
2025-02-15 10:43:42,461 - INFO - Starting polling for notifications.
2025-02-15 10:43:42,462 - DEBUG - Polling for notifications...
2025-02-15 10:43:42,498 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612622 with data: None
2025-02-15 10:43:42,500 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:43:42,521 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612622 HTTP/1.1" 200 20
2025-02-15 10:43:42,522 - DEBUG - Received response: {
  "update": -17
}

2025-02-15 10:43:42,946 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:43:42,948 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:43:42,974 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:43:42,975 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:43:43,975 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 10:43:43,977 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:43:44,001 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 10:43:44,002 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:43:45,629 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 10:43:45,631 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:43:45,679 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17141
2025-02-15 10:43:45,680 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "rlqE2QW2wQE36N7gIsdc";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-136344566497456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-136344556249808">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-136344556249920">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-136344556250032">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-136344556250144">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-136344556250256">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-136344556250368">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-136344556256528">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>name, extension = plugin.name.split(&#39;.&#39;)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(name,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-136344556309968">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:43:45,681 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "rlqE2QW2wQE36N7gIsdc";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-136344566497456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-136344556249808">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-136344556249920">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-136344556250032">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-136344556250144">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-136344556250256">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-136344556250368">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-136344556256528">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>name, extension = plugin.name.split(&#39;.&#39;)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(name,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-136344556309968">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:43:47,528 - DEBUG - Polling for notifications...
2025-02-15 10:43:47,565 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612623 with data: None
2025-02-15 10:43:47,567 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:43:47,586 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612623 HTTP/1.1" 200 20
2025-02-15 10:43:47,587 - DEBUG - Received response: {
  "update": -18
}

2025-02-15 10:46:20,182 - INFO - Application started.
2025-02-15 10:46:20,182 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:46:20,182 - INFO - Attempting to log in user: test
2025-02-15 10:46:20,192 - DEBUG - Loading KWallet
2025-02-15 10:46:20,194 - DEBUG - Loading SecretService
2025-02-15 10:46:20,220 - DEBUG - Loading Windows
2025-02-15 10:46:20,222 - DEBUG - Loading chainer
2025-02-15 10:46:20,222 - DEBUG - Loading libsecret
2025-02-15 10:46:20,223 - DEBUG - Loading macOS
2025-02-15 10:46:20,352 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:46:20,356 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:46:20,368 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:46:20,378 - DEBUG - Received response
2025-02-15 10:46:20,422 - INFO - User test logged in successfully.
2025-02-15 10:46:20,423 - INFO - Starting polling for notifications.
2025-02-15 10:46:20,423 - DEBUG - Polling for notifications...
2025-02-15 10:46:20,461 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612780 with data: None
2025-02-15 10:46:20,463 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:46:20,483 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612780 HTTP/1.1" 200 19
2025-02-15 10:46:20,484 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 10:46:20,937 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:46:20,939 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:46:20,965 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:46:20,966 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:46:22,385 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 10:46:22,387 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:46:22,410 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 10:46:22,411 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:46:24,016 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 10:46:24,018 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:46:24,037 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17146
2025-02-15 10:46:24,078 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "N9nVPZNLoHDzH2gxmll0";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124905917301024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124905907004000">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124905907004112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124905907004224">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124905907004336">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124905907004448">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124905907004560">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124905907010720">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-124905907064160">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:46:24,078 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "N9nVPZNLoHDzH2gxmll0";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124905917301024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124905907004000">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124905907004112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124905907004224">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124905907004336">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124905907004448">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124905907004560">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124905907010720">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-124905907064160">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:46:25,489 - DEBUG - Polling for notifications...
2025-02-15 10:46:25,524 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612781 with data: None
2025-02-15 10:46:25,526 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:46:25,545 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612781 HTTP/1.1" 200 19
2025-02-15 10:46:25,546 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 10:47:03,907 - INFO - Application started.
2025-02-15 10:47:03,907 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:47:03,907 - INFO - Attempting to log in user: test
2025-02-15 10:47:03,918 - DEBUG - Loading KWallet
2025-02-15 10:47:03,919 - DEBUG - Loading SecretService
2025-02-15 10:47:03,948 - DEBUG - Loading Windows
2025-02-15 10:47:03,949 - DEBUG - Loading chainer
2025-02-15 10:47:03,950 - DEBUG - Loading libsecret
2025-02-15 10:47:03,951 - DEBUG - Loading macOS
2025-02-15 10:47:04,087 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:47:04,091 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:04,103 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:47:04,113 - DEBUG - Received response
2025-02-15 10:47:04,166 - INFO - User test logged in successfully.
2025-02-15 10:47:04,166 - INFO - Starting polling for notifications.
2025-02-15 10:47:04,167 - DEBUG - Polling for notifications...
2025-02-15 10:47:04,203 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612824 with data: None
2025-02-15 10:47:04,205 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:04,225 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612824 HTTP/1.1" 200 19
2025-02-15 10:47:04,226 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 10:47:04,652 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:47:04,654 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:04,680 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:47:04,681 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:47:05,503 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-15 10:47:05,505 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:05,528 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-15 10:47:05,529 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:47:07,020 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:07,022 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:07,040 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:07,081 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410380158112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369893072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369893184">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369893296">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369893408">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369893520">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369893632">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369899792">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369953232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:07,081 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410380158112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369893072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369893184">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369893296">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369893408">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369893520">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369893632">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369899792">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369953232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:09,232 - DEBUG - Polling for notifications...
2025-02-15 10:47:09,268 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612825 with data: None
2025-02-15 10:47:09,270 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:09,289 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612825 HTTP/1.1" 200 20
2025-02-15 10:47:09,290 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:47:09,403 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:09,405 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:09,420 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:09,461 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369954688">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369953344">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369954464">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369954352">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369954800">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369955024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369955248">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369955360">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369955136">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:09,461 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369954688">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369953344">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369954464">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369954352">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369954800">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369955024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369955248">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369955360">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369955136">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:10,728 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:10,730 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:10,747 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:10,788 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369955920">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369956368">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369956256">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369956592">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369955696">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369956032">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369955808">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369955584">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369955472">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:10,789 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369955920">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369956368">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369956256">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369956592">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369955696">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369956032">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369955808">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369955584">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369955472">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,136 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:11,138 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:11,154 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:11,195 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369956816">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369957376">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369957264">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369957600">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369956928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369957040">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369956704">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369954912">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369956480">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,195 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369956816">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369957376">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369957264">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369957600">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369956928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369957040">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369956704">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369954912">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369956480">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,328 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:11,330 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:11,346 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:11,387 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369957824">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369956144">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369957712">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369957152">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369957936">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369958048">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369958160">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369958272">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369958384">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,387 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369957824">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369956144">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369957712">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369957152">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369957936">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369958048">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369958160">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369958272">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369958384">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,479 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:11,481 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:11,496 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:11,537 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369958720">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369958608">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369958944">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369957488">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369958832">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369959056">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369959168">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369959280">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369959392">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,537 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369958720">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369958608">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369958944">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369957488">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369958832">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369959056">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369959168">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369959280">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369959392">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,606 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:11,608 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:11,624 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:11,665 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369959728">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369959616">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369959952">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369958496">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369959840">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369960064">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369960176">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369960288">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369960400">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,666 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369959728">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369959616">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369959952">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369958496">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369959840">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369960064">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369960176">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369960288">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369960400">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,747 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:11,749 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:11,764 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:11,806 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369960736">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369960624">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369960960">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369959504">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369960848">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369961072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369961184">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369961296">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369961408">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,806 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369960736">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369960624">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369960960">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369959504">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369960848">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369961072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369961184">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369961296">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369961408">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,888 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:11,890 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:11,906 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:11,947 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369961744">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369962416">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369962304">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369962640">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369961856">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369962080">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369961968">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369961632">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369961520">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,947 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369961744">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369962416">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369962304">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369962640">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369961856">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369962080">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369961968">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369961632">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369961520">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:14,295 - DEBUG - Polling for notifications...
2025-02-15 10:47:14,332 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612825 with data: None
2025-02-15 10:47:14,334 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:14,353 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612825 HTTP/1.1" 200 20
2025-02-15 10:47:14,353 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:47:19,359 - DEBUG - Polling for notifications...
2025-02-15 10:47:19,396 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612825 with data: None
2025-02-15 10:47:19,398 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:19,417 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612825 HTTP/1.1" 200 20
2025-02-15 10:47:19,418 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 11:12:15,455 - INFO - Application started.
2025-02-15 11:12:15,455 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:12:15,455 - INFO - Attempting to log in user: test
2025-02-15 11:12:15,472 - DEBUG - Loading KWallet
2025-02-15 11:12:15,472 - DEBUG - Loading SecretService
2025-02-15 11:12:15,515 - DEBUG - Loading Windows
2025-02-15 11:12:15,516 - DEBUG - Loading chainer
2025-02-15 11:12:15,516 - DEBUG - Loading libsecret
2025-02-15 11:12:15,517 - DEBUG - Loading macOS
2025-02-15 11:12:15,590 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:12:15,592 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:12:15,599 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:12:15,609 - DEBUG - Received response
2025-02-15 11:12:15,628 - INFO - User test logged in successfully.
2025-02-15 11:12:15,628 - INFO - Starting polling for notifications.
2025-02-15 11:12:15,628 - DEBUG - Polling for notifications...
2025-02-15 11:12:15,642 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614335 with data: None
2025-02-15 11:12:15,643 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:12:15,659 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614335 HTTP/1.1" 200 19
2025-02-15 11:12:15,659 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 11:12:15,870 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:12:15,870 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:12:15,887 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:12:15,888 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:12:18,564 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:12:18,564 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:12:18,581 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:12:18,582 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:12:19,974 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:12:19,975 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:12:20,019 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17146
2025-02-15 11:12:20,020 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "mDvDTMaTU0I8bF63GcHA";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-125859020456448">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-125859010159200">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-125859010159312">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-125859010159424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-125859010159536">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-125859010159648">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-125859010159760">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-125859010165920">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-125859010219360">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 11:12:20,020 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "mDvDTMaTU0I8bF63GcHA";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-125859020456448">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-125859010159200">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-125859010159312">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-125859010159424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-125859010159536">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-125859010159648">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-125859010159760">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-125859010165920">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-125859010219360">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 11:12:20,665 - DEBUG - Polling for notifications...
2025-02-15 11:12:20,691 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614336 with data: None
2025-02-15 11:12:20,692 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:12:20,707 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614336 HTTP/1.1" 200 20
2025-02-15 11:12:20,707 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 11:14:37,015 - INFO - Application started.
2025-02-15 11:14:37,015 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:14:37,015 - INFO - Attempting to log in user: test
2025-02-15 11:14:37,025 - DEBUG - Loading KWallet
2025-02-15 11:14:37,026 - DEBUG - Loading SecretService
2025-02-15 11:14:37,056 - DEBUG - Loading Windows
2025-02-15 11:14:37,058 - DEBUG - Loading chainer
2025-02-15 11:14:37,058 - DEBUG - Loading libsecret
2025-02-15 11:14:37,059 - DEBUG - Loading macOS
2025-02-15 11:14:37,192 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:14:37,196 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:14:37,208 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:14:37,218 - DEBUG - Received response
2025-02-15 11:14:37,272 - INFO - User test logged in successfully.
2025-02-15 11:14:37,272 - INFO - Starting polling for notifications.
2025-02-15 11:14:37,273 - DEBUG - Polling for notifications...
2025-02-15 11:14:37,310 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614477 with data: None
2025-02-15 11:14:37,312 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:14:37,333 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614477 HTTP/1.1" 200 19
2025-02-15 11:14:37,334 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:14:37,765 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:14:37,767 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:14:37,793 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:14:37,794 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:14:38,763 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:14:38,765 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:14:38,789 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:14:38,790 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:14:41,919 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:14:41,921 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:14:41,968 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 15878
2025-02-15 11:14:41,969 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "StzSou85geHNQMpRLoB9";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137641274983808">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137641275154704">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137641275154816">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137641275154928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137641275155040">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137641275155152">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137641275155264">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137641275161424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line current"><span class="ws">    </span>print(&#34;Nome:&#34;,plugin.nome,&#34;\tExtension:&#34;,extension)</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    print(&#34;Nome:&#34;,plugin.nome,&#34;\tExtension:&#34;,extension)
AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    print("Nome:",plugin.nome,"\tExtension:",extension)
AttributeError: 'PlugTable' object has no attribute 'nome'


-->

2025-02-15 11:14:41,970 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "StzSou85geHNQMpRLoB9";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137641274983808">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137641275154704">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137641275154816">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137641275154928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137641275155040">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137641275155152">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137641275155264">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137641275161424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line current"><span class="ws">    </span>print(&#34;Nome:&#34;,plugin.nome,&#34;\tExtension:&#34;,extension)</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    print(&#34;Nome:&#34;,plugin.nome,&#34;\tExtension:&#34;,extension)
AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    print("Nome:",plugin.nome,"\tExtension:",extension)
AttributeError: 'PlugTable' object has no attribute 'nome'


-->

2025-02-15 11:14:42,339 - DEBUG - Polling for notifications...
2025-02-15 11:14:42,373 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614478 with data: None
2025-02-15 11:14:42,375 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:14:42,394 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614478 HTTP/1.1" 200 19
2025-02-15 11:14:42,395 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 11:15:11,263 - INFO - Application started.
2025-02-15 11:15:11,264 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:15:11,264 - INFO - Attempting to log in user: test
2025-02-15 11:15:11,276 - DEBUG - Loading KWallet
2025-02-15 11:15:11,278 - DEBUG - Loading SecretService
2025-02-15 11:15:11,303 - DEBUG - Loading Windows
2025-02-15 11:15:11,305 - DEBUG - Loading chainer
2025-02-15 11:15:11,305 - DEBUG - Loading libsecret
2025-02-15 11:15:11,307 - DEBUG - Loading macOS
2025-02-15 11:15:11,443 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:15:11,447 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:15:11,460 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:15:11,470 - DEBUG - Received response
2025-02-15 11:15:11,524 - INFO - User test logged in successfully.
2025-02-15 11:15:11,525 - INFO - Starting polling for notifications.
2025-02-15 11:15:11,525 - DEBUG - Polling for notifications...
2025-02-15 11:15:11,564 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614511 with data: None
2025-02-15 11:15:11,566 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:15:11,587 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614511 HTTP/1.1" 200 19
2025-02-15 11:15:11,588 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:15:12,012 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:15:12,014 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:15:12,040 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:15:12,041 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:15:13,821 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:15:13,824 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:15:13,849 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:15:13,850 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:15:14,945 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:15:14,947 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:15:14,966 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17195
2025-02-15 11:15:15,006 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "5OqmNSmjv4lFQGidPrm1";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137024222036928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137024211755392">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137024211755504">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137024211755616">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137024211755728">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137024211755840">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137024211755952">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137024211762112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">184</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>print(&#34;Nome:&#34;,plugin.name,&#34;\tExtension:&#34;,extension)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-137024211815664">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">222</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 184, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 184, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 11:15:15,007 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "5OqmNSmjv4lFQGidPrm1";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137024222036928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137024211755392">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137024211755504">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137024211755616">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137024211755728">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137024211755840">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137024211755952">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137024211762112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">184</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>print(&#34;Nome:&#34;,plugin.name,&#34;\tExtension:&#34;,extension)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-137024211815664">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">222</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 184, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 184, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 11:15:16,593 - DEBUG - Polling for notifications...
2025-02-15 11:18:09,686 - INFO - Application started.
2025-02-15 11:18:09,687 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:18:09,687 - INFO - Attempting to log in user: test
2025-02-15 11:18:09,697 - DEBUG - Loading KWallet
2025-02-15 11:18:09,698 - DEBUG - Loading SecretService
2025-02-15 11:18:09,724 - DEBUG - Loading Windows
2025-02-15 11:18:09,725 - DEBUG - Loading chainer
2025-02-15 11:18:09,726 - DEBUG - Loading libsecret
2025-02-15 11:18:09,727 - DEBUG - Loading macOS
2025-02-15 11:18:09,863 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:18:09,868 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:18:09,892 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:18:09,894 - DEBUG - Received response
2025-02-15 11:18:09,934 - INFO - User test logged in successfully.
2025-02-15 11:18:09,934 - INFO - Starting polling for notifications.
2025-02-15 11:18:09,935 - DEBUG - Polling for notifications...
2025-02-15 11:18:09,973 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614690 with data: None
2025-02-15 11:18:09,975 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:18:09,995 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614690 HTTP/1.1" 200 20
2025-02-15 11:18:09,996 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:18:10,444 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:18:10,446 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:18:10,472 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:18:10,473 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:18:12,063 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:18:12,065 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:18:12,089 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:18:12,090 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:18:13,456 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:18:13,458 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:18:13,505 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17148
2025-02-15 11:18:13,506 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: fromisoformat: argument must be str
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "s5lPL3VypHO8eAJcS057";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: fromisoformat: argument must be str
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124063636112208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124063625814512">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124063625814624">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124063625814736">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124063625814848">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124063625814960">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124063625815072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124063625821232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">184</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>print(&#34;Nome:&#34;,plugin.name,&#34;\tExtension:&#34;,extension)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-124063625874784">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">222</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: fromisoformat: argument must be str
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 184, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: fromisoformat: argument must be str
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 184, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: fromisoformat: argument must be str


-->

2025-02-15 11:18:13,507 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: fromisoformat: argument must be str
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "s5lPL3VypHO8eAJcS057";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: fromisoformat: argument must be str
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124063636112208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124063625814512">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124063625814624">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124063625814736">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124063625814848">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124063625814960">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124063625815072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124063625821232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">184</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>print(&#34;Nome:&#34;,plugin.name,&#34;\tExtension:&#34;,extension)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-124063625874784">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">222</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: fromisoformat: argument must be str
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 184, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: fromisoformat: argument must be str
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 184, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: fromisoformat: argument must be str


-->

2025-02-15 11:18:15,002 - DEBUG - Polling for notifications...
2025-02-15 11:18:15,039 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614690 with data: None
2025-02-15 11:18:15,041 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:18:15,060 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614690 HTTP/1.1" 200 20
2025-02-15 11:18:15,061 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:19:10,647 - INFO - Application started.
2025-02-15 11:19:10,647 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:19:10,647 - INFO - Attempting to log in user: test
2025-02-15 11:19:10,661 - DEBUG - Loading KWallet
2025-02-15 11:19:10,663 - DEBUG - Loading SecretService
2025-02-15 11:19:10,691 - DEBUG - Loading Windows
2025-02-15 11:19:10,692 - DEBUG - Loading chainer
2025-02-15 11:19:10,693 - DEBUG - Loading libsecret
2025-02-15 11:19:10,694 - DEBUG - Loading macOS
2025-02-15 11:19:10,827 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:19:10,831 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:10,855 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:19:10,857 - DEBUG - Received response
2025-02-15 11:19:10,909 - INFO - User test logged in successfully.
2025-02-15 11:19:10,909 - INFO - Starting polling for notifications.
2025-02-15 11:19:10,910 - DEBUG - Polling for notifications...
2025-02-15 11:19:10,948 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:10,950 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:10,970 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:10,971 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:11,415 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:19:11,417 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:11,443 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:19:11,444 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:19:15,976 - DEBUG - Polling for notifications...
2025-02-15 11:19:16,013 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:16,015 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:16,034 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:16,035 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:20,304 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:19:20,306 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:20,329 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:19:20,330 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:19:21,039 - DEBUG - Polling for notifications...
2025-02-15 11:19:21,075 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:21,077 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:21,096 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:21,097 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:21,916 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:19:21,918 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:21,939 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 181
2025-02-15 11:19:21,979 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:19:21 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python pluginEs.py: No module named 'pluginEs'",
  "status": "failed"
}

2025-02-15 11:19:26,102 - DEBUG - Polling for notifications...
2025-02-15 11:19:26,139 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:26,141 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:26,160 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:26,161 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:31,167 - DEBUG - Polling for notifications...
2025-02-15 11:19:31,201 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:31,204 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:31,223 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:31,223 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:36,229 - DEBUG - Polling for notifications...
2025-02-15 11:19:36,265 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:36,266 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:36,285 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:36,286 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:41,292 - DEBUG - Polling for notifications...
2025-02-15 11:19:41,328 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:41,330 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:41,349 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:41,350 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:46,355 - DEBUG - Polling for notifications...
2025-02-15 11:19:46,390 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:46,392 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:46,411 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:46,412 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:51,438 - DEBUG - Polling for notifications...
2025-02-15 11:19:51,475 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:51,477 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:51,496 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:51,497 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:56,519 - DEBUG - Polling for notifications...
2025-02-15 11:19:56,556 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:56,557 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:56,576 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:56,577 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:01,603 - DEBUG - Polling for notifications...
2025-02-15 11:20:01,639 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:20:01,641 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:01,661 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:20:01,662 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:06,667 - DEBUG - Polling for notifications...
2025-02-15 11:20:06,702 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:20:06,704 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:06,724 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:20:06,725 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:11,751 - DEBUG - Polling for notifications...
2025-02-15 11:20:11,791 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:20:11,794 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:11,816 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:20:11,817 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:16,843 - DEBUG - Polling for notifications...
2025-02-15 11:20:16,878 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:20:16,880 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:16,900 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:20:16,901 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:21,926 - DEBUG - Polling for notifications...
2025-02-15 11:20:21,964 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:20:21,966 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:21,985 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:20:21,986 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:27,012 - DEBUG - Polling for notifications...
2025-02-15 11:20:27,055 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:20:27,058 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:27,078 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:20:27,078 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:39,390 - INFO - Application started.
2025-02-15 11:20:39,390 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:20:39,391 - INFO - Attempting to log in user: test
2025-02-15 11:20:39,399 - DEBUG - Loading KWallet
2025-02-15 11:20:39,400 - DEBUG - Loading SecretService
2025-02-15 11:20:39,428 - DEBUG - Loading Windows
2025-02-15 11:20:39,429 - DEBUG - Loading chainer
2025-02-15 11:20:39,430 - DEBUG - Loading libsecret
2025-02-15 11:20:39,431 - DEBUG - Loading macOS
2025-02-15 11:20:39,564 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:20:39,568 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:39,578 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:20:39,588 - DEBUG - Received response
2025-02-15 11:20:39,633 - INFO - User test logged in successfully.
2025-02-15 11:20:39,633 - INFO - Starting polling for notifications.
2025-02-15 11:20:39,634 - DEBUG - Polling for notifications...
2025-02-15 11:20:39,670 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614839 with data: None
2025-02-15 11:20:39,672 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:39,693 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614839 HTTP/1.1" 200 20
2025-02-15 11:20:39,694 - DEBUG - Received response: {
  "update": -96
}

2025-02-15 11:20:40,125 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:20:40,128 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:40,148 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:20:40,149 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:20:41,955 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:20:41,957 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:41,979 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:20:41,980 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:20:43,084 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:20:43,086 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:43,112 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 181
2025-02-15 11:20:43,153 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:20:43 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python pluginEs.py: No module named 'pluginEs'",
  "status": "failed"
}

2025-02-15 11:20:44,700 - DEBUG - Polling for notifications...
2025-02-15 11:20:44,733 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614840 with data: None
2025-02-15 11:20:44,735 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:44,754 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614840 HTTP/1.1" 200 20
2025-02-15 11:20:44,755 - DEBUG - Received response: {
  "update": -97
}

2025-02-15 11:20:49,761 - DEBUG - Polling for notifications...
2025-02-15 11:20:49,797 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614840 with data: None
2025-02-15 11:20:49,799 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:49,818 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614840 HTTP/1.1" 200 20
2025-02-15 11:20:49,819 - DEBUG - Received response: {
  "update": -97
}

2025-02-15 11:30:04,679 - INFO - Application started.
2025-02-15 11:30:04,679 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:30:04,680 - INFO - Attempting to log in user: test
2025-02-15 11:30:04,692 - DEBUG - Loading KWallet
2025-02-15 11:30:04,694 - DEBUG - Loading SecretService
2025-02-15 11:30:04,723 - DEBUG - Loading Windows
2025-02-15 11:30:04,725 - DEBUG - Loading chainer
2025-02-15 11:30:04,726 - DEBUG - Loading libsecret
2025-02-15 11:30:04,727 - DEBUG - Loading macOS
2025-02-15 11:30:04,868 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:30:04,872 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:04,885 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:30:04,896 - DEBUG - Received response
2025-02-15 11:30:04,948 - INFO - User test logged in successfully.
2025-02-15 11:30:04,948 - INFO - Starting polling for notifications.
2025-02-15 11:30:04,949 - DEBUG - Polling for notifications...
2025-02-15 11:30:04,985 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:04,988 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:05,008 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:05,009 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:05,432 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:30:05,434 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:05,460 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:30:05,461 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:30:07,655 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:30:07,657 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:07,680 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:30:07,682 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:30:08,961 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:30:08,963 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:08,992 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 181
2025-02-15 11:30:09,033 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:30:08 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python pluginEs.py: No module named 'pluginEs'",
  "status": "failed"
}

2025-02-15 11:30:10,015 - DEBUG - Polling for notifications...
2025-02-15 11:30:10,050 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:10,052 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:10,070 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:10,071 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:15,077 - DEBUG - Polling for notifications...
2025-02-15 11:30:15,112 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:15,114 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:15,133 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:15,134 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:20,140 - DEBUG - Polling for notifications...
2025-02-15 11:30:20,175 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:20,177 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:20,196 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:20,197 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:25,202 - DEBUG - Polling for notifications...
2025-02-15 11:30:25,242 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:25,244 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:25,264 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:25,265 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:30,291 - DEBUG - Polling for notifications...
2025-02-15 11:30:30,332 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:30,335 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:30,356 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:30,358 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:35,383 - DEBUG - Polling for notifications...
2025-02-15 11:30:35,420 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:35,422 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:35,441 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:35,442 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:40,468 - DEBUG - Polling for notifications...
2025-02-15 11:30:40,504 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:40,506 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:40,526 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:40,526 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:45,547 - DEBUG - Polling for notifications...
2025-02-15 11:30:45,584 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:45,586 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:45,605 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:45,606 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:50,631 - DEBUG - Polling for notifications...
2025-02-15 11:30:50,669 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:50,670 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:50,690 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:50,691 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:55,709 - DEBUG - Polling for notifications...
2025-02-15 11:30:55,749 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:55,751 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:56,190 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 422 45
2025-02-15 11:30:56,191 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-15 11:30:56,191 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-15 11:32:06,715 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:32:06,717 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:32:06,736 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 422 45
2025-02-15 11:32:06,737 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-15 11:32:06,737 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-15 11:34:49,146 - INFO - Application started.
2025-02-15 11:34:49,146 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:34:49,147 - INFO - Attempting to log in user: test
2025-02-15 11:34:49,156 - DEBUG - Loading KWallet
2025-02-15 11:34:49,157 - DEBUG - Loading SecretService
2025-02-15 11:34:49,183 - DEBUG - Loading Windows
2025-02-15 11:34:49,184 - DEBUG - Loading chainer
2025-02-15 11:34:49,185 - DEBUG - Loading libsecret
2025-02-15 11:34:49,186 - DEBUG - Loading macOS
2025-02-15 11:34:49,322 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:34:49,326 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:49,351 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:34:49,353 - DEBUG - Received response
2025-02-15 11:34:49,399 - INFO - User test logged in successfully.
2025-02-15 11:34:49,400 - INFO - Starting polling for notifications.
2025-02-15 11:34:49,400 - DEBUG - Polling for notifications...
2025-02-15 11:34:49,437 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615689 with data: None
2025-02-15 11:34:49,439 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:49,459 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615689 HTTP/1.1" 200 19
2025-02-15 11:34:49,460 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:34:49,874 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:34:49,876 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:49,903 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:34:49,903 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:34:50,854 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:34:50,856 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:50,879 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:34:50,880 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:34:52,322 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:34:52,324 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:52,347 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 206
2025-02-15 11:34:52,387 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:34:52 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python pluginEs.py: module 'plugins.pluginEs' has no attribute 'Plugin'",
  "status": "failed"
}

2025-02-15 11:34:54,466 - DEBUG - Polling for notifications...
2025-02-15 11:34:54,502 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615690 with data: None
2025-02-15 11:34:54,504 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:54,523 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615690 HTTP/1.1" 200 19
2025-02-15 11:34:54,524 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 11:34:59,530 - DEBUG - Polling for notifications...
2025-02-15 11:34:59,568 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615690 with data: None
2025-02-15 11:34:59,570 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:59,590 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615690 HTTP/1.1" 200 19
2025-02-15 11:34:59,591 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 11:42:22,440 - INFO - Application started.
2025-02-15 11:42:22,441 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:42:22,441 - INFO - Attempting to log in user: test
2025-02-15 11:42:22,452 - DEBUG - Loading KWallet
2025-02-15 11:42:22,453 - DEBUG - Loading SecretService
2025-02-15 11:42:22,484 - DEBUG - Loading Windows
2025-02-15 11:42:22,485 - DEBUG - Loading chainer
2025-02-15 11:42:22,486 - DEBUG - Loading libsecret
2025-02-15 11:42:22,487 - DEBUG - Loading macOS
2025-02-15 11:42:22,651 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:42:22,655 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:22,669 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:42:22,680 - DEBUG - Received response
2025-02-15 11:42:22,731 - INFO - User test logged in successfully.
2025-02-15 11:42:22,732 - INFO - Starting polling for notifications.
2025-02-15 11:42:22,732 - DEBUG - Polling for notifications...
2025-02-15 11:42:22,773 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616142 with data: None
2025-02-15 11:42:22,775 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:22,800 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616142 HTTP/1.1" 200 20
2025-02-15 11:42:22,801 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 11:42:23,263 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:42:23,265 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:23,294 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:42:23,297 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:42:24,645 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:42:24,647 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:24,673 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:42:24,674 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:42:25,913 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:42:25,915 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:25,962 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-02-15 11:42:25,963 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:42:25 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-02-15 11:42:27,807 - DEBUG - Polling for notifications...
2025-02-15 11:42:27,845 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:27,847 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:27,867 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:27,868 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:42:32,873 - DEBUG - Polling for notifications...
2025-02-15 11:42:32,911 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:32,913 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:32,933 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:32,934 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:42:37,939 - DEBUG - Polling for notifications...
2025-02-15 11:42:37,978 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:37,979 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:37,998 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:37,999 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:42:43,005 - DEBUG - Polling for notifications...
2025-02-15 11:42:43,043 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:43,045 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:43,065 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:43,065 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:42:48,071 - DEBUG - Polling for notifications...
2025-02-15 11:42:48,110 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:48,113 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:48,133 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:48,134 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:42:53,139 - DEBUG - Polling for notifications...
2025-02-15 11:42:53,176 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:53,177 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:53,197 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:53,198 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:42:58,203 - DEBUG - Polling for notifications...
2025-02-15 11:42:58,241 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:58,242 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:58,262 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:58,262 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:43:03,266 - DEBUG - Polling for notifications...
2025-02-15 11:43:03,306 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:43:03,308 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:03,329 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:43:03,330 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:43:08,335 - DEBUG - Polling for notifications...
2025-02-15 11:43:08,373 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:43:08,374 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:08,375 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /notification/1739616143 (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7997e7720670>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-02-15 11:43:29,745 - INFO - Application started.
2025-02-15 11:43:29,745 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:43:29,746 - INFO - Attempting to log in user: test
2025-02-15 11:43:29,758 - DEBUG - Loading KWallet
2025-02-15 11:43:29,759 - DEBUG - Loading SecretService
2025-02-15 11:43:29,790 - DEBUG - Loading Windows
2025-02-15 11:43:29,792 - DEBUG - Loading chainer
2025-02-15 11:43:29,793 - DEBUG - Loading libsecret
2025-02-15 11:43:29,794 - DEBUG - Loading macOS
2025-02-15 11:43:29,946 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:43:29,951 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:29,967 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:43:29,977 - DEBUG - Received response
2025-02-15 11:43:30,031 - INFO - User test logged in successfully.
2025-02-15 11:43:30,032 - INFO - Starting polling for notifications.
2025-02-15 11:43:30,033 - DEBUG - Polling for notifications...
2025-02-15 11:43:30,074 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616210 with data: None
2025-02-15 11:43:30,076 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:30,102 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616210 HTTP/1.1" 200 20
2025-02-15 11:43:30,105 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 11:43:30,575 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:43:30,576 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:30,606 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:43:30,607 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:43:33,905 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:43:33,907 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:33,933 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:43:33,934 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:43:34,856 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:43:34,858 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:34,880 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 195
2025-02-15 11:43:34,920 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:43:34 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python pluginEs.py: name 'Interfaccia_Plugin' is not defined",
  "status": "failed"
}

2025-02-15 11:43:35,111 - DEBUG - Polling for notifications...
2025-02-15 11:43:35,149 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616211 with data: None
2025-02-15 11:43:35,151 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:35,171 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616211 HTTP/1.1" 200 20
2025-02-15 11:43:35,172 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:43:40,178 - DEBUG - Polling for notifications...
2025-02-15 11:43:40,217 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616211 with data: None
2025-02-15 11:43:40,221 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:40,240 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616211 HTTP/1.1" 200 20
2025-02-15 11:43:40,241 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:49:59,850 - INFO - Application started.
2025-02-15 11:49:59,850 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:49:59,851 - INFO - Attempting to log in user: test
2025-02-15 11:49:59,860 - DEBUG - Loading KWallet
2025-02-15 11:49:59,861 - DEBUG - Loading SecretService
2025-02-15 11:49:59,886 - DEBUG - Loading Windows
2025-02-15 11:49:59,887 - DEBUG - Loading chainer
2025-02-15 11:49:59,888 - DEBUG - Loading libsecret
2025-02-15 11:49:59,889 - DEBUG - Loading macOS
2025-02-15 11:50:00,016 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:50:00,019 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:00,033 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:50:00,043 - DEBUG - Received response
2025-02-15 11:50:00,090 - INFO - User test logged in successfully.
2025-02-15 11:50:00,090 - INFO - Starting polling for notifications.
2025-02-15 11:50:00,091 - DEBUG - Polling for notifications...
2025-02-15 11:50:00,131 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616600 with data: None
2025-02-15 11:50:00,133 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:00,153 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616600 HTTP/1.1" 200 20
2025-02-15 11:50:00,154 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 11:50:00,591 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:50:00,593 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:00,619 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:50:00,620 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:50:01,456 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:50:01,458 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:01,482 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:50:01,484 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:50:02,661 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:50:02,662 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:02,682 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-02-15 11:50:02,723 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:50:02 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-02-15 11:50:05,070 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-15 11:50:05,072 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:05,093 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-15 11:50:05,094 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:50:05,160 - DEBUG - Polling for notifications...
2025-02-15 11:50:05,196 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616601 with data: None
2025-02-15 11:50:05,198 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:05,217 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616601 HTTP/1.1" 200 20
2025-02-15 11:50:05,218 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:50:06,666 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 11:50:06,668 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:06,694 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 102
2025-02-15 11:50:06,734 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:50:06 GMT",
  "log": "Io piango tanto",
  "status": "finished"
}

2025-02-15 11:50:08,998 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-15 11:50:08,999 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:09,020 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-15 11:50:09,021 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:50:10,224 - DEBUG - Polling for notifications...
2025-02-15 11:50:10,260 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616601 with data: None
2025-02-15 11:50:10,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:10,281 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616601 HTTP/1.1" 200 20
2025-02-15 11:50:10,282 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:50:10,342 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-15 11:50:10,344 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:10,391 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-02-15 11:50:10,392 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:50:10 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-02-15 11:50:15,288 - DEBUG - Polling for notifications...
2025-02-15 11:50:15,325 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616601 with data: None
2025-02-15 11:50:15,327 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:15,346 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616601 HTTP/1.1" 200 20
2025-02-15 11:50:15,347 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:51:49,020 - INFO - Application started.
2025-02-15 11:51:49,020 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:51:49,020 - INFO - Attempting to log in user: test
2025-02-15 11:51:49,033 - DEBUG - Loading KWallet
2025-02-15 11:51:49,035 - DEBUG - Loading SecretService
2025-02-15 11:51:49,064 - DEBUG - Loading Windows
2025-02-15 11:51:49,066 - DEBUG - Loading chainer
2025-02-15 11:51:49,066 - DEBUG - Loading libsecret
2025-02-15 11:51:49,068 - DEBUG - Loading macOS
2025-02-15 11:51:49,194 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:51:49,198 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:49,208 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:51:49,218 - DEBUG - Received response
2025-02-15 11:51:49,272 - INFO - User test logged in successfully.
2025-02-15 11:51:49,272 - INFO - Starting polling for notifications.
2025-02-15 11:51:49,273 - DEBUG - Polling for notifications...
2025-02-15 11:51:49,309 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616709 with data: None
2025-02-15 11:51:49,311 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:49,332 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616709 HTTP/1.1" 200 21
2025-02-15 11:51:49,333 - DEBUG - Received response: {
  "update": -119
}

2025-02-15 11:51:49,752 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:51:49,754 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:49,775 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:51:49,776 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:51:54,339 - DEBUG - Polling for notifications...
2025-02-15 11:51:54,376 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616710 with data: None
2025-02-15 11:51:54,378 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:54,397 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616710 HTTP/1.1" 200 21
2025-02-15 11:51:54,398 - DEBUG - Received response: {
  "update": -120
}

2025-02-15 11:51:58,847 - ERROR - Nome file contiene valori non consentiti.
2025-02-15 11:51:58,885 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:51:58,888 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:58,910 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:51:58,911 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:51:58,986 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:51:58,988 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:59,009 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:51:59,010 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:51:59,076 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:51:59,078 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:59,099 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:51:59,100 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:51:59,404 - DEBUG - Polling for notifications...
2025-02-15 11:51:59,441 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616719 with data: None
2025-02-15 11:51:59,442 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:59,461 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616719 HTTP/1.1" 200 21
2025-02-15 11:51:59,462 - DEBUG - Received response: {
  "update": -129
}

2025-02-15 11:52:04,468 - DEBUG - Polling for notifications...
2025-02-15 11:52:04,503 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616719 with data: None
2025-02-15 11:52:04,505 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:52:04,524 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616719 HTTP/1.1" 200 21
2025-02-15 11:52:04,525 - DEBUG - Received response: {
  "update": -129
}

2025-02-15 11:52:09,531 - DEBUG - Polling for notifications...
2025-02-15 11:52:09,567 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616719 with data: None
2025-02-15 11:52:09,569 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:52:09,589 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616719 HTTP/1.1" 200 21
2025-02-15 11:52:09,590 - DEBUG - Received response: {
  "update": -129
}

2025-02-15 12:02:04,632 - INFO - Application started.
2025-02-15 12:02:04,632 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 12:02:04,633 - INFO - Attempting to log in user: test
2025-02-15 12:02:04,642 - DEBUG - Loading KWallet
2025-02-15 12:02:04,643 - DEBUG - Loading SecretService
2025-02-15 12:02:04,668 - DEBUG - Loading Windows
2025-02-15 12:02:04,669 - DEBUG - Loading chainer
2025-02-15 12:02:04,670 - DEBUG - Loading libsecret
2025-02-15 12:02:04,671 - DEBUG - Loading macOS
2025-02-15 12:02:04,804 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 12:02:04,809 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:04,820 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 12:02:04,830 - DEBUG - Received response
2025-02-15 12:02:04,876 - INFO - User test logged in successfully.
2025-02-15 12:02:04,877 - INFO - Starting polling for notifications.
2025-02-15 12:02:04,877 - DEBUG - Polling for notifications...
2025-02-15 12:02:04,916 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617325 with data: None
2025-02-15 12:02:04,918 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:04,938 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617325 HTTP/1.1" 200 21
2025-02-15 12:02:04,939 - DEBUG - Received response: {
  "update": -735
}

2025-02-15 12:02:05,359 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:05,361 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:05,381 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:05,382 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:09,944 - DEBUG - Polling for notifications...
2025-02-15 12:02:09,981 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617325 with data: None
2025-02-15 12:02:09,982 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:10,001 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617325 HTTP/1.1" 200 21
2025-02-15 12:02:10,002 - DEBUG - Received response: {
  "update": -735
}

2025-02-15 12:02:12,270 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Helo, im also sad. And u??"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'megaPersonale.py'}
2025-02-15 12:02:12,272 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:12,299 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 500 15599
2025-02-15 12:02:12,300 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;sanitize_dict&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QSllcXLbYJuKR1wt3UVe";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;sanitize_dict&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-134606932527024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-134606931256576">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-134606931256688">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-134606931256800">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-134606931256912">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-134606931257024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-134606931257136">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-134606931263296">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">151</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def new_plugin():</pre>
<pre class="line before"><span class="ws">    </span>global last_update</pre>
<pre class="line before"><span class="ws">    </span># Get the JSON data from the request</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line current"><span class="ws">    </span>sanitize_dict(data)</pre>
<pre class="line after"><span class="ws">    </span>if not data or &#39;name&#39; not in data:</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;error&#34;: &#34;Invalid record&#34;}), 404</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])</pre>
<pre class="line after"><span class="ws">    </span>if created:</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;sanitize_dict&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 151, in new_plugin
    sanitize_dict(data)
NameError: name &#39;sanitize_dict&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 151, in new_plugin
    sanitize_dict(data)
NameError: name 'sanitize_dict' is not defined


-->

2025-02-15 12:02:12,301 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;sanitize_dict&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QSllcXLbYJuKR1wt3UVe";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;sanitize_dict&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-134606932527024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-134606931256576">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-134606931256688">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-134606931256800">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-134606931256912">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-134606931257024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-134606931257136">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-134606931263296">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">151</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def new_plugin():</pre>
<pre class="line before"><span class="ws">    </span>global last_update</pre>
<pre class="line before"><span class="ws">    </span># Get the JSON data from the request</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line current"><span class="ws">    </span>sanitize_dict(data)</pre>
<pre class="line after"><span class="ws">    </span>if not data or &#39;name&#39; not in data:</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;error&#34;: &#34;Invalid record&#34;}), 404</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])</pre>
<pre class="line after"><span class="ws">    </span>if created:</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;sanitize_dict&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 151, in new_plugin
    sanitize_dict(data)
NameError: name &#39;sanitize_dict&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 151, in new_plugin
    sanitize_dict(data)
NameError: name 'sanitize_dict' is not defined


-->

2025-02-15 12:02:12,340 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:12,342 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:12,362 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:12,363 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:12,439 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:12,441 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:12,462 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:12,463 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:12,529 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:12,531 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:12,552 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:12,553 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:15,008 - DEBUG - Polling for notifications...
2025-02-15 12:02:15,045 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617333 with data: None
2025-02-15 12:02:15,047 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:15,066 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617333 HTTP/1.1" 200 21
2025-02-15 12:02:15,067 - DEBUG - Received response: {
  "update": -743
}

2025-02-15 12:02:49,478 - INFO - Application started.
2025-02-15 12:02:49,479 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 12:02:49,479 - INFO - Attempting to log in user: test
2025-02-15 12:02:49,489 - DEBUG - Loading KWallet
2025-02-15 12:02:49,490 - DEBUG - Loading SecretService
2025-02-15 12:02:49,518 - DEBUG - Loading Windows
2025-02-15 12:02:49,519 - DEBUG - Loading chainer
2025-02-15 12:02:49,520 - DEBUG - Loading libsecret
2025-02-15 12:02:49,521 - DEBUG - Loading macOS
2025-02-15 12:02:49,651 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 12:02:49,655 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:49,667 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 12:02:49,677 - DEBUG - Received response
2025-02-15 12:02:49,732 - INFO - User test logged in successfully.
2025-02-15 12:02:49,732 - INFO - Starting polling for notifications.
2025-02-15 12:02:49,733 - DEBUG - Polling for notifications...
2025-02-15 12:02:49,773 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617369 with data: None
2025-02-15 12:02:49,775 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:49,796 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617369 HTTP/1.1" 200 20
2025-02-15 12:02:49,797 - DEBUG - Received response: {
  "update": -12
}

2025-02-15 12:02:50,235 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:50,237 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:50,263 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:50,264 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:54,803 - DEBUG - Polling for notifications...
2025-02-15 12:02:54,839 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617370 with data: None
2025-02-15 12:02:54,841 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:54,861 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617370 HTTP/1.1" 200 20
2025-02-15 12:02:54,862 - DEBUG - Received response: {
  "update": -13
}

2025-02-15 12:02:57,221 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Helo, im also sad. And u??"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'megaPersonale.py'}
2025-02-15 12:02:57,222 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:57,244 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-02-15 12:02:57,245 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-02-15 12:02:57,245 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-02-15 12:02:57,284 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:57,286 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:57,306 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:57,307 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:57,379 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:57,381 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:57,402 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:57,403 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:57,469 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:57,471 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:57,491 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:57,492 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:59,867 - DEBUG - Polling for notifications...
2025-02-15 12:02:59,904 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:02:59,905 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:59,925 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:02:59,925 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:04,931 - DEBUG - Polling for notifications...
2025-02-15 12:03:04,966 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:04,968 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:04,987 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:04,988 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:09,993 - DEBUG - Polling for notifications...
2025-02-15 12:03:10,029 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:10,030 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:10,049 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:10,050 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:15,056 - DEBUG - Polling for notifications...
2025-02-15 12:03:15,093 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:15,095 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:15,116 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:15,117 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:20,142 - DEBUG - Polling for notifications...
2025-02-15 12:03:20,178 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:20,179 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:20,198 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:20,199 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:25,224 - DEBUG - Polling for notifications...
2025-02-15 12:03:25,260 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:25,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:25,283 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:25,284 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:30,310 - DEBUG - Polling for notifications...
2025-02-15 12:03:30,346 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:30,348 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:30,373 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:30,374 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:35,379 - DEBUG - Polling for notifications...
2025-02-15 12:03:35,416 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:35,417 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:35,438 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:35,440 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:40,453 - DEBUG - Polling for notifications...
2025-02-15 12:03:40,490 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:40,492 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:40,511 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:40,512 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:45,537 - DEBUG - Polling for notifications...
2025-02-15 12:03:45,575 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:45,577 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:45,597 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:45,597 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:50,603 - DEBUG - Polling for notifications...
2025-02-15 12:03:50,639 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:50,642 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:50,661 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:50,662 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:55,667 - DEBUG - Polling for notifications...
2025-02-15 12:03:55,706 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:55,708 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:55,728 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:55,729 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:00,735 - DEBUG - Polling for notifications...
2025-02-15 12:04:00,771 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:00,772 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:00,791 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:00,792 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:05,818 - DEBUG - Polling for notifications...
2025-02-15 12:04:05,855 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:05,857 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:05,877 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:05,878 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:10,903 - DEBUG - Polling for notifications...
2025-02-15 12:04:10,939 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:10,941 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:10,961 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:10,963 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:15,983 - DEBUG - Polling for notifications...
2025-02-15 12:04:16,026 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:16,028 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:16,048 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:16,049 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:21,075 - DEBUG - Polling for notifications...
2025-02-15 12:04:21,111 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:21,113 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:21,132 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:21,133 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:26,158 - DEBUG - Polling for notifications...
2025-02-15 12:04:26,194 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:26,195 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:26,214 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:26,215 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:31,241 - DEBUG - Polling for notifications...
2025-02-15 12:04:31,277 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:31,279 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:31,298 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:31,299 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:36,325 - DEBUG - Polling for notifications...
2025-02-15 12:04:36,361 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:36,363 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:36,382 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:36,383 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:41,408 - DEBUG - Polling for notifications...
2025-02-15 12:04:41,444 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:41,445 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:41,464 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:41,465 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:46,468 - DEBUG - Polling for notifications...
2025-02-15 12:04:46,504 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:46,506 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:46,525 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:46,526 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:51,552 - DEBUG - Polling for notifications...
2025-02-15 12:04:51,589 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:51,591 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:51,610 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:51,611 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:56,618 - DEBUG - Polling for notifications...
2025-02-15 12:04:56,654 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:56,656 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:56,675 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:56,676 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:05:01,692 - DEBUG - Polling for notifications...
2025-02-15 12:05:01,728 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:05:01,730 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:05:01,750 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:05:01,751 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:05:06,773 - DEBUG - Polling for notifications...
2025-02-15 12:05:06,810 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:05:06,812 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:05:06,831 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:05:06,832 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:05:11,840 - DEBUG - Polling for notifications...
2025-02-15 12:05:11,877 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:05:11,879 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:05:11,898 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:05:11,898 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:05:16,906 - DEBUG - Polling for notifications...
2025-02-15 12:05:16,942 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:05:16,944 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:05:16,966 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 422 45
2025-02-15 12:05:16,967 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-15 12:05:16,967 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:40:55,589 - INFO - Application started.
2025-03-25 14:40:55,589 - INFO - ClientCore initialized with server URL: https://127.0.01:5000
2025-03-25 14:40:55,589 - INFO - Attempting to log in user: test
2025-03-25 14:40:55,592 - DEBUG - Loading KWallet
2025-03-25 14:40:55,592 - DEBUG - Loading SecretService
2025-03-25 14:40:55,602 - DEBUG - Loading Windows
2025-03-25 14:40:55,602 - DEBUG - Loading chainer
2025-03-25 14:40:55,602 - DEBUG - Loading libsecret
2025-03-25 14:40:55,603 - DEBUG - Loading macOS
2025-03-25 14:40:55,658 - DEBUG - Sending POST request to https://127.0.01:5000/login
2025-03-25 14:40:55,659 - DEBUG - Starting new HTTPS connection (1): 127.0.01:5000
2025-03-25 14:40:55,662 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.01', port=5000): Max retries exceeded with url: /login (Caused by SSLError(SSLCertVerificationError(1, "[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for '127.0.01'. (_ssl.c:1007)")))
2025-03-25 14:45:18,355 - INFO - Application started.
2025-03-25 14:45:18,355 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 14:45:18,355 - INFO - Attempting to log in user: test
2025-03-25 14:45:18,358 - DEBUG - Loading KWallet
2025-03-25 14:45:18,358 - DEBUG - Loading SecretService
2025-03-25 14:45:18,366 - DEBUG - Loading Windows
2025-03-25 14:45:18,367 - DEBUG - Loading chainer
2025-03-25 14:45:18,367 - DEBUG - Loading libsecret
2025-03-25 14:45:18,367 - DEBUG - Loading macOS
2025-03-25 14:45:18,401 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 14:45:18,402 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:18,406 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 14:45:18,417 - DEBUG - Received response
2025-03-25 14:45:18,435 - INFO - User test logged in successfully.
2025-03-25 14:45:18,435 - INFO - Starting polling for notifications.
2025-03-25 14:45:18,436 - DEBUG - Polling for notifications...
2025-03-25 14:45:18,446 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910318 with data: None
2025-03-25 14:45:18,447 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:18,460 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910318 HTTP/1.1" 200 21
2025-03-25 14:45:18,461 - DEBUG - Received response: {
  "update": -353
}

2025-03-25 14:45:18,590 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:45:18,590 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:18,607 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:45:18,608 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:45:23,465 - DEBUG - Polling for notifications...
2025-03-25 14:45:23,477 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:23,477 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:23,491 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:23,491 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:26,381 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-03-25 14:45:26,381 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:26,397 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-03-25 14:45:26,397 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 14:45:27,979 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-03-25 14:45:27,980 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:27,989 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 102
2025-03-25 14:45:28,029 - DEBUG - Received response: {
  "datetime": "Tue, 25 Mar 2025 14:45:27 GMT",
  "log": "Io piango tanto",
  "status": "finished"
}

2025-03-25 14:45:28,495 - DEBUG - Polling for notifications...
2025-03-25 14:45:28,507 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:28,508 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:28,522 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:28,523 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:30,016 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-03-25 14:45:30,017 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:30,031 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-03-25 14:45:30,032 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 14:45:30,678 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-03-25 14:45:30,679 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:30,688 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-03-25 14:45:30,728 - DEBUG - Received response: {
  "datetime": "Tue, 25 Mar 2025 14:45:30 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-03-25 14:45:33,525 - DEBUG - Polling for notifications...
2025-03-25 14:45:33,537 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:33,537 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:33,551 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:33,551 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:38,557 - DEBUG - Polling for notifications...
2025-03-25 14:45:38,570 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:38,570 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:38,584 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:38,584 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:43,590 - DEBUG - Polling for notifications...
2025-03-25 14:45:43,602 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:43,603 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:43,617 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:43,617 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:48,623 - DEBUG - Polling for notifications...
2025-03-25 14:45:48,635 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:48,636 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:48,650 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:48,650 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:53,656 - DEBUG - Polling for notifications...
2025-03-25 14:45:53,668 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:53,669 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:53,683 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:53,684 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:58,687 - DEBUG - Polling for notifications...
2025-03-25 14:45:58,699 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:58,700 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:58,714 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:58,714 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:03,719 - DEBUG - Polling for notifications...
2025-03-25 14:46:03,732 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:03,733 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:03,746 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:03,747 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:08,752 - DEBUG - Polling for notifications...
2025-03-25 14:46:08,765 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:08,766 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:08,779 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:08,780 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:13,785 - DEBUG - Polling for notifications...
2025-03-25 14:46:13,798 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:13,799 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:13,812 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:13,813 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:18,819 - DEBUG - Polling for notifications...
2025-03-25 14:46:18,831 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:18,831 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:18,845 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:18,846 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:23,851 - DEBUG - Polling for notifications...
2025-03-25 14:46:23,863 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:23,864 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:23,878 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:23,878 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:28,884 - DEBUG - Polling for notifications...
2025-03-25 14:46:28,896 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:28,897 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:28,911 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:28,911 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:33,914 - DEBUG - Polling for notifications...
2025-03-25 14:46:33,926 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:33,927 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:33,941 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:33,942 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:38,946 - DEBUG - Polling for notifications...
2025-03-25 14:46:38,958 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:38,959 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:38,972 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:38,973 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:43,978 - DEBUG - Polling for notifications...
2025-03-25 14:46:43,990 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:43,991 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:44,005 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:44,005 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:47,149 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'from core.interfaccia_plugin import Interfaccia_Plugin\nclass Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 14:46:47,150 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:47,154 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 14:46:47,164 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 14:46:47,164 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 14:46:47,174 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:46:47,174 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:47,188 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:46:47,189 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:46:47,208 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:46:47,209 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:47,223 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:46:47,223 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:46:47,241 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:46:47,242 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:47,256 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:46:47,256 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:46:49,010 - DEBUG - Polling for notifications...
2025-03-25 14:46:49,023 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910407 with data: None
2025-03-25 14:46:49,024 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:49,038 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910407 HTTP/1.1" 200 21
2025-03-25 14:46:49,038 - DEBUG - Received response: {
  "update": -442
}

2025-03-25 14:46:54,043 - DEBUG - Polling for notifications...
2025-03-25 14:46:54,056 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910407 with data: None
2025-03-25 14:46:54,057 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:54,070 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910407 HTTP/1.1" 200 21
2025-03-25 14:46:54,071 - DEBUG - Received response: {
  "update": -442
}

2025-03-25 14:46:59,076 - DEBUG - Polling for notifications...
2025-03-25 14:46:59,089 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910407 with data: None
2025-03-25 14:46:59,089 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:59,103 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910407 HTTP/1.1" 200 21
2025-03-25 14:46:59,104 - DEBUG - Received response: {
  "update": -442
}

2025-03-25 14:47:04,109 - DEBUG - Polling for notifications...
2025-03-25 14:47:04,121 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910407 with data: None
2025-03-25 14:47:04,122 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:04,136 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910407 HTTP/1.1" 200 21
2025-03-25 14:47:04,137 - DEBUG - Received response: {
  "update": -442
}

2025-03-25 14:47:09,142 - DEBUG - Polling for notifications...
2025-03-25 14:47:09,154 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910407 with data: None
2025-03-25 14:47:09,155 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:09,169 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910407 HTTP/1.1" 200 21
2025-03-25 14:47:09,169 - DEBUG - Received response: {
  "update": -442
}

2025-03-25 14:47:14,175 - DEBUG - Polling for notifications...
2025-03-25 14:47:14,187 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910407 with data: None
2025-03-25 14:47:14,188 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:14,201 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910407 HTTP/1.1" 200 21
2025-03-25 14:47:14,202 - DEBUG - Received response: {
  "update": -442
}

2025-03-25 14:47:16,956 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 14:47:16,957 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:16,961 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 14:47:16,972 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 14:47:16,972 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 14:47:16,981 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:47:16,981 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:16,995 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:47:16,996 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:47:17,015 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:47:17,015 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:17,030 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:47:17,030 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:47:17,048 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:47:17,049 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:17,063 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:47:17,063 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:47:19,206 - DEBUG - Polling for notifications...
2025-03-25 14:47:19,218 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910437 with data: None
2025-03-25 14:47:19,219 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:19,233 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910437 HTTP/1.1" 422 45
2025-03-25 14:47:19,234 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:47:19,234 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,851 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 14:48:13,852 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:13,856 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 422 45
2025-03-25 14:48:13,896 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,897 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,908 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:13,909 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:13,923 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 422 45
2025-03-25 14:48:13,923 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,923 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,935 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:13,936 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:13,949 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 422 45
2025-03-25 14:48:13,949 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,949 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,959 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:13,960 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:13,973 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 422 45
2025-03-25 14:48:13,973 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,973 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:46,129 - INFO - Application started.
2025-03-25 14:48:46,129 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 14:48:46,129 - INFO - Attempting to log in user: test
2025-03-25 14:48:46,132 - DEBUG - Loading KWallet
2025-03-25 14:48:46,132 - DEBUG - Loading SecretService
2025-03-25 14:48:46,141 - DEBUG - Loading Windows
2025-03-25 14:48:46,141 - DEBUG - Loading chainer
2025-03-25 14:48:46,141 - DEBUG - Loading libsecret
2025-03-25 14:48:46,142 - DEBUG - Loading macOS
2025-03-25 14:48:46,186 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 14:48:46,187 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:46,191 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 14:48:46,201 - DEBUG - Received response
2025-03-25 14:48:46,215 - INFO - User test logged in successfully.
2025-03-25 14:48:46,215 - INFO - Starting polling for notifications.
2025-03-25 14:48:46,215 - DEBUG - Polling for notifications...
2025-03-25 14:48:46,226 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910526 with data: None
2025-03-25 14:48:46,227 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:46,240 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910526 HTTP/1.1" 200 20
2025-03-25 14:48:46,241 - DEBUG - Received response: {
  "update": -88
}

2025-03-25 14:48:46,366 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:46,367 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:46,383 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:48:46,384 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:48:51,246 - DEBUG - Polling for notifications...
2025-03-25 14:48:51,259 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910526 with data: None
2025-03-25 14:48:51,260 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:51,274 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910526 HTTP/1.1" 200 20
2025-03-25 14:48:51,274 - DEBUG - Received response: {
  "update": -88
}

2025-03-25 14:48:53,269 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 14:48:53,270 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:53,274 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 14:48:53,284 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 14:48:53,284 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 14:48:53,294 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:53,295 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:53,309 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:48:53,309 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:48:53,328 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:53,329 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:53,343 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:48:53,343 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:48:53,361 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:53,362 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:53,376 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:48:53,376 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:48:56,278 - DEBUG - Polling for notifications...
2025-03-25 14:48:56,290 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910533 with data: None
2025-03-25 14:48:56,291 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:56,306 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910533 HTTP/1.1" 422 45
2025-03-25 14:48:56,306 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:56,306 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:56,703 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-03-25 14:48:56,704 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:56,718 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 422 45
2025-03-25 14:48:56,718 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:56,718 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:58,201 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-03-25 14:48:58,202 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:58,215 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 422 45
2025-03-25 14:48:58,216 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:58,216 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:58,627 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-03-25 14:48:58,628 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:58,642 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 422 45
2025-03-25 14:48:58,642 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:58,642 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:49:27,764 - INFO - Application started.
2025-03-25 14:49:27,764 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 14:49:27,765 - INFO - Attempting to log in user: test
2025-03-25 14:49:27,768 - DEBUG - Loading KWallet
2025-03-25 14:49:27,768 - DEBUG - Loading SecretService
2025-03-25 14:49:27,776 - DEBUG - Loading Windows
2025-03-25 14:49:27,777 - DEBUG - Loading chainer
2025-03-25 14:49:27,777 - DEBUG - Loading libsecret
2025-03-25 14:49:27,777 - DEBUG - Loading macOS
2025-03-25 14:49:27,822 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 14:49:27,823 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:27,828 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 14:49:27,838 - DEBUG - Received response
2025-03-25 14:49:27,851 - INFO - User test logged in successfully.
2025-03-25 14:49:27,851 - INFO - Starting polling for notifications.
2025-03-25 14:49:27,851 - DEBUG - Polling for notifications...
2025-03-25 14:49:27,862 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910568 with data: None
2025-03-25 14:49:27,863 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:27,876 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910568 HTTP/1.1" 200 20
2025-03-25 14:49:27,877 - DEBUG - Received response: {
  "update": -11
}

2025-03-25 14:49:27,998 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:49:27,999 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:28,015 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:49:28,016 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:49:28,805 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-03-25 14:49:28,806 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:28,822 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-03-25 14:49:28,822 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 14:49:32,881 - DEBUG - Polling for notifications...
2025-03-25 14:49:32,893 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910568 with data: None
2025-03-25 14:49:32,894 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:32,908 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910568 HTTP/1.1" 200 20
2025-03-25 14:49:32,908 - DEBUG - Received response: {
  "update": -11
}

2025-03-25 14:49:34,294 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-03-25 14:49:34,294 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:34,303 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-03-25 14:49:34,344 - DEBUG - Received response: {
  "datetime": "Tue, 25 Mar 2025 14:49:34 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-03-25 14:49:37,581 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-03-25 14:49:37,582 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:37,596 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-03-25 14:49:37,597 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 14:49:37,914 - DEBUG - Polling for notifications...
2025-03-25 14:49:37,926 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910568 with data: None
2025-03-25 14:49:37,927 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:37,941 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910568 HTTP/1.1" 200 20
2025-03-25 14:49:37,941 - DEBUG - Received response: {
  "update": -11
}

2025-03-25 14:49:42,946 - DEBUG - Polling for notifications...
2025-03-25 14:49:42,959 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910568 with data: None
2025-03-25 14:49:42,959 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:42,973 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910568 HTTP/1.1" 200 20
2025-03-25 14:49:42,974 - DEBUG - Received response: {
  "update": -11
}

2025-03-25 14:49:44,904 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-03-25 14:49:44,904 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:44,919 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-03-25 14:49:44,919 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 14:49:47,979 - DEBUG - Polling for notifications...
2025-03-25 14:49:47,992 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910568 with data: None
2025-03-25 14:49:47,993 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:48,006 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910568 HTTP/1.1" 200 20
2025-03-25 14:49:48,007 - DEBUG - Received response: {
  "update": -11
}

2025-03-25 14:49:53,012 - DEBUG - Polling for notifications...
2025-03-25 14:49:53,025 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910568 with data: None
2025-03-25 14:49:53,026 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:53,039 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910568 HTTP/1.1" 200 20
2025-03-25 14:49:53,040 - DEBUG - Received response: {
  "update": -11
}

2025-03-25 14:59:50,926 - INFO - Application started.
2025-03-25 14:59:50,926 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 14:59:50,926 - INFO - Attempting to log in user: test
2025-03-25 14:59:50,929 - DEBUG - Loading KWallet
2025-03-25 14:59:50,929 - DEBUG - Loading SecretService
2025-03-25 14:59:50,937 - DEBUG - Loading Windows
2025-03-25 14:59:50,938 - DEBUG - Loading chainer
2025-03-25 14:59:50,938 - DEBUG - Loading libsecret
2025-03-25 14:59:50,938 - DEBUG - Loading macOS
2025-03-25 14:59:50,983 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 14:59:50,984 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:59:50,989 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 14:59:50,999 - DEBUG - Received response
2025-03-25 14:59:51,012 - INFO - User test logged in successfully.
2025-03-25 14:59:51,012 - INFO - Starting polling for notifications.
2025-03-25 14:59:51,013 - DEBUG - Polling for notifications...
2025-03-25 14:59:51,022 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911191 with data: None
2025-03-25 14:59:51,023 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:59:51,037 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911191 HTTP/1.1" 200 19
2025-03-25 14:59:51,038 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 14:59:51,173 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:59:51,174 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:59:51,190 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:59:51,191 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:59:56,043 - DEBUG - Polling for notifications...
2025-03-25 14:59:56,055 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911191 with data: None
2025-03-25 14:59:56,056 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:59:56,070 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911191 HTTP/1.1" 200 19
2025-03-25 14:59:56,070 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:00:01,075 - DEBUG - Polling for notifications...
2025-03-25 15:00:01,087 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911191 with data: None
2025-03-25 15:00:01,088 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:01,101 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911191 HTTP/1.1" 200 19
2025-03-25 15:00:01,102 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:00:06,107 - DEBUG - Polling for notifications...
2025-03-25 15:00:06,120 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911191 with data: None
2025-03-25 15:00:06,121 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:06,135 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911191 HTTP/1.1" 200 19
2025-03-25 15:00:06,135 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:00:11,141 - DEBUG - Polling for notifications...
2025-03-25 15:00:11,153 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911191 with data: None
2025-03-25 15:00:11,154 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:11,167 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911191 HTTP/1.1" 200 19
2025-03-25 15:00:11,168 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:00:16,193 - DEBUG - Polling for notifications...
2025-03-25 15:00:16,206 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911191 with data: None
2025-03-25 15:00:16,206 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:16,220 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911191 HTTP/1.1" 200 19
2025-03-25 15:00:16,221 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:00:20,360 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 15:00:20,361 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:20,365 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 15:00:20,375 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 15:00:20,375 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 15:00:20,385 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:00:20,386 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:20,400 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:00:20,401 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:00:20,420 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:00:20,420 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:20,434 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:00:20,434 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:00:20,452 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:00:20,452 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:20,466 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:00:20,467 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:00:21,246 - DEBUG - Polling for notifications...
2025-03-25 15:00:21,258 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911220 with data: None
2025-03-25 15:00:21,259 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:21,274 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911220 HTTP/1.1" 422 45
2025-03-25 15:00:21,274 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 15:00:21,274 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 15:03:29,937 - INFO - Application started.
2025-03-25 15:03:29,937 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:03:29,937 - INFO - Attempting to log in user: test
2025-03-25 15:03:29,940 - DEBUG - Loading KWallet
2025-03-25 15:03:29,940 - DEBUG - Loading SecretService
2025-03-25 15:03:29,949 - DEBUG - Loading Windows
2025-03-25 15:03:29,950 - DEBUG - Loading chainer
2025-03-25 15:03:29,950 - DEBUG - Loading libsecret
2025-03-25 15:03:29,950 - DEBUG - Loading macOS
2025-03-25 15:03:29,995 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:03:29,996 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:30,000 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 15:03:30,010 - DEBUG - Received response
2025-03-25 15:03:30,023 - INFO - User test logged in successfully.
2025-03-25 15:03:30,023 - INFO - Starting polling for notifications.
2025-03-25 15:03:30,023 - DEBUG - Polling for notifications...
2025-03-25 15:03:30,033 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911410 with data: None
2025-03-25 15:03:30,034 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:30,047 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911410 HTTP/1.1" 200 19
2025-03-25 15:03:30,048 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:03:30,180 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:03:30,180 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:30,197 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:03:30,197 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:03:35,053 - DEBUG - Polling for notifications...
2025-03-25 15:03:35,065 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911410 with data: None
2025-03-25 15:03:35,066 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:35,080 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911410 HTTP/1.1" 200 19
2025-03-25 15:03:35,080 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:03:37,551 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 15:03:37,552 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:37,556 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 15:03:37,566 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 15:03:37,566 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 15:03:37,576 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:03:37,576 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:37,590 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:03:37,590 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:03:37,611 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:03:37,612 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:37,626 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:03:37,626 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:03:37,643 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:03:37,644 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:37,658 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:03:37,658 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:03:40,085 - DEBUG - Polling for notifications...
2025-03-25 15:03:40,099 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911418 with data: None
2025-03-25 15:03:40,100 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:40,114 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911418 HTTP/1.1" 200 20
2025-03-25 15:03:40,115 - DEBUG - Received response: {
  "update": -16
}

2025-03-25 15:03:45,120 - DEBUG - Polling for notifications...
2025-03-25 15:03:45,132 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911418 with data: None
2025-03-25 15:03:45,133 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:45,147 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911418 HTTP/1.1" 200 20
2025-03-25 15:03:45,147 - DEBUG - Received response: {
  "update": -16
}

2025-03-25 15:03:50,152 - DEBUG - Polling for notifications...
2025-03-25 15:03:50,165 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911418 with data: None
2025-03-25 15:03:50,166 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:50,167 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /notification/1742911418 (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7a7b81238370>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-03-25 15:04:39,771 - INFO - Application started.
2025-03-25 15:04:39,771 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:04:39,772 - INFO - Attempting to log in user: test
2025-03-25 15:04:39,774 - DEBUG - Loading KWallet
2025-03-25 15:04:39,775 - DEBUG - Loading SecretService
2025-03-25 15:04:39,784 - DEBUG - Loading Windows
2025-03-25 15:04:39,784 - DEBUG - Loading chainer
2025-03-25 15:04:39,784 - DEBUG - Loading libsecret
2025-03-25 15:04:39,785 - DEBUG - Loading macOS
2025-03-25 15:04:39,829 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:04:39,830 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:04:39,834 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 401 35
2025-03-25 15:04:39,845 - DEBUG - Received response
2025-03-25 15:04:39,845 - ERROR - Error 401: {
  "msg": "Error, login failed"
}

2025-03-25 15:04:53,263 - INFO - Application started.
2025-03-25 15:04:53,263 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:04:53,263 - INFO - Attempting to log in user: test
2025-03-25 15:04:53,266 - DEBUG - Loading KWallet
2025-03-25 15:04:53,266 - DEBUG - Loading SecretService
2025-03-25 15:04:53,275 - DEBUG - Loading Windows
2025-03-25 15:04:53,275 - DEBUG - Loading chainer
2025-03-25 15:04:53,275 - DEBUG - Loading libsecret
2025-03-25 15:04:53,276 - DEBUG - Loading macOS
2025-03-25 15:04:53,320 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:04:53,322 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:04:53,325 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 15:04:53,335 - DEBUG - Received response
2025-03-25 15:04:53,349 - INFO - User test logged in successfully.
2025-03-25 15:04:53,349 - INFO - Starting polling for notifications.
2025-03-25 15:04:53,349 - DEBUG - Polling for notifications...
2025-03-25 15:04:53,359 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911493 with data: None
2025-03-25 15:04:53,360 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:04:53,373 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911493 HTTP/1.1" 200 20
2025-03-25 15:04:53,374 - DEBUG - Received response: {
  "update": -51
}

2025-03-25 15:04:53,505 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:04:53,506 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:04:53,522 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:04:53,522 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:04:58,379 - DEBUG - Polling for notifications...
2025-03-25 15:04:58,392 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911494 with data: None
2025-03-25 15:04:58,393 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:04:58,407 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911494 HTTP/1.1" 200 20
2025-03-25 15:04:58,407 - DEBUG - Received response: {
  "update": -52
}

2025-03-25 15:05:00,871 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 15:05:00,872 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:05:00,875 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 15:05:00,886 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 15:05:00,886 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 15:05:00,896 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:05:00,896 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:05:00,910 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:05:00,911 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:05:00,931 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:05:00,932 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:05:00,946 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:05:00,946 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:05:00,964 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:05:00,965 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:05:00,979 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:05:00,979 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:05:03,411 - DEBUG - Polling for notifications...
2025-03-25 15:05:03,421 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911501 with data: None
2025-03-25 15:05:03,422 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:05:03,436 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911501 HTTP/1.1" 200 20
2025-03-25 15:05:03,436 - DEBUG - Received response: {
  "update": -59
}

2025-03-25 15:05:08,441 - DEBUG - Polling for notifications...
2025-03-25 15:05:08,454 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911501 with data: None
2025-03-25 15:05:08,455 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:05:08,469 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911501 HTTP/1.1" 200 20
2025-03-25 15:05:08,469 - DEBUG - Received response: {
  "update": -59
}

2025-03-25 15:06:34,672 - INFO - Application started.
2025-03-25 15:06:34,672 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:06:34,672 - INFO - Attempting to log in user: test
2025-03-25 15:06:34,675 - DEBUG - Loading KWallet
2025-03-25 15:06:34,676 - DEBUG - Loading SecretService
2025-03-25 15:06:34,684 - DEBUG - Loading Windows
2025-03-25 15:06:34,685 - DEBUG - Loading chainer
2025-03-25 15:06:34,685 - DEBUG - Loading libsecret
2025-03-25 15:06:34,685 - DEBUG - Loading macOS
2025-03-25 15:06:34,729 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:06:34,730 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:34,734 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 15:06:34,744 - DEBUG - Received response
2025-03-25 15:06:34,758 - INFO - User test logged in successfully.
2025-03-25 15:06:34,758 - INFO - Starting polling for notifications.
2025-03-25 15:06:34,758 - DEBUG - Polling for notifications...
2025-03-25 15:06:34,768 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911595 with data: None
2025-03-25 15:06:34,769 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:34,783 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911595 HTTP/1.1" 200 19
2025-03-25 15:06:34,783 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:06:34,914 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:06:34,914 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:34,930 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:06:34,931 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:06:37,588 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-03-25 15:06:37,589 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:37,605 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-03-25 15:06:37,605 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 15:06:38,802 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-03-25 15:06:38,803 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:38,813 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-03-25 15:06:38,853 - DEBUG - Received response: {
  "datetime": "Tue, 25 Mar 2025 15:06:38 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-03-25 15:06:39,788 - DEBUG - Polling for notifications...
2025-03-25 15:06:39,801 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911595 with data: None
2025-03-25 15:06:39,802 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:39,816 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911595 HTTP/1.1" 200 19
2025-03-25 15:06:39,816 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:06:41,930 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-03-25 15:06:41,930 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:41,945 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-03-25 15:06:41,945 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 15:06:42,540 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-03-25 15:06:42,541 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:42,556 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-03-25 15:06:42,556 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 15:06:44,821 - DEBUG - Polling for notifications...
2025-03-25 15:06:44,833 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911595 with data: None
2025-03-25 15:06:44,834 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:44,848 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911595 HTTP/1.1" 200 19
2025-03-25 15:06:44,849 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:06:49,854 - DEBUG - Polling for notifications...
2025-03-25 15:06:49,866 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911595 with data: None
2025-03-25 15:06:49,867 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:49,881 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911595 HTTP/1.1" 200 19
2025-03-25 15:06:49,881 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:06:51,157 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 15:06:51,158 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:51,162 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 15:06:51,172 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 15:06:51,172 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 15:06:51,182 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:06:51,183 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:51,197 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:06:51,197 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:06:51,216 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:06:51,217 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:51,231 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:06:51,231 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:06:51,249 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:06:51,249 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:51,264 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:06:51,264 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:06:54,887 - DEBUG - Polling for notifications...
2025-03-25 15:06:54,900 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911611 with data: None
2025-03-25 15:06:54,900 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:54,914 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911611 HTTP/1.1" 200 20
2025-03-25 15:06:54,915 - DEBUG - Received response: {
  "update": -24
}

2025-03-25 15:08:28,120 - INFO - Application started.
2025-03-25 15:08:28,120 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:08:28,120 - INFO - Attempting to log in user: test
2025-03-25 15:08:28,124 - DEBUG - Loading KWallet
2025-03-25 15:08:28,124 - DEBUG - Loading SecretService
2025-03-25 15:08:28,132 - DEBUG - Loading Windows
2025-03-25 15:08:28,133 - DEBUG - Loading chainer
2025-03-25 15:08:28,133 - DEBUG - Loading libsecret
2025-03-25 15:08:28,133 - DEBUG - Loading macOS
2025-03-25 15:08:28,179 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:08:28,180 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:28,184 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 15:08:28,194 - DEBUG - Received response
2025-03-25 15:08:28,208 - INFO - User test logged in successfully.
2025-03-25 15:08:28,208 - INFO - Starting polling for notifications.
2025-03-25 15:08:28,208 - DEBUG - Polling for notifications...
2025-03-25 15:08:28,218 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911708 with data: None
2025-03-25 15:08:28,219 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:28,233 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911708 HTTP/1.1" 200 19
2025-03-25 15:08:28,233 - DEBUG - Received response: {
  "update": -9
}

2025-03-25 15:08:28,360 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:08:28,361 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:28,377 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:08:28,377 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:08:33,238 - DEBUG - Polling for notifications...
2025-03-25 15:08:33,251 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911708 with data: None
2025-03-25 15:08:33,252 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:33,266 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911708 HTTP/1.1" 200 19
2025-03-25 15:08:33,267 - DEBUG - Received response: {
  "update": -9
}

2025-03-25 15:08:36,066 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file.py'}
2025-03-25 15:08:36,067 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:36,071 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 15:08:36,082 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 15:08:36,082 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 15:08:36,092 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:08:36,092 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:36,107 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:08:36,107 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:08:36,126 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:08:36,127 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:36,141 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:08:36,141 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:08:36,158 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:08:36,159 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:36,173 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:08:36,174 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:08:38,272 - DEBUG - Polling for notifications...
2025-03-25 15:08:38,284 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911716 with data: None
2025-03-25 15:08:38,284 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:38,298 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911716 HTTP/1.1" 200 20
2025-03-25 15:08:38,299 - DEBUG - Received response: {
  "update": -17
}

2025-03-25 15:14:19,052 - INFO - Application started.
2025-03-25 15:14:19,052 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:14:19,052 - INFO - Attempting to log in user: test
2025-03-25 15:14:19,056 - DEBUG - Loading KWallet
2025-03-25 15:14:19,056 - DEBUG - Loading SecretService
2025-03-25 15:14:19,065 - DEBUG - Loading Windows
2025-03-25 15:14:19,065 - DEBUG - Loading chainer
2025-03-25 15:14:19,066 - DEBUG - Loading libsecret
2025-03-25 15:14:19,066 - DEBUG - Loading macOS
2025-03-25 15:14:19,111 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:14:19,112 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:19,116 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 15:14:19,127 - DEBUG - Received response
2025-03-25 15:14:19,141 - INFO - User test logged in successfully.
2025-03-25 15:14:19,141 - INFO - Starting polling for notifications.
2025-03-25 15:14:19,141 - DEBUG - Polling for notifications...
2025-03-25 15:14:19,151 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742912059 with data: None
2025-03-25 15:14:19,152 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:19,166 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742912059 HTTP/1.1" 200 19
2025-03-25 15:14:19,166 - DEBUG - Received response: {
  "update": -9
}

2025-03-25 15:14:19,297 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:14:19,298 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:19,314 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:14:19,314 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:14:24,171 - DEBUG - Polling for notifications...
2025-03-25 15:14:24,184 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742912059 with data: None
2025-03-25 15:14:24,185 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:24,199 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742912059 HTTP/1.1" 200 19
2025-03-25 15:14:24,200 - DEBUG - Received response: {
  "update": -9
}

2025-03-25 15:14:25,778 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file.py'}
2025-03-25 15:14:25,779 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:25,783 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 15:14:25,793 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 15:14:25,793 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 15:14:25,803 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:14:25,803 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:25,818 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:14:25,818 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:14:25,837 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:14:25,838 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:25,853 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:14:25,853 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:14:25,871 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:14:25,871 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:25,885 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:14:25,886 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:15:55,071 - INFO - Application started.
2025-03-25 15:15:55,071 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:15:55,071 - INFO - Attempting to log in user: test
2025-03-25 15:15:55,074 - DEBUG - Loading KWallet
2025-03-25 15:15:55,075 - DEBUG - Loading SecretService
2025-03-25 15:15:55,083 - DEBUG - Loading Windows
2025-03-25 15:15:55,084 - DEBUG - Loading chainer
2025-03-25 15:15:55,084 - DEBUG - Loading libsecret
2025-03-25 15:15:55,084 - DEBUG - Loading macOS
2025-03-25 15:15:55,131 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:15:55,132 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:15:55,136 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 15:15:55,147 - DEBUG - Received response
2025-03-25 15:15:55,160 - INFO - User test logged in successfully.
2025-03-25 15:15:55,161 - INFO - Starting polling for notifications.
2025-03-25 15:15:55,161 - DEBUG - Polling for notifications...
2025-03-25 15:15:55,171 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742912155 with data: None
2025-03-25 15:15:55,172 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:15:55,186 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742912155 HTTP/1.1" 200 19
2025-03-25 15:15:55,187 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:15:55,322 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:15:55,322 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:15:55,339 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:15:55,339 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:16:00,192 - DEBUG - Polling for notifications...
2025-03-25 15:16:00,204 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742912155 with data: None
2025-03-25 15:16:00,205 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:00,219 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742912155 HTTP/1.1" 200 19
2025-03-25 15:16:00,219 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:16:01,898 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file.py'}
2025-03-25 15:16:01,899 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:01,906 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 500 18730
2025-03-25 15:16:01,916 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;tempfile&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "dl8Kh4iqh3O3gm3Rn5tC";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;tempfile&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137256206942384">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137256197040144">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137256197040256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137256197040368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137256197040480">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137256197040592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137256197040704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137256197128928">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">155</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>data = sanitize_dict(data)</pre>
<pre class="line before"><span class="ws">    </span>if not data or &#39;name&#39; not in data:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#34;error&#34;: &#34;Invalid record&#34;}), 404</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])</pre>
<pre class="line after"><span class="ws">    </span>if created:</pre>
<pre class="line after"><span class="ws">        </span># Create a new plugin instance</pre>
<pre class="line after"><span class="ws">        </span>new_plugin = PlugTable(</pre>
<pre class="line after"><span class="ws">            </span>name=data[&#39;name&#39;],</pre>
<pre class="line after"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre></div>
</div>

<li><div class="frame" id="frame-137256197133072">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">202</em>,
      in <code class="function">creaPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.sh&#39;):</pre>
<pre class="line before"><span class="ws">        </span>return creaPluginSh(nome_file, contenuto)</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.py&#39;):</pre>
<pre class="line current"><span class="ws">        </span>return creaPluginPy(nome_file, contenuto)</pre>
<pre class="line after"><span class="ws">    </span>print(&#34;Il tipo di file non e&#39; supportato&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137256197138336">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">140</em>,
      in <code class="function">creaPluginPy</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Add required import</pre>
<pre class="line before"><span class="ws">    </span>full_content = f&#34;from core.interfaccia_plugin import Interfaccia_Plugin\n\n{contenuto}&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Use temporary directory for validation</pre>
<pre class="line current"><span class="ws">    </span>with tempfile.TemporaryDirectory() as temp_dir:</pre>
<pre class="line after"><span class="ws">        </span>temp_file = Path(temp_dir) / nome_file</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span># Write to temporary file</pre>
<pre class="line after"><span class="ws">            </span>temp_file.write_text(full_content, encoding=&#34;utf-8&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;tempfile&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 155, in new_plugin
    created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 202, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 140, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name &#39;tempfile&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 155, in new_plugin
    created = creaPlugin(data['name'], data['content'])
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 202, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 140, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name 'tempfile' is not defined


-->

2025-03-25 15:16:01,917 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;tempfile&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "dl8Kh4iqh3O3gm3Rn5tC";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;tempfile&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137256206942384">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137256197040144">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137256197040256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137256197040368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137256197040480">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137256197040592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137256197040704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137256197128928">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">155</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>data = sanitize_dict(data)</pre>
<pre class="line before"><span class="ws">    </span>if not data or &#39;name&#39; not in data:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#34;error&#34;: &#34;Invalid record&#34;}), 404</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])</pre>
<pre class="line after"><span class="ws">    </span>if created:</pre>
<pre class="line after"><span class="ws">        </span># Create a new plugin instance</pre>
<pre class="line after"><span class="ws">        </span>new_plugin = PlugTable(</pre>
<pre class="line after"><span class="ws">            </span>name=data[&#39;name&#39;],</pre>
<pre class="line after"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre></div>
</div>

<li><div class="frame" id="frame-137256197133072">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">202</em>,
      in <code class="function">creaPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.sh&#39;):</pre>
<pre class="line before"><span class="ws">        </span>return creaPluginSh(nome_file, contenuto)</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.py&#39;):</pre>
<pre class="line current"><span class="ws">        </span>return creaPluginPy(nome_file, contenuto)</pre>
<pre class="line after"><span class="ws">    </span>print(&#34;Il tipo di file non e&#39; supportato&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137256197138336">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">140</em>,
      in <code class="function">creaPluginPy</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Add required import</pre>
<pre class="line before"><span class="ws">    </span>full_content = f&#34;from core.interfaccia_plugin import Interfaccia_Plugin\n\n{contenuto}&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Use temporary directory for validation</pre>
<pre class="line current"><span class="ws">    </span>with tempfile.TemporaryDirectory() as temp_dir:</pre>
<pre class="line after"><span class="ws">        </span>temp_file = Path(temp_dir) / nome_file</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span># Write to temporary file</pre>
<pre class="line after"><span class="ws">            </span>temp_file.write_text(full_content, encoding=&#34;utf-8&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;tempfile&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 155, in new_plugin
    created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 202, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 140, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name &#39;tempfile&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 155, in new_plugin
    created = creaPlugin(data['name'], data['content'])
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 202, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 140, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name 'tempfile' is not defined


-->

2025-03-25 15:16:01,927 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:16:01,928 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:01,942 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:16:01,943 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:16:01,963 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:16:01,964 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:01,978 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:16:01,978 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:16:01,996 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:16:01,997 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:02,011 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:16:02,011 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:16:05,224 - DEBUG - Polling for notifications...
2025-03-25 15:16:05,236 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742912162 with data: None
2025-03-25 15:16:05,237 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:05,251 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742912162 HTTP/1.1" 200 20
2025-03-25 15:16:05,251 - DEBUG - Received response: {
  "update": -15
}

2025-03-25 15:16:09,283 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-03-25 15:16:09,284 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:09,300 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-03-25 15:16:09,300 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 15:16:10,256 - DEBUG - Polling for notifications...
2025-03-25 15:16:10,269 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742912162 with data: None
2025-03-25 15:16:10,270 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:10,283 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742912162 HTTP/1.1" 200 20
2025-03-25 15:16:10,284 - DEBUG - Received response: {
  "update": -15
}

2025-03-25 15:16:10,527 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-03-25 15:16:10,528 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:10,537 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-03-25 15:16:10,578 - DEBUG - Received response: {
  "datetime": "Tue, 25 Mar 2025 15:16:10 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-03-25 15:16:11,796 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-03-25 15:16:11,797 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:11,812 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-03-25 15:16:11,812 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 15:16:12,247 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-03-25 15:16:12,248 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:12,263 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-03-25 15:16:12,263 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:37:43,679 - INFO - Application started.
2025-04-11 15:37:43,680 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 15:37:43,680 - INFO - Attempting to log in user: test
2025-04-11 15:37:43,686 - DEBUG - Loading KWallet
2025-04-11 15:37:43,686 - DEBUG - Loading SecretService
2025-04-11 15:37:43,728 - DEBUG - Loading Windows
2025-04-11 15:37:43,729 - DEBUG - Loading chainer
2025-04-11 15:37:43,729 - DEBUG - Loading libsecret
2025-04-11 15:37:43,729 - DEBUG - Loading macOS
2025-04-11 15:37:43,798 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 15:37:43,800 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:37:43,805 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 15:37:43,815 - DEBUG - Received response
2025-04-11 15:37:43,828 - INFO - User test logged in successfully.
2025-04-11 15:37:43,828 - INFO - Starting polling for notifications.
2025-04-11 15:37:43,828 - DEBUG - Polling for notifications...
2025-04-11 15:37:43,838 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744382264 with data: None
2025-04-11 15:37:43,838 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:37:43,852 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744382264 HTTP/1.1" 200 19
2025-04-11 15:37:43,853 - DEBUG - Received response: {
  "update": -9
}

2025-04-11 15:37:43,980 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 15:37:43,980 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:37:43,997 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 15:37:43,997 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 15:37:45,024 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 15:37:45,025 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:37:45,041 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 15:37:45,041 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:37:48,858 - DEBUG - Polling for notifications...
2025-04-11 15:37:48,871 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744382264 with data: None
2025-04-11 15:37:48,872 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:37:48,886 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744382264 HTTP/1.1" 200 19
2025-04-11 15:37:48,886 - DEBUG - Received response: {
  "update": -9
}

2025-04-11 15:50:23,796 - INFO - Application started.
2025-04-11 15:50:23,796 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 15:50:23,796 - INFO - Attempting to log in user: test
2025-04-11 15:50:23,799 - DEBUG - Loading KWallet
2025-04-11 15:50:23,799 - DEBUG - Loading SecretService
2025-04-11 15:50:23,808 - DEBUG - Loading Windows
2025-04-11 15:50:23,809 - DEBUG - Loading chainer
2025-04-11 15:50:23,809 - DEBUG - Loading libsecret
2025-04-11 15:50:23,809 - DEBUG - Loading macOS
2025-04-11 15:50:23,853 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 15:50:23,855 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:50:23,859 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 15:50:23,869 - DEBUG - Received response
2025-04-11 15:50:23,882 - INFO - User test logged in successfully.
2025-04-11 15:50:23,882 - INFO - Starting polling for notifications.
2025-04-11 15:50:23,882 - DEBUG - Polling for notifications...
2025-04-11 15:50:23,893 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383024 with data: None
2025-04-11 15:50:23,894 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:00,868 - INFO - Application started.
2025-04-11 15:51:00,869 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 15:51:00,869 - INFO - Attempting to log in user: test
2025-04-11 15:51:00,872 - DEBUG - Loading KWallet
2025-04-11 15:51:00,872 - DEBUG - Loading SecretService
2025-04-11 15:51:00,881 - DEBUG - Loading Windows
2025-04-11 15:51:00,881 - DEBUG - Loading chainer
2025-04-11 15:51:00,881 - DEBUG - Loading libsecret
2025-04-11 15:51:00,881 - DEBUG - Loading macOS
2025-04-11 15:51:00,926 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 15:51:00,927 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:00,931 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 15:51:00,941 - DEBUG - Received response
2025-04-11 15:51:00,955 - INFO - User test logged in successfully.
2025-04-11 15:51:00,955 - INFO - Starting polling for notifications.
2025-04-11 15:51:00,955 - DEBUG - Polling for notifications...
2025-04-11 15:51:00,965 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383061 with data: None
2025-04-11 15:51:00,966 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:37,412 - INFO - Application started.
2025-04-11 15:51:37,412 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 15:51:37,412 - INFO - Attempting to log in user: test
2025-04-11 15:51:37,415 - DEBUG - Loading KWallet
2025-04-11 15:51:37,416 - DEBUG - Loading SecretService
2025-04-11 15:51:37,424 - DEBUG - Loading Windows
2025-04-11 15:51:37,425 - DEBUG - Loading chainer
2025-04-11 15:51:37,425 - DEBUG - Loading libsecret
2025-04-11 15:51:37,425 - DEBUG - Loading macOS
2025-04-11 15:51:37,469 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 15:51:37,471 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:37,474 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 15:51:37,484 - DEBUG - Received response
2025-04-11 15:51:37,497 - INFO - User test logged in successfully.
2025-04-11 15:51:37,497 - INFO - Starting polling for notifications.
2025-04-11 15:51:37,498 - DEBUG - Polling for notifications...
2025-04-11 15:51:37,507 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383097 with data: None
2025-04-11 15:51:37,508 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:37,522 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383097 HTTP/1.1" 200 21
2025-04-11 15:51:37,522 - DEBUG - Received response: {
  "update": -479
}

2025-04-11 15:51:37,657 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 15:51:37,657 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:37,674 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 15:51:37,674 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 15:51:39,871 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 15:51:39,872 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:39,888 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 15:51:39,888 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:51:41,004 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-11 15:51:41,005 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:41,014 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-04-11 15:51:41,054 - DEBUG - Received response: {
  "datetime": "Fri, 11 Apr 2025 15:51:41 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-04-11 15:51:42,527 - DEBUG - Polling for notifications...
2025-04-11 15:51:42,539 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383098 with data: None
2025-04-11 15:51:42,540 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:42,554 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383098 HTTP/1.1" 200 21
2025-04-11 15:51:42,555 - DEBUG - Received response: {
  "update": -480
}

2025-04-11 15:51:47,560 - DEBUG - Polling for notifications...
2025-04-11 15:51:47,573 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383098 with data: None
2025-04-11 15:51:47,574 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:47,585 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 15:51:47,586 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:47,589 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383098 HTTP/1.1" 200 21
2025-04-11 15:51:47,590 - DEBUG - Received response: {
  "update": -480
}

2025-04-11 15:51:47,600 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 15:51:47,600 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:51:52,595 - DEBUG - Polling for notifications...
2025-04-11 15:51:52,607 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383098 with data: None
2025-04-11 15:51:52,608 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:52,622 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383098 HTTP/1.1" 200 21
2025-04-11 15:51:52,623 - DEBUG - Received response: {
  "update": -480
}

2025-04-11 15:51:57,628 - DEBUG - Polling for notifications...
2025-04-11 15:51:57,641 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383098 with data: None
2025-04-11 15:51:57,642 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:51:57,656 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383098 HTTP/1.1" 200 21
2025-04-11 15:51:57,656 - DEBUG - Received response: {
  "update": -480
}

2025-04-11 15:52:27,482 - INFO - Application started.
2025-04-11 15:52:27,483 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 15:52:27,483 - INFO - Attempting to log in user: test
2025-04-11 15:52:27,486 - DEBUG - Loading KWallet
2025-04-11 15:52:27,486 - DEBUG - Loading SecretService
2025-04-11 15:52:27,495 - DEBUG - Loading Windows
2025-04-11 15:52:27,495 - DEBUG - Loading chainer
2025-04-11 15:52:27,495 - DEBUG - Loading libsecret
2025-04-11 15:52:27,496 - DEBUG - Loading macOS
2025-04-11 15:52:27,540 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 15:52:27,542 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:52:27,545 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 15:52:27,556 - DEBUG - Received response
2025-04-11 15:52:27,569 - INFO - User test logged in successfully.
2025-04-11 15:52:27,569 - INFO - Starting polling for notifications.
2025-04-11 15:52:27,569 - DEBUG - Polling for notifications...
2025-04-11 15:52:27,580 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383147 with data: None
2025-04-11 15:52:27,581 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:52:27,595 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383147 HTTP/1.1" 200 21
2025-04-11 15:52:27,596 - DEBUG - Received response: {
  "update": -529
}

2025-04-11 15:52:27,730 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 15:52:27,731 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:52:27,746 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 15:52:27,746 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 15:52:28,861 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 15:52:28,862 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:52:28,877 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 15:52:28,877 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:52:32,601 - DEBUG - Polling for notifications...
2025-04-11 15:52:32,613 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383148 with data: None
2025-04-11 15:52:32,614 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:52:32,628 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383148 HTTP/1.1" 200 21
2025-04-11 15:52:32,628 - DEBUG - Received response: {
  "update": -530
}

2025-04-11 15:54:03,954 - INFO - Application started.
2025-04-11 15:54:03,954 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 15:54:03,954 - INFO - Attempting to log in user: test
2025-04-11 15:54:03,957 - DEBUG - Loading KWallet
2025-04-11 15:54:03,958 - DEBUG - Loading SecretService
2025-04-11 15:54:03,966 - DEBUG - Loading Windows
2025-04-11 15:54:03,967 - DEBUG - Loading chainer
2025-04-11 15:54:03,967 - DEBUG - Loading libsecret
2025-04-11 15:54:03,967 - DEBUG - Loading macOS
2025-04-11 15:54:04,011 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 15:54:04,012 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:54:04,016 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 15:54:04,026 - DEBUG - Received response
2025-04-11 15:54:04,039 - INFO - User test logged in successfully.
2025-04-11 15:54:04,039 - INFO - Starting polling for notifications.
2025-04-11 15:54:04,039 - DEBUG - Polling for notifications...
2025-04-11 15:54:04,049 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383244 with data: None
2025-04-11 15:54:04,050 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:54:04,063 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383244 HTTP/1.1" 200 21
2025-04-11 15:54:04,064 - DEBUG - Received response: {
  "update": -626
}

2025-04-11 15:54:04,194 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 15:54:04,195 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:54:04,209 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 15:54:04,209 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 15:54:07,002 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 15:54:07,003 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:54:07,018 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 15:54:07,018 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:54:09,069 - DEBUG - Polling for notifications...
2025-04-11 15:54:09,082 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383244 with data: None
2025-04-11 15:54:09,082 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:54:09,096 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383244 HTTP/1.1" 200 21
2025-04-11 15:54:09,097 - DEBUG - Received response: {
  "update": -626
}

2025-04-11 15:55:57,405 - INFO - Application started.
2025-04-11 15:55:57,405 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 15:55:57,405 - INFO - Attempting to log in user: test
2025-04-11 15:55:57,408 - DEBUG - Loading KWallet
2025-04-11 15:55:57,408 - DEBUG - Loading SecretService
2025-04-11 15:55:57,417 - DEBUG - Loading Windows
2025-04-11 15:55:57,418 - DEBUG - Loading chainer
2025-04-11 15:55:57,418 - DEBUG - Loading libsecret
2025-04-11 15:55:57,418 - DEBUG - Loading macOS
2025-04-11 15:55:57,463 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 15:55:57,464 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:55:57,468 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 401 35
2025-04-11 15:55:57,478 - DEBUG - Received response
2025-04-11 15:55:57,478 - ERROR - Error 401: {
  "msg": "Error, login failed"
}

2025-04-11 15:56:03,262 - INFO - Application started.
2025-04-11 15:56:03,262 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 15:56:03,262 - INFO - Attempting to log in user: test
2025-04-11 15:56:03,265 - DEBUG - Loading KWallet
2025-04-11 15:56:03,265 - DEBUG - Loading SecretService
2025-04-11 15:56:03,274 - DEBUG - Loading Windows
2025-04-11 15:56:03,274 - DEBUG - Loading chainer
2025-04-11 15:56:03,274 - DEBUG - Loading libsecret
2025-04-11 15:56:03,275 - DEBUG - Loading macOS
2025-04-11 15:56:03,321 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 15:56:03,322 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:56:03,325 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 401 35
2025-04-11 15:56:03,336 - DEBUG - Received response
2025-04-11 15:56:03,336 - ERROR - Error 401: {
  "msg": "Error, login failed"
}

2025-04-11 15:56:10,346 - INFO - Application started.
2025-04-11 15:56:10,346 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 15:56:10,346 - INFO - Attempting to log in user: test
2025-04-11 15:56:10,349 - DEBUG - Loading KWallet
2025-04-11 15:56:10,350 - DEBUG - Loading SecretService
2025-04-11 15:56:10,359 - DEBUG - Loading Windows
2025-04-11 15:56:10,360 - DEBUG - Loading chainer
2025-04-11 15:56:10,360 - DEBUG - Loading libsecret
2025-04-11 15:56:10,360 - DEBUG - Loading macOS
2025-04-11 15:56:10,404 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 15:56:10,405 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:56:10,409 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 15:56:10,419 - DEBUG - Received response
2025-04-11 15:56:10,432 - INFO - User test logged in successfully.
2025-04-11 15:56:10,432 - INFO - Starting polling for notifications.
2025-04-11 15:56:10,432 - DEBUG - Polling for notifications...
2025-04-11 15:56:10,442 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383370 with data: None
2025-04-11 15:56:10,443 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:56:10,457 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383370 HTTP/1.1" 200 21
2025-04-11 15:56:10,457 - DEBUG - Received response: {
  "update": -752
}

2025-04-11 15:56:10,590 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 15:56:10,591 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:56:10,605 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 15:56:10,605 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 15:56:11,435 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 15:56:11,436 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:56:11,451 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 15:56:11,451 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:58:02,389 - INFO - Application started.
2025-04-11 15:58:02,389 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 15:58:02,389 - INFO - Attempting to log in user: test
2025-04-11 15:58:02,392 - DEBUG - Loading KWallet
2025-04-11 15:58:02,392 - DEBUG - Loading SecretService
2025-04-11 15:58:02,401 - DEBUG - Loading Windows
2025-04-11 15:58:02,402 - DEBUG - Loading chainer
2025-04-11 15:58:02,402 - DEBUG - Loading libsecret
2025-04-11 15:58:02,402 - DEBUG - Loading macOS
2025-04-11 15:58:02,447 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 15:58:02,448 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:02,452 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 15:58:02,462 - DEBUG - Received response
2025-04-11 15:58:02,476 - INFO - User test logged in successfully.
2025-04-11 15:58:02,476 - INFO - Starting polling for notifications.
2025-04-11 15:58:02,476 - DEBUG - Polling for notifications...
2025-04-11 15:58:02,486 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383482 with data: None
2025-04-11 15:58:02,487 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:02,500 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383482 HTTP/1.1" 200 21
2025-04-11 15:58:02,501 - DEBUG - Received response: {
  "update": -864
}

2025-04-11 15:58:02,640 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 15:58:02,641 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:02,656 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 15:58:02,656 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 15:58:03,724 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 15:58:03,725 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:03,740 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 15:58:03,740 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:58:07,506 - DEBUG - Polling for notifications...
2025-04-11 15:58:07,519 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383483 with data: None
2025-04-11 15:58:07,520 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:07,533 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383483 HTTP/1.1" 200 21
2025-04-11 15:58:07,534 - DEBUG - Received response: {
  "update": -865
}

2025-04-11 15:58:12,539 - DEBUG - Polling for notifications...
2025-04-11 15:58:12,552 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383483 with data: None
2025-04-11 15:58:12,553 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:12,566 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383483 HTTP/1.1" 200 21
2025-04-11 15:58:12,567 - DEBUG - Received response: {
  "update": -865
}

2025-04-11 15:58:30,465 - INFO - Application started.
2025-04-11 15:58:30,465 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 15:58:30,465 - INFO - Attempting to log in user: test
2025-04-11 15:58:30,468 - DEBUG - Loading KWallet
2025-04-11 15:58:30,469 - DEBUG - Loading SecretService
2025-04-11 15:58:30,477 - DEBUG - Loading Windows
2025-04-11 15:58:30,478 - DEBUG - Loading chainer
2025-04-11 15:58:30,478 - DEBUG - Loading libsecret
2025-04-11 15:58:30,478 - DEBUG - Loading macOS
2025-04-11 15:58:30,525 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 15:58:30,526 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:30,529 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 15:58:30,540 - DEBUG - Received response
2025-04-11 15:58:30,553 - INFO - User test logged in successfully.
2025-04-11 15:58:30,553 - INFO - Starting polling for notifications.
2025-04-11 15:58:30,553 - DEBUG - Polling for notifications...
2025-04-11 15:58:30,563 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383510 with data: None
2025-04-11 15:58:30,563 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:30,577 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383510 HTTP/1.1" 200 21
2025-04-11 15:58:30,578 - DEBUG - Received response: {
  "update": -892
}

2025-04-11 15:58:30,716 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 15:58:30,717 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:30,731 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 15:58:30,732 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 15:58:31,922 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 15:58:31,923 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:31,938 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 15:58:31,938 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:58:35,356 - ERROR - Valori inseriti non consentiti.
2025-04-11 15:58:35,374 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 15:58:35,374 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:35,388 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 15:58:35,389 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 15:58:35,583 - DEBUG - Polling for notifications...
2025-04-11 15:58:35,596 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383515 with data: None
2025-04-11 15:58:35,596 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:35,610 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383515 HTTP/1.1" 200 21
2025-04-11 15:58:35,610 - DEBUG - Received response: {
  "update": -897
}

2025-04-11 15:58:37,210 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 15:58:37,211 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:37,226 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 15:58:37,226 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:58:37,742 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-11 15:58:37,743 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:37,757 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-11 15:58:37,758 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:58:38,126 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 15:58:38,127 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:38,141 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 15:58:38,142 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:58:39,341 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-11 15:58:39,342 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:39,350 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-04-11 15:58:39,390 - DEBUG - Received response: {
  "datetime": "Fri, 11 Apr 2025 15:58:39 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-04-11 15:58:40,615 - DEBUG - Polling for notifications...
2025-04-11 15:58:40,627 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383515 with data: None
2025-04-11 15:58:40,628 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:58:40,642 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383515 HTTP/1.1" 200 21
2025-04-11 15:58:40,642 - DEBUG - Received response: {
  "update": -897
}

2025-04-11 15:59:46,356 - INFO - Application started.
2025-04-11 15:59:46,356 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 15:59:46,356 - INFO - Attempting to log in user: test
2025-04-11 15:59:46,359 - DEBUG - Loading KWallet
2025-04-11 15:59:46,359 - DEBUG - Loading SecretService
2025-04-11 15:59:46,368 - DEBUG - Loading Windows
2025-04-11 15:59:46,369 - DEBUG - Loading chainer
2025-04-11 15:59:46,369 - DEBUG - Loading libsecret
2025-04-11 15:59:46,369 - DEBUG - Loading macOS
2025-04-11 15:59:46,413 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 15:59:46,415 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:59:46,418 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 15:59:46,429 - DEBUG - Received response
2025-04-11 15:59:46,442 - INFO - User test logged in successfully.
2025-04-11 15:59:46,442 - INFO - Starting polling for notifications.
2025-04-11 15:59:46,442 - DEBUG - Polling for notifications...
2025-04-11 15:59:46,452 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383586 with data: None
2025-04-11 15:59:46,453 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:59:46,467 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383586 HTTP/1.1" 200 21
2025-04-11 15:59:46,467 - DEBUG - Received response: {
  "update": -968
}

2025-04-11 15:59:46,602 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 15:59:46,603 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:59:46,617 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 15:59:46,617 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 15:59:47,403 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 15:59:47,404 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:59:47,419 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 15:59:47,419 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 15:59:51,473 - DEBUG - Polling for notifications...
2025-04-11 15:59:51,485 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383587 with data: None
2025-04-11 15:59:51,486 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:59:51,500 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383587 HTTP/1.1" 200 21
2025-04-11 15:59:51,500 - DEBUG - Received response: {
  "update": -969
}

2025-04-11 15:59:52,482 - ERROR - Valori inseriti non consentiti.
2025-04-11 15:59:52,500 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 15:59:52,501 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:59:52,515 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 15:59:52,515 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 15:59:53,838 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 15:59:53,839 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 15:59:53,854 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 15:59:53,854 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:01:07,699 - INFO - Application started.
2025-04-11 16:01:07,699 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 16:01:07,699 - INFO - Attempting to log in user: test
2025-04-11 16:01:07,702 - DEBUG - Loading KWallet
2025-04-11 16:01:07,702 - DEBUG - Loading SecretService
2025-04-11 16:01:07,710 - DEBUG - Loading Windows
2025-04-11 16:01:07,711 - DEBUG - Loading chainer
2025-04-11 16:01:07,711 - DEBUG - Loading libsecret
2025-04-11 16:01:07,711 - DEBUG - Loading macOS
2025-04-11 16:01:07,756 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 16:01:07,758 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:01:07,761 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 16:01:07,771 - DEBUG - Received response
2025-04-11 16:01:07,784 - INFO - User test logged in successfully.
2025-04-11 16:01:07,784 - INFO - Starting polling for notifications.
2025-04-11 16:01:07,784 - DEBUG - Polling for notifications...
2025-04-11 16:01:07,795 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383668 with data: None
2025-04-11 16:01:07,795 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:01:07,809 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383668 HTTP/1.1" 200 22
2025-04-11 16:01:07,810 - DEBUG - Received response: {
  "update": -1050
}

2025-04-11 16:01:07,946 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:01:07,947 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:01:07,961 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:01:07,962 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:01:08,821 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:01:08,822 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:01:08,837 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:01:08,837 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:01:12,815 - DEBUG - Polling for notifications...
2025-04-11 16:01:12,828 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383668 with data: None
2025-04-11 16:01:12,829 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:01:12,843 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383668 HTTP/1.1" 200 22
2025-04-11 16:01:12,844 - DEBUG - Received response: {
  "update": -1050
}

2025-04-11 16:01:13,595 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'ciao.py', 'description': ''}
2025-04-11 16:01:13,596 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:01:13,604 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 14150
2025-04-11 16:01:13,614 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "ZJ6DoOsldOlppnVcngbl";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-131157353333584">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-131157335304656">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-131157335304768">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-131157335304880">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-131157335304992">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-131157335305104">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-131157335305216">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">194</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre>
<pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>data = sanitize_dict(data)</pre>
<pre class="line current"><span class="ws">    </span>if data.description == None and data.name == None:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nessun parametro passato&#34;</pre>
<pre class="line after"><span class="ws">    </span>if data.name and plugin_loader.rinomina_plugin(plugin.name, data.name):</pre>
<pre class="line after"><span class="ws">        </span>plugin.name = data.name</pre>
<pre class="line after"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nome aggiornato&#34;</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 194, in modifyPlugin
    if data.description == None and data.name == None:
AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 194, in modifyPlugin
    if data.description == None and data.name == None:
AttributeError: 'dict' object has no attribute 'description'


-->

2025-04-11 16:01:13,615 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "ZJ6DoOsldOlppnVcngbl";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-131157353333584">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-131157335304656">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-131157335304768">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-131157335304880">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-131157335304992">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-131157335305104">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-131157335305216">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">194</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre>
<pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>data = sanitize_dict(data)</pre>
<pre class="line current"><span class="ws">    </span>if data.description == None and data.name == None:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nessun parametro passato&#34;</pre>
<pre class="line after"><span class="ws">    </span>if data.name and plugin_loader.rinomina_plugin(plugin.name, data.name):</pre>
<pre class="line after"><span class="ws">        </span>plugin.name = data.name</pre>
<pre class="line after"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nome aggiornato&#34;</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 194, in modifyPlugin
    if data.description == None and data.name == None:
AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 194, in modifyPlugin
    if data.description == None and data.name == None:
AttributeError: 'dict' object has no attribute 'description'


-->

2025-04-11 16:01:13,630 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:01:13,631 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:01:13,645 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:01:13,646 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:01:15,039 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-11 16:01:15,039 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:01:15,054 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-11 16:01:15,054 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:01:15,375 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:01:15,376 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:01:15,391 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:01:15,391 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:02:11,916 - INFO - Application started.
2025-04-11 16:02:11,916 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 16:02:11,916 - INFO - Attempting to log in user: test
2025-04-11 16:02:11,919 - DEBUG - Loading KWallet
2025-04-11 16:02:11,920 - DEBUG - Loading SecretService
2025-04-11 16:02:11,928 - DEBUG - Loading Windows
2025-04-11 16:02:11,928 - DEBUG - Loading chainer
2025-04-11 16:02:11,929 - DEBUG - Loading libsecret
2025-04-11 16:02:11,929 - DEBUG - Loading macOS
2025-04-11 16:02:11,974 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 16:02:11,975 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:11,979 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 16:02:11,989 - DEBUG - Received response
2025-04-11 16:02:12,003 - INFO - User test logged in successfully.
2025-04-11 16:02:12,003 - INFO - Starting polling for notifications.
2025-04-11 16:02:12,003 - DEBUG - Polling for notifications...
2025-04-11 16:02:12,013 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383732 with data: None
2025-04-11 16:02:12,014 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:12,028 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383732 HTTP/1.1" 200 19
2025-04-11 16:02:12,029 - DEBUG - Received response: {
  "update": -6
}

2025-04-11 16:02:12,170 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:02:12,170 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:12,187 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:02:12,188 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:02:13,038 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:02:13,039 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:13,055 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:02:13,055 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:02:16,470 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'ciao.py', 'description': ''}
2025-04-11 16:02:16,471 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:16,478 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 14048
2025-04-11 16:02:16,488 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;plugin_loader&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "hdQdH4qrHCIa2aYkJaoM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;plugin_loader&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124022185805632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124022167578640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124022167578752">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124022167578864">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124022167578976">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124022167579088">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124022167579200">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">196</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>data = sanitize_dict(data)</pre>
<pre class="line before"><span class="ws">    </span>if data[&#39;description&#39;] == None and data[&#39;name&#39;] == None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;nessun parametro passato&#34;</pre>
<pre class="line current"><span class="ws">    </span>if data[&#39;name&#39;] and plugin_loader.rinomina_plugin(plugin.name, data[&#39;name&#39;]):</pre>
<pre class="line after"><span class="ws">        </span>plugin.name = data[&#39;name&#39;]</pre>
<pre class="line after"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nome aggiornato&#34;</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#else:</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;plugin_loader&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 196, in modifyPlugin
    if data[&#39;name&#39;] and plugin_loader.rinomina_plugin(plugin.name, data[&#39;name&#39;]):
NameError: name &#39;plugin_loader&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 196, in modifyPlugin
    if data['name'] and plugin_loader.rinomina_plugin(plugin.name, data['name']):
NameError: name 'plugin_loader' is not defined


-->

2025-04-11 16:02:16,488 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;plugin_loader&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "hdQdH4qrHCIa2aYkJaoM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;plugin_loader&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124022185805632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124022167578640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124022167578752">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124022167578864">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124022167578976">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124022167579088">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124022167579200">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">196</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>data = sanitize_dict(data)</pre>
<pre class="line before"><span class="ws">    </span>if data[&#39;description&#39;] == None and data[&#39;name&#39;] == None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;nessun parametro passato&#34;</pre>
<pre class="line current"><span class="ws">    </span>if data[&#39;name&#39;] and plugin_loader.rinomina_plugin(plugin.name, data[&#39;name&#39;]):</pre>
<pre class="line after"><span class="ws">        </span>plugin.name = data[&#39;name&#39;]</pre>
<pre class="line after"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nome aggiornato&#34;</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#else:</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;plugin_loader&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 196, in modifyPlugin
    if data[&#39;name&#39;] and plugin_loader.rinomina_plugin(plugin.name, data[&#39;name&#39;]):
NameError: name &#39;plugin_loader&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 196, in modifyPlugin
    if data['name'] and plugin_loader.rinomina_plugin(plugin.name, data['name']):
NameError: name 'plugin_loader' is not defined


-->

2025-04-11 16:02:16,503 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:02:16,504 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:16,518 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:02:16,518 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:02:17,034 - DEBUG - Polling for notifications...
2025-04-11 16:02:17,046 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383737 with data: None
2025-04-11 16:02:17,047 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:17,061 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383737 HTTP/1.1" 200 20
2025-04-11 16:02:17,061 - DEBUG - Received response: {
  "update": -11
}

2025-04-11 16:02:17,238 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-11 16:02:17,239 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:17,254 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-11 16:02:17,254 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:02:17,661 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:02:17,662 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:17,677 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:02:17,677 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:02:34,514 - INFO - Application started.
2025-04-11 16:02:34,514 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 16:02:34,514 - INFO - Attempting to log in user: test
2025-04-11 16:02:34,517 - DEBUG - Loading KWallet
2025-04-11 16:02:34,517 - DEBUG - Loading SecretService
2025-04-11 16:02:34,526 - DEBUG - Loading Windows
2025-04-11 16:02:34,526 - DEBUG - Loading chainer
2025-04-11 16:02:34,526 - DEBUG - Loading libsecret
2025-04-11 16:02:34,527 - DEBUG - Loading macOS
2025-04-11 16:02:34,571 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 16:02:34,572 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:34,586 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 16:02:34,587 - DEBUG - Received response
2025-04-11 16:02:34,600 - INFO - User test logged in successfully.
2025-04-11 16:02:34,601 - INFO - Starting polling for notifications.
2025-04-11 16:02:34,601 - DEBUG - Polling for notifications...
2025-04-11 16:02:34,610 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383755 with data: None
2025-04-11 16:02:34,611 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:34,625 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383755 HTTP/1.1" 200 19
2025-04-11 16:02:34,626 - DEBUG - Received response: {
  "update": -7
}

2025-04-11 16:02:34,767 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:02:34,768 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:34,784 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:02:34,785 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:02:35,537 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:02:35,538 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:35,554 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:02:35,554 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:02:39,631 - DEBUG - Polling for notifications...
2025-04-11 16:02:39,643 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383755 with data: None
2025-04-11 16:02:39,644 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:39,658 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383755 HTTP/1.1" 200 19
2025-04-11 16:02:39,659 - DEBUG - Received response: {
  "update": -7
}

2025-04-11 16:02:40,186 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'ciao.py', 'description': ''}
2025-04-11 16:02:40,186 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:40,193 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 12480
2025-04-11 16:02:40,203 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "T2XxA6cG3FAHwetlKWS6";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-128296433307424">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-128296415078416">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-128296415078528">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-128296415078640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-128296415078752">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-128296415078864">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-11 16:02:40,204 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "T2XxA6cG3FAHwetlKWS6";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-128296433307424">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-128296415078416">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-128296415078528">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-128296415078640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-128296415078752">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-128296415078864">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-11 16:02:40,218 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:02:40,219 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:02:40,233 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:02:40,234 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:03:16,068 - INFO - Application started.
2025-04-11 16:03:16,068 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 16:03:16,068 - INFO - Attempting to log in user: test
2025-04-11 16:03:16,071 - DEBUG - Loading KWallet
2025-04-11 16:03:16,072 - DEBUG - Loading SecretService
2025-04-11 16:03:16,080 - DEBUG - Loading Windows
2025-04-11 16:03:16,081 - DEBUG - Loading chainer
2025-04-11 16:03:16,081 - DEBUG - Loading libsecret
2025-04-11 16:03:16,081 - DEBUG - Loading macOS
2025-04-11 16:03:16,126 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 16:03:16,127 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:03:16,131 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 16:03:16,141 - DEBUG - Received response
2025-04-11 16:03:16,155 - INFO - User test logged in successfully.
2025-04-11 16:03:16,155 - INFO - Starting polling for notifications.
2025-04-11 16:03:16,155 - DEBUG - Polling for notifications...
2025-04-11 16:03:16,165 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383796 with data: None
2025-04-11 16:03:16,165 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:03:16,179 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383796 HTTP/1.1" 200 19
2025-04-11 16:03:16,180 - DEBUG - Received response: {
  "update": -7
}

2025-04-11 16:03:16,318 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:03:16,319 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:03:16,335 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:03:16,336 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:03:17,338 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:03:17,339 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:03:17,355 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:03:17,355 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:03:20,217 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'a', 'description': ''}
2025-04-11 16:03:20,218 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:03:20,222 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 6
2025-04-11 16:03:20,232 - DEBUG - Received response: failed
2025-04-11 16:03:20,232 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-11 16:03:20,248 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:03:20,248 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:03:20,262 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:03:20,263 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:03:21,184 - DEBUG - Polling for notifications...
2025-04-11 16:03:21,196 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383800 with data: None
2025-04-11 16:03:21,197 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:03:21,211 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383800 HTTP/1.1" 200 20
2025-04-11 16:03:21,212 - DEBUG - Received response: {
  "update": -11
}

2025-04-11 16:04:51,603 - INFO - Application started.
2025-04-11 16:04:51,603 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 16:04:51,603 - INFO - Attempting to log in user: test
2025-04-11 16:04:51,606 - DEBUG - Loading KWallet
2025-04-11 16:04:51,606 - DEBUG - Loading SecretService
2025-04-11 16:04:51,615 - DEBUG - Loading Windows
2025-04-11 16:04:51,615 - DEBUG - Loading chainer
2025-04-11 16:04:51,616 - DEBUG - Loading libsecret
2025-04-11 16:04:51,616 - DEBUG - Loading macOS
2025-04-11 16:04:51,660 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 16:04:51,661 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:04:51,665 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 16:04:51,675 - DEBUG - Received response
2025-04-11 16:04:51,688 - INFO - User test logged in successfully.
2025-04-11 16:04:51,688 - INFO - Starting polling for notifications.
2025-04-11 16:04:51,688 - DEBUG - Polling for notifications...
2025-04-11 16:04:51,699 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383892 with data: None
2025-04-11 16:04:51,700 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:04:51,714 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383892 HTTP/1.1" 200 21
2025-04-11 16:04:51,714 - DEBUG - Received response: {
  "update": -103
}

2025-04-11 16:04:51,842 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:04:51,843 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:04:51,857 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:04:51,858 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:04:52,718 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:04:52,718 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:04:52,733 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:04:52,734 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:04:56,514 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'ciao.py', 'description': ''}
2025-04-11 16:04:56,515 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:04:56,519 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 6
2025-04-11 16:04:56,529 - DEBUG - Received response: failed
2025-04-11 16:04:56,529 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-11 16:04:56,545 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:04:56,545 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:04:56,559 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:04:56,560 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:04:56,717 - DEBUG - Polling for notifications...
2025-04-11 16:04:56,728 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383897 with data: None
2025-04-11 16:04:56,729 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:04:56,743 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383897 HTTP/1.1" 200 21
2025-04-11 16:04:56,743 - DEBUG - Received response: {
  "update": -108
}

2025-04-11 16:06:17,358 - INFO - Application started.
2025-04-11 16:06:17,359 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 16:06:17,359 - INFO - Attempting to log in user: test
2025-04-11 16:06:17,362 - DEBUG - Loading KWallet
2025-04-11 16:06:17,362 - DEBUG - Loading SecretService
2025-04-11 16:06:17,371 - DEBUG - Loading Windows
2025-04-11 16:06:17,371 - DEBUG - Loading chainer
2025-04-11 16:06:17,371 - DEBUG - Loading libsecret
2025-04-11 16:06:17,372 - DEBUG - Loading macOS
2025-04-11 16:06:17,417 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 16:06:17,418 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:06:17,422 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 16:06:17,432 - DEBUG - Received response
2025-04-11 16:06:17,445 - INFO - User test logged in successfully.
2025-04-11 16:06:17,445 - INFO - Starting polling for notifications.
2025-04-11 16:06:17,446 - DEBUG - Polling for notifications...
2025-04-11 16:06:17,455 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383977 with data: None
2025-04-11 16:06:17,456 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:06:17,470 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383977 HTTP/1.1" 200 19
2025-04-11 16:06:17,471 - DEBUG - Received response: {
  "update": -8
}

2025-04-11 16:06:17,614 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:06:17,615 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:06:17,631 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:06:17,632 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:06:18,753 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:06:18,754 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:06:18,770 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:06:18,770 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:06:22,476 - DEBUG - Polling for notifications...
2025-04-11 16:06:22,488 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744383978 with data: None
2025-04-11 16:06:22,489 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:06:22,503 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744383978 HTTP/1.1" 200 19
2025-04-11 16:06:22,503 - DEBUG - Received response: {
  "update": -9
}

2025-04-11 16:06:22,602 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'ciao.py', 'description': ''}
2025-04-11 16:06:22,603 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:06:22,607 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 6
2025-04-11 16:06:22,617 - DEBUG - Received response: failed
2025-04-11 16:06:22,617 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-11 16:06:22,634 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:06:22,634 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:06:22,648 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:06:22,649 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:06:59,128 - INFO - Application started.
2025-04-11 16:06:59,128 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 16:06:59,128 - INFO - Attempting to log in user: test
2025-04-11 16:06:59,131 - DEBUG - Loading KWallet
2025-04-11 16:06:59,132 - DEBUG - Loading SecretService
2025-04-11 16:06:59,140 - DEBUG - Loading Windows
2025-04-11 16:06:59,141 - DEBUG - Loading chainer
2025-04-11 16:06:59,141 - DEBUG - Loading libsecret
2025-04-11 16:06:59,141 - DEBUG - Loading macOS
2025-04-11 16:06:59,186 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 16:06:59,187 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:06:59,191 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 16:06:59,201 - DEBUG - Received response
2025-04-11 16:06:59,214 - INFO - User test logged in successfully.
2025-04-11 16:06:59,214 - INFO - Starting polling for notifications.
2025-04-11 16:06:59,214 - DEBUG - Polling for notifications...
2025-04-11 16:06:59,226 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384019 with data: None
2025-04-11 16:06:59,226 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:06:59,241 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384019 HTTP/1.1" 200 19
2025-04-11 16:06:59,242 - DEBUG - Received response: {
  "update": -7
}

2025-04-11 16:06:59,384 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:06:59,385 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:06:59,401 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:06:59,401 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:07:00,202 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:07:00,203 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:07:00,219 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:07:00,219 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:07:04,248 - DEBUG - Polling for notifications...
2025-04-11 16:07:04,260 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384019 with data: None
2025-04-11 16:07:04,261 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:07:04,275 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384019 HTTP/1.1" 200 19
2025-04-11 16:07:04,276 - DEBUG - Received response: {
  "update": -7
}

2025-04-11 16:07:04,922 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'ciao.py', 'description': ''}
2025-04-11 16:07:04,923 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:07:04,928 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 6
2025-04-11 16:07:04,938 - DEBUG - Received response: failed
2025-04-11 16:07:04,938 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-11 16:07:04,952 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:07:04,953 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:07:04,967 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:07:04,968 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:07:05,845 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-11 16:07:05,846 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:07:05,861 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-11 16:07:05,862 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:07:06,224 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:07:06,225 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:07:06,240 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:07:06,240 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:08:03,689 - INFO - Application started.
2025-04-11 16:08:03,689 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 16:08:03,689 - INFO - Attempting to log in user: test
2025-04-11 16:08:03,692 - DEBUG - Loading KWallet
2025-04-11 16:08:03,692 - DEBUG - Loading SecretService
2025-04-11 16:08:03,700 - DEBUG - Loading Windows
2025-04-11 16:08:03,701 - DEBUG - Loading chainer
2025-04-11 16:08:03,701 - DEBUG - Loading libsecret
2025-04-11 16:08:03,701 - DEBUG - Loading macOS
2025-04-11 16:08:03,745 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 16:08:03,746 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:03,750 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 16:08:03,760 - DEBUG - Received response
2025-04-11 16:08:03,773 - INFO - User test logged in successfully.
2025-04-11 16:08:03,773 - INFO - Starting polling for notifications.
2025-04-11 16:08:03,773 - DEBUG - Polling for notifications...
2025-04-11 16:08:03,784 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384084 with data: None
2025-04-11 16:08:03,785 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:03,799 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384084 HTTP/1.1" 200 19
2025-04-11 16:08:03,799 - DEBUG - Received response: {
  "update": -9
}

2025-04-11 16:08:03,930 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:08:03,930 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:03,947 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:08:03,947 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:08:04,725 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:08:04,726 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:04,742 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:08:04,742 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:08:08,001 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'ciao.py', 'description': ''}
2025-04-11 16:08:08,002 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:08,007 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 6
2025-04-11 16:08:08,017 - DEBUG - Received response: failed
2025-04-11 16:08:08,017 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-11 16:08:08,033 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:08:08,033 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:08,047 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:08:08,048 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:08:08,805 - DEBUG - Polling for notifications...
2025-04-11 16:08:08,818 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384088 with data: None
2025-04-11 16:08:08,819 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:08,833 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384088 HTTP/1.1" 200 20
2025-04-11 16:08:08,833 - DEBUG - Received response: {
  "update": -13
}

2025-04-11 16:08:27,509 - INFO - Application started.
2025-04-11 16:08:27,509 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 16:08:27,510 - INFO - Attempting to log in user: test
2025-04-11 16:08:27,513 - DEBUG - Loading KWallet
2025-04-11 16:08:27,513 - DEBUG - Loading SecretService
2025-04-11 16:08:27,521 - DEBUG - Loading Windows
2025-04-11 16:08:27,522 - DEBUG - Loading chainer
2025-04-11 16:08:27,522 - DEBUG - Loading libsecret
2025-04-11 16:08:27,522 - DEBUG - Loading macOS
2025-04-11 16:08:27,567 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 16:08:27,568 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:27,572 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 16:08:27,582 - DEBUG - Received response
2025-04-11 16:08:27,596 - INFO - User test logged in successfully.
2025-04-11 16:08:27,596 - INFO - Starting polling for notifications.
2025-04-11 16:08:27,596 - DEBUG - Polling for notifications...
2025-04-11 16:08:27,606 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384108 with data: None
2025-04-11 16:08:27,607 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:27,621 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384108 HTTP/1.1" 200 19
2025-04-11 16:08:27,622 - DEBUG - Received response: {
  "update": -9
}

2025-04-11 16:08:27,762 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:08:27,762 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:27,779 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:08:27,779 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:08:28,566 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:08:28,567 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:28,583 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:08:28,583 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:08:32,221 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'ciao.py', 'description': ''}
2025-04-11 16:08:32,221 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:32,226 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 6
2025-04-11 16:08:32,236 - DEBUG - Received response: failed
2025-04-11 16:08:32,236 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-11 16:08:32,251 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:08:32,251 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:32,265 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:08:32,266 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:08:32,627 - DEBUG - Polling for notifications...
2025-04-11 16:08:32,640 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384112 with data: None
2025-04-11 16:08:32,641 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:08:32,655 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384112 HTTP/1.1" 200 20
2025-04-11 16:08:32,656 - DEBUG - Received response: {
  "update": -13
}

2025-04-11 16:10:30,971 - INFO - Application started.
2025-04-11 16:10:30,971 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 16:10:30,971 - INFO - Attempting to log in user: test
2025-04-11 16:10:30,974 - DEBUG - Loading KWallet
2025-04-11 16:10:30,974 - DEBUG - Loading SecretService
2025-04-11 16:10:30,983 - DEBUG - Loading Windows
2025-04-11 16:10:30,983 - DEBUG - Loading chainer
2025-04-11 16:10:30,983 - DEBUG - Loading libsecret
2025-04-11 16:10:30,984 - DEBUG - Loading macOS
2025-04-11 16:10:31,030 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 16:10:31,031 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:31,035 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 16:10:31,045 - DEBUG - Received response
2025-04-11 16:10:31,059 - INFO - User test logged in successfully.
2025-04-11 16:10:31,059 - INFO - Starting polling for notifications.
2025-04-11 16:10:31,059 - DEBUG - Polling for notifications...
2025-04-11 16:10:31,069 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384231 with data: None
2025-04-11 16:10:31,070 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:31,084 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384231 HTTP/1.1" 200 20
2025-04-11 16:10:31,084 - DEBUG - Received response: {
  "update": -10
}

2025-04-11 16:10:31,221 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:10:31,222 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:31,239 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:10:31,239 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:10:32,276 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:10:32,277 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:32,293 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:10:32,293 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:10:36,079 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'ciao.py', 'description': ''}
2025-04-11 16:10:36,080 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:36,088 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 15
2025-04-11 16:10:36,089 - DEBUG - Polling for notifications...
2025-04-11 16:10:36,099 - DEBUG - Received response: nome aggiornato
2025-04-11 16:10:36,100 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384231 with data: None
2025-04-11 16:10:36,100 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-11 16:10:36,100 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:36,116 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384231 HTTP/1.1" 200 20
2025-04-11 16:10:36,116 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:10:36,117 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:36,117 - DEBUG - Received response: {
  "update": -10
}

2025-04-11 16:10:36,131 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 142
2025-04-11 16:10:36,132 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "ciao.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:10:38,513 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:10:38,514 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:38,528 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:10:38,529 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:10:39,429 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-11 16:10:39,430 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:39,440 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-04-11 16:10:39,480 - DEBUG - Received response: {
  "datetime": "Fri, 11 Apr 2025 16:10:39 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-04-11 16:10:41,122 - DEBUG - Polling for notifications...
2025-04-11 16:10:41,134 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384236 with data: None
2025-04-11 16:10:41,135 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:41,149 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384236 HTTP/1.1" 200 20
2025-04-11 16:10:41,149 - DEBUG - Received response: {
  "update": -15
}

2025-04-11 16:10:42,115 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-11 16:10:42,116 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:42,131 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-11 16:10:42,131 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:10:42,524 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-11 16:10:42,524 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:42,539 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-11 16:10:42,540 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:10:42,810 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:10:42,811 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:42,826 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:10:42,827 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:10:46,155 - DEBUG - Polling for notifications...
2025-04-11 16:10:46,167 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384236 with data: None
2025-04-11 16:10:46,168 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:46,182 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384236 HTTP/1.1" 200 20
2025-04-11 16:10:46,182 - DEBUG - Received response: {
  "update": -15
}

2025-04-11 16:10:48,615 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'miao.cat', 'description': ''}
2025-04-11 16:10:48,616 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:48,624 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 15
2025-04-11 16:10:48,634 - DEBUG - Received response: nome aggiornato
2025-04-11 16:10:48,634 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-11 16:10:48,649 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:10:48,650 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:48,665 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 143
2025-04-11 16:10:48,665 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "miao.cat"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:10:50,187 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:10:50,188 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:50,202 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:10:50,203 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:10:51,188 - DEBUG - Polling for notifications...
2025-04-11 16:10:51,209 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384249 with data: None
2025-04-11 16:10:51,209 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:51,223 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384249 HTTP/1.1" 200 20
2025-04-11 16:10:51,223 - DEBUG - Received response: {
  "update": -28
}

2025-04-11 16:10:54,327 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'bau.py', 'description': ''}
2025-04-11 16:10:54,327 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:54,335 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 15
2025-04-11 16:10:54,345 - DEBUG - Received response: nome aggiornato
2025-04-11 16:10:54,345 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-11 16:10:54,361 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:10:54,362 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:54,376 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 141
2025-04-11 16:10:54,376 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "bau.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:10:54,955 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:10:54,956 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:54,971 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:10:54,971 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:10:55,641 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-11 16:10:55,641 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:55,650 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-04-11 16:10:55,690 - DEBUG - Received response: {
  "datetime": "Fri, 11 Apr 2025 16:10:55 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-04-11 16:10:56,228 - DEBUG - Polling for notifications...
2025-04-11 16:10:56,240 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384254 with data: None
2025-04-11 16:10:56,241 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:10:56,255 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384254 HTTP/1.1" 200 20
2025-04-11 16:10:56,256 - DEBUG - Received response: {
  "update": -33
}

2025-04-11 16:11:01,260 - DEBUG - Polling for notifications...
2025-04-11 16:11:01,273 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384254 with data: None
2025-04-11 16:11:01,273 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:11:01,287 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384254 HTTP/1.1" 200 20
2025-04-11 16:11:01,288 - DEBUG - Received response: {
  "update": -33
}

2025-04-11 16:12:13,914 - INFO - Application started.
2025-04-11 16:12:13,914 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 16:12:13,914 - INFO - Attempting to log in user: test
2025-04-11 16:12:13,917 - DEBUG - Loading KWallet
2025-04-11 16:12:13,917 - DEBUG - Loading SecretService
2025-04-11 16:12:13,926 - DEBUG - Loading Windows
2025-04-11 16:12:13,926 - DEBUG - Loading chainer
2025-04-11 16:12:13,927 - DEBUG - Loading libsecret
2025-04-11 16:12:13,927 - DEBUG - Loading macOS
2025-04-11 16:12:13,973 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 16:12:13,975 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:13,979 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 16:12:13,989 - DEBUG - Received response
2025-04-11 16:12:14,003 - INFO - User test logged in successfully.
2025-04-11 16:12:14,003 - INFO - Starting polling for notifications.
2025-04-11 16:12:14,003 - DEBUG - Polling for notifications...
2025-04-11 16:12:14,013 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384334 with data: None
2025-04-11 16:12:14,014 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:14,028 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384334 HTTP/1.1" 200 19
2025-04-11 16:12:14,029 - DEBUG - Received response: {
  "update": -7
}

2025-04-11 16:12:14,163 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:12:14,164 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:14,181 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 141
2025-04-11 16:12:14,181 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "bau.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:12:15,037 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:12:15,038 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:15,053 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-11 16:12:15,053 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-11 16:12:19,034 - DEBUG - Polling for notifications...
2025-04-11 16:12:19,046 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384334 with data: None
2025-04-11 16:12:19,047 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:19,061 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384334 HTTP/1.1" 200 19
2025-04-11 16:12:19,062 - DEBUG - Received response: {
  "update": -7
}

2025-04-11 16:12:24,066 - DEBUG - Polling for notifications...
2025-04-11 16:12:24,078 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384334 with data: None
2025-04-11 16:12:24,079 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:24,093 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384334 HTTP/1.1" 200 19
2025-04-11 16:12:24,094 - DEBUG - Received response: {
  "update": -7
}

2025-04-11 16:12:27,854 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'test.py', 'description': 'Io sono un plugin di test che ti dice il mio vero nome'}
2025-04-11 16:12:27,854 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:27,869 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 12480
2025-04-11 16:12:27,879 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "4tLqnYU0Nd5OTdOEJzbS";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-123776923961488">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-123776905817312">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-123776905817424">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-123776905817536">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-123776905817648">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-123776905817760">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-11 16:12:27,880 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "4tLqnYU0Nd5OTdOEJzbS";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-123776923961488">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-123776905817312">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-123776905817424">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-123776905817536">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-123776905817648">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-123776905817760">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-11 16:12:27,898 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:12:27,898 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:27,912 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 142
2025-04-11 16:12:27,913 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "test.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:12:29,052 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:12:29,052 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:29,067 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 94
2025-04-11 16:12:29,067 - DEBUG - Received response: {
  "description": "Io sono un plugin di test che ti dice il mio vero nome",
  "params": ""
}

2025-04-11 16:12:29,098 - DEBUG - Polling for notifications...
2025-04-11 16:12:29,110 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384348 with data: None
2025-04-11 16:12:29,111 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:29,125 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384348 HTTP/1.1" 200 20
2025-04-11 16:12:29,126 - DEBUG - Received response: {
  "update": -21
}

2025-04-11 16:12:31,257 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-11 16:12:31,258 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:31,268 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-04-11 16:12:31,309 - DEBUG - Received response: {
  "datetime": "Fri, 11 Apr 2025 16:12:31 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-04-11 16:12:34,128 - DEBUG - Polling for notifications...
2025-04-11 16:12:34,139 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384348 with data: None
2025-04-11 16:12:34,140 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:34,153 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384348 HTTP/1.1" 200 20
2025-04-11 16:12:34,153 - DEBUG - Received response: {
  "update": -21
}

2025-04-11 16:12:35,461 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:12:35,462 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:35,477 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 94
2025-04-11 16:12:35,477 - DEBUG - Received response: {
  "description": "Io sono un plugin di test che ti dice il mio vero nome",
  "params": ""
}

2025-04-11 16:12:39,158 - DEBUG - Polling for notifications...
2025-04-11 16:12:39,170 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384348 with data: None
2025-04-11 16:12:39,171 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:12:39,185 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384348 HTTP/1.1" 200 20
2025-04-11 16:12:39,185 - DEBUG - Received response: {
  "update": -21
}

2025-04-11 16:17:53,219 - INFO - Application started.
2025-04-11 16:17:53,219 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-11 16:17:53,220 - INFO - Attempting to log in user: test
2025-04-11 16:17:53,223 - DEBUG - Loading KWallet
2025-04-11 16:17:53,223 - DEBUG - Loading SecretService
2025-04-11 16:17:53,232 - DEBUG - Loading Windows
2025-04-11 16:17:53,233 - DEBUG - Loading chainer
2025-04-11 16:17:53,233 - DEBUG - Loading libsecret
2025-04-11 16:17:53,233 - DEBUG - Loading macOS
2025-04-11 16:17:53,278 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-11 16:17:53,279 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:17:53,282 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-11 16:17:53,293 - DEBUG - Received response
2025-04-11 16:17:53,306 - INFO - User test logged in successfully.
2025-04-11 16:17:53,306 - INFO - Starting polling for notifications.
2025-04-11 16:17:53,306 - DEBUG - Polling for notifications...
2025-04-11 16:17:53,315 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384673 with data: None
2025-04-11 16:17:53,316 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:17:53,330 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384673 HTTP/1.1" 200 21
2025-04-11 16:17:53,330 - DEBUG - Received response: {
  "update": -346
}

2025-04-11 16:17:53,461 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:17:53,462 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:17:53,476 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 142
2025-04-11 16:17:53,477 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "test.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:17:54,348 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:17:54,349 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:17:54,364 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 94
2025-04-11 16:17:54,364 - DEBUG - Received response: {
  "description": "Io sono un plugin di test che ti dice il mio vero nome",
  "params": ""
}

2025-04-11 16:17:58,335 - DEBUG - Polling for notifications...
2025-04-11 16:17:58,349 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384673 with data: None
2025-04-11 16:17:58,349 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:17:58,363 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384673 HTTP/1.1" 200 21
2025-04-11 16:17:58,364 - DEBUG - Received response: {
  "update": -346
}

2025-04-11 16:18:03,369 - DEBUG - Polling for notifications...
2025-04-11 16:18:03,381 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384673 with data: None
2025-04-11 16:18:03,382 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:18:03,396 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384673 HTTP/1.1" 200 21
2025-04-11 16:18:03,396 - DEBUG - Received response: {
  "update": -346
}

2025-04-11 16:18:04,351 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'pluginEs.py', 'description': ''}
2025-04-11 16:18:04,352 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:18:04,360 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 12480
2025-04-11 16:18:04,370 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "4tLqnYU0Nd5OTdOEJzbS";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-123776905819888">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-123776905820560">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-123776905820784">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-123776905819216">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-123776905820000">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-123776905820896">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-11 16:18:04,371 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "4tLqnYU0Nd5OTdOEJzbS";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-123776905819888">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-123776905820560">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-123776905820784">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-123776905819216">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-123776905820000">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-123776905820896">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-11 16:18:04,386 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-11 16:18:04,386 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:18:04,401 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-11 16:18:04,401 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-11 16:18:05,663 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:18:05,664 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:18:05,679 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 94
2025-04-11 16:18:05,679 - DEBUG - Received response: {
  "description": "Io sono un plugin di test che ti dice il mio vero nome",
  "params": ""
}

2025-04-11 16:18:06,083 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:18:06,084 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:18:06,098 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 94
2025-04-11 16:18:06,099 - DEBUG - Received response: {
  "description": "Io sono un plugin di test che ti dice il mio vero nome",
  "params": ""
}

2025-04-11 16:18:06,465 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-11 16:18:06,465 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:18:06,480 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 94
2025-04-11 16:18:06,480 - DEBUG - Received response: {
  "description": "Io sono un plugin di test che ti dice il mio vero nome",
  "params": ""
}

2025-04-11 16:18:08,402 - DEBUG - Polling for notifications...
2025-04-11 16:18:08,415 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744384684 with data: None
2025-04-11 16:18:08,415 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:18:08,430 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744384684 HTTP/1.1" 200 21
2025-04-11 16:18:08,430 - DEBUG - Received response: {
  "update": -357
}

2025-04-11 16:18:09,481 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-11 16:18:09,482 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-11 16:18:09,489 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-04-11 16:18:09,530 - DEBUG - Received response: {
  "datetime": "Fri, 11 Apr 2025 16:18:09 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-04-13 14:08:52,955 - INFO - Application started.
2025-04-13 14:08:52,956 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:08:52,956 - INFO - Attempting to log in user: test
2025-04-13 14:08:52,962 - DEBUG - Loading KWallet
2025-04-13 14:08:52,963 - DEBUG - Loading SecretService
2025-04-13 14:08:53,006 - DEBUG - Loading Windows
2025-04-13 14:08:53,006 - DEBUG - Loading chainer
2025-04-13 14:08:53,007 - DEBUG - Loading libsecret
2025-04-13 14:08:53,007 - DEBUG - Loading macOS
2025-04-13 14:08:53,082 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:08:53,084 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:08:53,088 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 14:08:53,098 - DEBUG - Received response
2025-04-13 14:08:53,112 - INFO - User test logged in successfully.
2025-04-13 14:08:53,112 - INFO - Starting polling for notifications.
2025-04-13 14:08:53,112 - DEBUG - Polling for notifications...
2025-04-13 14:08:53,122 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:08:53,123 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:08:53,137 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:08:53,137 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:08:53,275 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:08:53,276 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:08:53,292 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:08:53,293 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:08:58,143 - DEBUG - Polling for notifications...
2025-04-13 14:08:58,155 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:08:58,155 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:08:58,169 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:08:58,170 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:09:03,175 - DEBUG - Polling for notifications...
2025-04-13 14:09:03,188 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:09:03,188 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:03,203 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:09:03,203 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:09:08,209 - DEBUG - Polling for notifications...
2025-04-13 14:09:08,221 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:09:08,222 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:08,236 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:09:08,236 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:09:13,242 - DEBUG - Polling for notifications...
2025-04-13 14:09:13,255 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:09:13,256 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:13,269 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:09:13,270 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:09:18,056 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-13 14:09:18,056 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:18,072 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 94
2025-04-13 14:09:18,073 - DEBUG - Received response: {
  "description": "Io sono un plugin di test che ti dice il mio vero nome",
  "params": ""
}

2025-04-13 14:09:18,275 - DEBUG - Polling for notifications...
2025-04-13 14:09:18,287 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:09:18,288 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:18,302 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:09:18,303 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:09:18,698 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-13 14:09:18,698 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:18,713 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-13 14:09:18,713 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:09:19,197 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-13 14:09:19,198 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:19,213 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-13 14:09:19,213 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:09:22,166 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-13 14:09:22,167 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:22,181 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-13 14:09:22,182 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:09:23,308 - DEBUG - Polling for notifications...
2025-04-13 14:09:23,321 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:09:23,321 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:23,335 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:09:23,336 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:09:23,955 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-13 14:09:23,956 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:23,970 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 94
2025-04-13 14:09:23,971 - DEBUG - Received response: {
  "description": "Io sono un plugin di test che ti dice il mio vero nome",
  "params": ""
}

2025-04-13 14:09:25,121 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-13 14:09:25,122 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:25,137 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-13 14:09:25,137 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:09:25,905 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-13 14:09:25,905 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:25,920 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-13 14:09:25,921 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:09:28,341 - DEBUG - Polling for notifications...
2025-04-13 14:09:28,353 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:09:28,354 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:28,368 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:09:28,368 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:09:33,371 - DEBUG - Polling for notifications...
2025-04-13 14:09:33,384 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:09:33,385 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:33,399 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:09:33,399 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:09:38,404 - DEBUG - Polling for notifications...
2025-04-13 14:09:38,417 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:09:38,418 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:38,431 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:09:38,432 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:09:43,437 - DEBUG - Polling for notifications...
2025-04-13 14:09:43,450 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:09:43,450 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:43,464 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:09:43,465 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:09:48,470 - DEBUG - Polling for notifications...
2025-04-13 14:09:48,482 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:09:48,483 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:48,497 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:09:48,498 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:09:53,503 - DEBUG - Polling for notifications...
2025-04-13 14:09:53,517 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549733 with data: None
2025-04-13 14:09:53,517 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:09:53,531 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549733 HTTP/1.1" 200 19
2025-04-13 14:09:53,532 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:10:21,339 - INFO - Application started.
2025-04-13 14:10:21,339 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:10:21,340 - INFO - Attempting to log in user: test
2025-04-13 14:10:21,343 - DEBUG - Loading KWallet
2025-04-13 14:10:21,343 - DEBUG - Loading SecretService
2025-04-13 14:10:21,352 - DEBUG - Loading Windows
2025-04-13 14:10:21,353 - DEBUG - Loading chainer
2025-04-13 14:10:21,353 - DEBUG - Loading libsecret
2025-04-13 14:10:21,353 - DEBUG - Loading macOS
2025-04-13 14:10:21,397 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:10:21,398 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:10:21,402 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 14:10:21,412 - DEBUG - Received response
2025-04-13 14:10:21,426 - INFO - User test logged in successfully.
2025-04-13 14:10:21,426 - INFO - Starting polling for notifications.
2025-04-13 14:10:21,426 - DEBUG - Polling for notifications...
2025-04-13 14:10:21,436 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549821 with data: None
2025-04-13 14:10:21,437 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:10:21,451 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549821 HTTP/1.1" 200 20
2025-04-13 14:10:21,451 - DEBUG - Received response: {
  "update": -96
}

2025-04-13 14:10:21,585 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:10:21,586 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:10:21,600 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:10:21,601 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:10:26,457 - DEBUG - Polling for notifications...
2025-04-13 14:10:26,469 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549822 with data: None
2025-04-13 14:10:26,471 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:10:26,485 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549822 HTTP/1.1" 200 20
2025-04-13 14:10:26,485 - DEBUG - Received response: {
  "update": -97
}

2025-04-13 14:10:31,488 - DEBUG - Polling for notifications...
2025-04-13 14:10:31,501 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549822 with data: None
2025-04-13 14:10:31,502 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:10:31,516 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549822 HTTP/1.1" 200 20
2025-04-13 14:10:31,516 - DEBUG - Received response: {
  "update": -97
}

2025-04-13 14:10:36,521 - DEBUG - Polling for notifications...
2025-04-13 14:10:36,534 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549822 with data: None
2025-04-13 14:10:36,534 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:10:36,548 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549822 HTTP/1.1" 200 20
2025-04-13 14:10:36,549 - DEBUG - Received response: {
  "update": -97
}

2025-04-13 14:10:41,554 - DEBUG - Polling for notifications...
2025-04-13 14:10:41,567 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549822 with data: None
2025-04-13 14:10:41,568 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:10:41,582 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549822 HTTP/1.1" 200 20
2025-04-13 14:10:41,582 - DEBUG - Received response: {
  "update": -97
}

2025-04-13 14:10:46,588 - DEBUG - Polling for notifications...
2025-04-13 14:10:46,599 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549822 with data: None
2025-04-13 14:10:46,600 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:10:46,614 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549822 HTTP/1.1" 200 20
2025-04-13 14:10:46,614 - DEBUG - Received response: {
  "update": -97
}

2025-04-13 14:10:51,620 - DEBUG - Polling for notifications...
2025-04-13 14:10:51,632 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549822 with data: None
2025-04-13 14:10:51,633 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:10:51,647 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549822 HTTP/1.1" 200 20
2025-04-13 14:10:51,647 - DEBUG - Received response: {
  "update": -97
}

2025-04-13 14:10:56,653 - DEBUG - Polling for notifications...
2025-04-13 14:10:56,665 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549822 with data: None
2025-04-13 14:10:56,666 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:10:56,680 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549822 HTTP/1.1" 200 20
2025-04-13 14:10:56,681 - DEBUG - Received response: {
  "update": -97
}

2025-04-13 14:11:01,686 - DEBUG - Polling for notifications...
2025-04-13 14:11:01,698 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549822 with data: None
2025-04-13 14:11:01,699 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:01,713 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549822 HTTP/1.1" 200 20
2025-04-13 14:11:01,714 - DEBUG - Received response: {
  "update": -97
}

2025-04-13 14:11:06,716 - DEBUG - Polling for notifications...
2025-04-13 14:11:06,727 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549822 with data: None
2025-04-13 14:11:06,728 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:06,742 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549822 HTTP/1.1" 200 20
2025-04-13 14:11:06,742 - DEBUG - Received response: {
  "update": -97
}

2025-04-13 14:11:11,748 - DEBUG - Polling for notifications...
2025-04-13 14:11:11,760 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549822 with data: None
2025-04-13 14:11:11,761 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:11,775 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549822 HTTP/1.1" 200 20
2025-04-13 14:11:11,776 - DEBUG - Received response: {
  "update": -97
}

2025-04-13 14:11:16,781 - DEBUG - Polling for notifications...
2025-04-13 14:11:16,793 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549822 with data: None
2025-04-13 14:11:16,794 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:16,808 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549822 HTTP/1.1" 200 20
2025-04-13 14:11:16,808 - DEBUG - Received response: {
  "update": -97
}

2025-04-13 14:11:21,813 - DEBUG - Polling for notifications...
2025-04-13 14:11:21,826 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549822 with data: None
2025-04-13 14:11:21,826 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:21,840 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549822 HTTP/1.1" 200 20
2025-04-13 14:11:21,841 - DEBUG - Received response: {
  "update": -97
}

2025-04-13 14:11:25,273 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/sh\n# This is bash program to display Hello World\necho " Hello World "\n', 'name': 'hello.sh'}
2025-04-13 14:11:25,274 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:25,278 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-04-13 14:11:25,288 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-04-13 14:11:25,288 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-04-13 14:11:25,298 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:11:25,299 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:25,313 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:11:25,313 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:11:25,333 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:11:25,333 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:25,347 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:11:25,348 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:11:25,366 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:11:25,366 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:25,380 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:11:25,381 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:11:26,846 - DEBUG - Polling for notifications...
2025-04-13 14:11:26,859 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549885 with data: None
2025-04-13 14:11:26,859 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:26,874 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549885 HTTP/1.1" 200 21
2025-04-13 14:11:26,874 - DEBUG - Received response: {
  "update": -160
}

2025-04-13 14:11:31,880 - DEBUG - Polling for notifications...
2025-04-13 14:11:31,892 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549885 with data: None
2025-04-13 14:11:31,893 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:31,907 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549885 HTTP/1.1" 200 21
2025-04-13 14:11:31,907 - DEBUG - Received response: {
  "update": -160
}

2025-04-13 14:11:57,907 - INFO - Application started.
2025-04-13 14:11:57,907 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:11:57,907 - INFO - Attempting to log in user: test
2025-04-13 14:11:57,910 - DEBUG - Loading KWallet
2025-04-13 14:11:57,910 - DEBUG - Loading SecretService
2025-04-13 14:11:57,919 - DEBUG - Loading Windows
2025-04-13 14:11:57,919 - DEBUG - Loading chainer
2025-04-13 14:11:57,920 - DEBUG - Loading libsecret
2025-04-13 14:11:57,920 - DEBUG - Loading macOS
2025-04-13 14:11:57,964 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:11:57,965 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:57,968 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 14:11:57,979 - DEBUG - Received response
2025-04-13 14:11:57,992 - INFO - User test logged in successfully.
2025-04-13 14:11:57,992 - INFO - Starting polling for notifications.
2025-04-13 14:11:57,992 - DEBUG - Polling for notifications...
2025-04-13 14:11:58,002 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549918 with data: None
2025-04-13 14:11:58,003 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:58,017 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549918 HTTP/1.1" 200 21
2025-04-13 14:11:58,017 - DEBUG - Received response: {
  "update": -193
}

2025-04-13 14:11:58,153 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:11:58,154 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:11:58,168 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:11:58,168 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:12:03,022 - DEBUG - Polling for notifications...
2025-04-13 14:12:03,034 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549918 with data: None
2025-04-13 14:12:03,035 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:12:03,049 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549918 HTTP/1.1" 200 21
2025-04-13 14:12:03,049 - DEBUG - Received response: {
  "update": -193
}

2025-04-13 14:12:05,373 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/sh\n# This is bash program to display Hello World\necho " Hello World "\n', 'name': 'hello.sh'}
2025-04-13 14:12:05,374 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:12:05,378 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-04-13 14:12:05,388 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-04-13 14:12:05,388 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-04-13 14:12:05,397 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:12:05,398 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:12:05,412 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:12:05,412 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:12:05,431 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:12:05,432 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:12:05,446 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:12:05,446 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:12:05,463 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:12:05,464 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:12:05,478 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:12:05,478 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:12:08,054 - DEBUG - Polling for notifications...
2025-04-13 14:12:08,067 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744549925 with data: None
2025-04-13 14:12:08,068 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:12:08,082 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744549925 HTTP/1.1" 200 21
2025-04-13 14:12:08,082 - DEBUG - Received response: {
  "update": -200
}

2025-04-13 14:13:52,221 - INFO - Application started.
2025-04-13 14:13:52,221 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:13:52,221 - INFO - Attempting to log in user: test
2025-04-13 14:13:52,225 - DEBUG - Loading KWallet
2025-04-13 14:13:52,225 - DEBUG - Loading SecretService
2025-04-13 14:13:52,234 - DEBUG - Loading Windows
2025-04-13 14:13:52,234 - DEBUG - Loading chainer
2025-04-13 14:13:52,235 - DEBUG - Loading libsecret
2025-04-13 14:13:52,235 - DEBUG - Loading macOS
2025-04-13 14:13:52,279 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:13:52,280 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:13:52,284 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 14:13:52,294 - DEBUG - Received response
2025-04-13 14:13:52,307 - INFO - User test logged in successfully.
2025-04-13 14:13:52,307 - INFO - Starting polling for notifications.
2025-04-13 14:13:52,307 - DEBUG - Polling for notifications...
2025-04-13 14:13:52,318 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744550032 with data: None
2025-04-13 14:13:52,319 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:13:52,333 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744550032 HTTP/1.1" 200 19
2025-04-13 14:13:52,333 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:13:52,468 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:13:52,469 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:13:52,485 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:13:52,485 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:13:57,339 - DEBUG - Polling for notifications...
2025-04-13 14:13:57,351 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744550032 with data: None
2025-04-13 14:13:57,352 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:13:57,366 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744550032 HTTP/1.1" 200 19
2025-04-13 14:13:57,366 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:14:00,193 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/sh\n# This is bash program to display Hello World\necho " Hello World "\n', 'name': 'hello.sh'}
2025-04-13 14:14:00,194 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:14:00,198 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-04-13 14:14:00,208 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-04-13 14:14:00,208 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-04-13 14:14:00,217 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:14:00,218 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:14:00,232 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:14:00,232 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:14:00,251 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:14:00,252 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:14:00,266 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:14:00,266 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:14:00,283 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:14:00,284 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:14:00,298 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:14:00,299 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:14:02,371 - DEBUG - Polling for notifications...
2025-04-13 14:14:02,383 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744550040 with data: None
2025-04-13 14:14:02,384 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:14:02,398 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744550040 HTTP/1.1" 200 20
2025-04-13 14:14:02,398 - DEBUG - Received response: {
  "update": -16
}

2025-04-13 14:17:48,809 - INFO - Application started.
2025-04-13 14:17:48,809 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:17:48,809 - INFO - Attempting to log in user: test
2025-04-13 14:17:48,812 - DEBUG - Loading KWallet
2025-04-13 14:17:48,812 - DEBUG - Loading SecretService
2025-04-13 14:17:48,821 - DEBUG - Loading Windows
2025-04-13 14:17:48,822 - DEBUG - Loading chainer
2025-04-13 14:17:48,822 - DEBUG - Loading libsecret
2025-04-13 14:17:48,822 - DEBUG - Loading macOS
2025-04-13 14:17:48,867 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:17:48,868 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:17:48,868 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /login (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x70110a9db370>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-04-13 14:17:59,450 - INFO - Application started.
2025-04-13 14:17:59,450 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:17:59,450 - INFO - Attempting to log in user: test
2025-04-13 14:17:59,453 - DEBUG - Loading KWallet
2025-04-13 14:17:59,453 - DEBUG - Loading SecretService
2025-04-13 14:17:59,462 - DEBUG - Loading Windows
2025-04-13 14:17:59,463 - DEBUG - Loading chainer
2025-04-13 14:17:59,463 - DEBUG - Loading libsecret
2025-04-13 14:17:59,463 - DEBUG - Loading macOS
2025-04-13 14:17:59,508 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:17:59,509 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:17:59,509 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /login (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7a0cfa367250>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-04-13 14:18:10,566 - INFO - Application started.
2025-04-13 14:18:10,567 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:18:10,567 - INFO - Attempting to log in user: test
2025-04-13 14:18:10,570 - DEBUG - Loading KWallet
2025-04-13 14:18:10,570 - DEBUG - Loading SecretService
2025-04-13 14:18:10,579 - DEBUG - Loading Windows
2025-04-13 14:18:10,579 - DEBUG - Loading chainer
2025-04-13 14:18:10,579 - DEBUG - Loading libsecret
2025-04-13 14:18:10,579 - DEBUG - Loading macOS
2025-04-13 14:18:10,624 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:18:10,625 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:18:10,625 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /login (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x728ab239f250>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-04-13 14:21:15,504 - INFO - Application started.
2025-04-13 14:21:15,505 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:21:15,505 - INFO - Attempting to log in user: test
2025-04-13 14:21:15,508 - DEBUG - Loading KWallet
2025-04-13 14:21:15,508 - DEBUG - Loading SecretService
2025-04-13 14:21:15,517 - DEBUG - Loading Windows
2025-04-13 14:21:15,517 - DEBUG - Loading chainer
2025-04-13 14:21:15,517 - DEBUG - Loading libsecret
2025-04-13 14:21:15,518 - DEBUG - Loading macOS
2025-04-13 14:21:15,563 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:21:15,564 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:21:15,568 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 14:21:15,579 - DEBUG - Received response
2025-04-13 14:21:15,592 - INFO - User test logged in successfully.
2025-04-13 14:21:15,592 - INFO - Starting polling for notifications.
2025-04-13 14:21:15,592 - DEBUG - Polling for notifications...
2025-04-13 14:21:15,602 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744550476 with data: None
2025-04-13 14:21:15,603 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:21:15,616 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744550476 HTTP/1.1" 200 20
2025-04-13 14:21:15,617 - DEBUG - Received response: {
  "update": -14
}

2025-04-13 14:21:15,749 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:21:15,750 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:21:15,766 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:21:15,766 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:21:20,622 - DEBUG - Polling for notifications...
2025-04-13 14:21:20,634 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744550476 with data: None
2025-04-13 14:21:20,635 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:21:20,649 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744550476 HTTP/1.1" 200 20
2025-04-13 14:21:20,649 - DEBUG - Received response: {
  "update": -14
}

2025-04-13 14:21:22,617 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    local msg=$(get_param)\n    echo "Hello, World! $msg"\n}\n\n', 'name': 'hello.sh'}
2025-04-13 14:21:22,618 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:21:22,622 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-04-13 14:21:22,632 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-04-13 14:21:22,632 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-04-13 14:21:22,641 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:21:22,642 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:21:22,656 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:21:22,657 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:21:22,675 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:21:22,676 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:21:22,690 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:21:22,691 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:21:22,709 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:21:22,710 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:21:22,724 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:21:22,724 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:21:25,655 - DEBUG - Polling for notifications...
2025-04-13 14:21:25,667 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744550483 with data: None
2025-04-13 14:21:25,668 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:21:25,682 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744550483 HTTP/1.1" 200 20
2025-04-13 14:21:25,682 - DEBUG - Received response: {
  "update": -21
}

2025-04-13 14:33:55,245 - INFO - Application started.
2025-04-13 14:33:55,245 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:33:55,245 - INFO - Attempting to log in user: test
2025-04-13 14:33:55,248 - DEBUG - Loading KWallet
2025-04-13 14:33:55,248 - DEBUG - Loading SecretService
2025-04-13 14:33:55,257 - DEBUG - Loading Windows
2025-04-13 14:33:55,257 - DEBUG - Loading chainer
2025-04-13 14:33:55,257 - DEBUG - Loading libsecret
2025-04-13 14:33:55,258 - DEBUG - Loading macOS
2025-04-13 14:33:55,302 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:33:55,303 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:33:55,307 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 14:33:55,317 - DEBUG - Received response
2025-04-13 14:33:55,330 - INFO - User test logged in successfully.
2025-04-13 14:33:55,330 - INFO - Starting polling for notifications.
2025-04-13 14:33:55,331 - DEBUG - Polling for notifications...
2025-04-13 14:33:55,341 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551235 with data: None
2025-04-13 14:33:55,341 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:33:55,355 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551235 HTTP/1.1" 200 20
2025-04-13 14:33:55,356 - DEBUG - Received response: {
  "update": -14
}

2025-04-13 14:33:55,487 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:33:55,487 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:33:55,504 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-13 14:33:55,504 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-13 14:34:00,360 - DEBUG - Polling for notifications...
2025-04-13 14:34:00,373 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551236 with data: None
2025-04-13 14:34:00,374 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:34:00,388 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551236 HTTP/1.1" 200 20
2025-04-13 14:34:00,388 - DEBUG - Received response: {
  "update": -15
}

2025-04-13 14:34:01,831 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    local msg=$(get_param)\n    echo "Hello, World! $msg"\n}\n\n', 'name': 'hello.sh'}
2025-04-13 14:34:01,832 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:34:01,840 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-13 14:34:01,850 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 14:34:01,850 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 14:34:01,861 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:34:01,861 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:34:01,876 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 191
2025-04-13 14:34:01,876 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  }
]

2025-04-13 14:34:01,899 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:34:01,899 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:34:01,914 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 191
2025-04-13 14:34:01,914 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  }
]

2025-04-13 14:34:01,934 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:34:01,935 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:34:01,949 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 191
2025-04-13 14:34:01,949 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  }
]

2025-04-13 14:34:03,158 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/4 with data: None
2025-04-13 14:34:03,158 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:34:03,175 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/4 HTTP/1.1" 200 40
2025-04-13 14:34:03,175 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:34:04,103 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/4 with data: {}
2025-04-13 14:34:04,104 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:34:04,113 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/4 HTTP/1.1" 200 125
2025-04-13 14:34:04,153 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 14:34:04 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 14:34:05,393 - DEBUG - Polling for notifications...
2025-04-13 14:34:05,405 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551242 with data: None
2025-04-13 14:34:05,406 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:34:05,420 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551242 HTTP/1.1" 200 18
2025-04-13 14:34:05,421 - DEBUG - Received response: {
  "update": 0
}

2025-04-13 14:35:14,585 - INFO - Application started.
2025-04-13 14:35:14,585 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:35:14,585 - INFO - Attempting to log in user: test
2025-04-13 14:35:14,589 - DEBUG - Loading KWallet
2025-04-13 14:35:14,589 - DEBUG - Loading SecretService
2025-04-13 14:35:14,598 - DEBUG - Loading Windows
2025-04-13 14:35:14,599 - DEBUG - Loading chainer
2025-04-13 14:35:14,599 - DEBUG - Loading libsecret
2025-04-13 14:35:14,599 - DEBUG - Loading macOS
2025-04-13 14:35:14,645 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:35:14,646 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:14,650 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 14:35:14,661 - DEBUG - Received response
2025-04-13 14:35:14,674 - INFO - User test logged in successfully.
2025-04-13 14:35:14,675 - INFO - Starting polling for notifications.
2025-04-13 14:35:14,675 - DEBUG - Polling for notifications...
2025-04-13 14:35:14,685 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551315 with data: None
2025-04-13 14:35:14,686 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:14,700 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551315 HTTP/1.1" 200 20
2025-04-13 14:35:14,700 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 14:35:14,835 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:35:14,836 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:14,852 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 191
2025-04-13 14:35:14,853 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  }
]

2025-04-13 14:35:16,245 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/4 with data: None
2025-04-13 14:35:16,246 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:16,262 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/4 HTTP/1.1" 200 40
2025-04-13 14:35:16,262 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:35:19,706 - DEBUG - Polling for notifications...
2025-04-13 14:35:19,718 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551315 with data: None
2025-04-13 14:35:19,719 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:19,733 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551315 HTTP/1.1" 200 20
2025-04-13 14:35:19,734 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 14:35:21,110 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-13 14:35:21,111 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:21,126 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-13 14:35:21,127 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:35:23,837 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/4 with data: None
2025-04-13 14:35:23,838 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:23,853 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/4 HTTP/1.1" 200 40
2025-04-13 14:35:23,853 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:35:24,738 - DEBUG - Polling for notifications...
2025-04-13 14:35:24,750 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551315 with data: None
2025-04-13 14:35:24,751 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:24,765 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551315 HTTP/1.1" 200 20
2025-04-13 14:35:24,765 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 14:35:29,770 - DEBUG - Polling for notifications...
2025-04-13 14:35:29,782 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551315 with data: None
2025-04-13 14:35:29,783 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:29,797 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551315 HTTP/1.1" 200 20
2025-04-13 14:35:29,798 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 14:35:31,369 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    local msg=$(get_param)\n    echo "Hello, World! $msg"\n}\n\n', 'name': 'hello.sh'}
2025-04-13 14:35:31,369 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:31,377 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-13 14:35:31,388 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 14:35:31,388 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 14:35:31,397 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:35:31,398 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:31,412 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 236
2025-04-13 14:35:31,412 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  }
]

2025-04-13 14:35:31,439 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:35:31,440 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:31,454 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 236
2025-04-13 14:35:31,455 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  }
]

2025-04-13 14:35:31,476 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:35:31,477 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:31,491 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 236
2025-04-13 14:35:31,492 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  }
]

2025-04-13 14:35:32,967 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/5 with data: None
2025-04-13 14:35:32,968 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:32,983 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/5 HTTP/1.1" 200 40
2025-04-13 14:35:32,983 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:35:34,486 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/5 with data: {}
2025-04-13 14:35:34,487 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:34,495 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/5 HTTP/1.1" 200 125
2025-04-13 14:35:34,536 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 14:35:34 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 14:35:34,803 - DEBUG - Polling for notifications...
2025-04-13 14:35:34,815 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551331 with data: None
2025-04-13 14:35:34,816 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:35:34,830 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551331 HTTP/1.1" 200 18
2025-04-13 14:35:34,830 - DEBUG - Received response: {
  "update": 0
}

2025-04-13 14:38:52,491 - INFO - Application started.
2025-04-13 14:38:52,491 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:38:52,491 - INFO - Attempting to log in user: test
2025-04-13 14:38:52,494 - DEBUG - Loading KWallet
2025-04-13 14:38:52,494 - DEBUG - Loading SecretService
2025-04-13 14:38:52,504 - DEBUG - Loading Windows
2025-04-13 14:38:52,504 - DEBUG - Loading chainer
2025-04-13 14:38:52,504 - DEBUG - Loading libsecret
2025-04-13 14:38:52,505 - DEBUG - Loading macOS
2025-04-13 14:38:52,550 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:38:52,551 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:38:52,555 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 14:38:52,566 - DEBUG - Received response
2025-04-13 14:38:52,579 - INFO - User test logged in successfully.
2025-04-13 14:38:52,579 - INFO - Starting polling for notifications.
2025-04-13 14:38:52,579 - DEBUG - Polling for notifications...
2025-04-13 14:38:52,589 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551532 with data: None
2025-04-13 14:38:52,589 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:38:52,604 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551532 HTTP/1.1" 200 20
2025-04-13 14:38:52,604 - DEBUG - Received response: {
  "update": -10
}

2025-04-13 14:38:52,750 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:38:52,750 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:38:52,767 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 236
2025-04-13 14:38:52,767 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  }
]

2025-04-13 14:38:53,896 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/5 with data: None
2025-04-13 14:38:53,896 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:38:53,912 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/5 HTTP/1.1" 200 40
2025-04-13 14:38:53,913 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:38:56,888 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/5 with data: {}
2025-04-13 14:38:56,889 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:38:56,897 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/5 HTTP/1.1" 200 125
2025-04-13 14:38:56,938 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 14:38:56 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 14:38:57,609 - DEBUG - Polling for notifications...
2025-04-13 14:38:57,621 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551533 with data: None
2025-04-13 14:38:57,622 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:38:57,636 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551533 HTTP/1.1" 200 20
2025-04-13 14:38:57,637 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 14:39:02,641 - DEBUG - Polling for notifications...
2025-04-13 14:39:02,654 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551533 with data: None
2025-04-13 14:39:02,654 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:39:02,668 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551533 HTTP/1.1" 200 20
2025-04-13 14:39:02,669 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 14:39:05,785 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    local msg=$(get_param)\n    echo "Hello, World! $msg"\n}\n\n', 'name': 'hello.sh'}
2025-04-13 14:39:05,786 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:39:05,794 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-13 14:39:05,804 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 14:39:05,804 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 14:39:05,814 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:39:05,814 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:39:05,829 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 281
2025-04-13 14:39:05,829 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  }
]

2025-04-13 14:39:05,859 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:39:05,860 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:39:05,874 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 281
2025-04-13 14:39:05,874 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  }
]

2025-04-13 14:39:05,900 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:39:05,900 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:39:05,914 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 281
2025-04-13 14:39:05,915 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  }
]

2025-04-13 14:39:07,673 - DEBUG - Polling for notifications...
2025-04-13 14:39:07,685 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551546 with data: None
2025-04-13 14:39:07,686 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:39:07,700 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551546 HTTP/1.1" 200 18
2025-04-13 14:39:07,700 - DEBUG - Received response: {
  "update": 0
}

2025-04-13 14:39:09,233 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/6 with data: None
2025-04-13 14:39:09,234 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:39:09,249 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/6 HTTP/1.1" 200 40
2025-04-13 14:39:09,249 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:39:10,073 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/6 with data: {}
2025-04-13 14:39:10,074 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:39:10,081 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/6 HTTP/1.1" 200 125
2025-04-13 14:39:10,122 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 14:39:10 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 14:39:12,705 - DEBUG - Polling for notifications...
2025-04-13 14:39:12,717 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744551546 with data: None
2025-04-13 14:39:12,718 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:39:12,732 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744551546 HTTP/1.1" 200 18
2025-04-13 14:39:12,733 - DEBUG - Received response: {
  "update": 0
}

2025-04-13 14:53:52,735 - INFO - Application started.
2025-04-13 14:53:52,735 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:53:52,735 - INFO - Attempting to log in user: test
2025-04-13 14:53:52,738 - DEBUG - Loading KWallet
2025-04-13 14:53:52,738 - DEBUG - Loading SecretService
2025-04-13 14:53:52,748 - DEBUG - Loading Windows
2025-04-13 14:53:52,748 - DEBUG - Loading chainer
2025-04-13 14:53:52,748 - DEBUG - Loading libsecret
2025-04-13 14:53:52,749 - DEBUG - Loading macOS
2025-04-13 14:53:52,793 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:53:52,795 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:53:52,799 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 14:53:52,809 - DEBUG - Received response
2025-04-13 14:53:52,822 - INFO - User test logged in successfully.
2025-04-13 14:53:52,822 - INFO - Starting polling for notifications.
2025-04-13 14:53:52,823 - DEBUG - Polling for notifications...
2025-04-13 14:53:52,833 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552433 with data: None
2025-04-13 14:53:52,833 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:53:52,847 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552433 HTTP/1.1" 200 20
2025-04-13 14:53:52,848 - DEBUG - Received response: {
  "update": -32
}

2025-04-13 14:53:52,986 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:53:52,987 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:53:53,003 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 281
2025-04-13 14:53:53,004 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  }
]

2025-04-13 14:53:57,853 - DEBUG - Polling for notifications...
2025-04-13 14:53:57,866 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552433 with data: None
2025-04-13 14:53:57,867 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:53:57,881 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552433 HTTP/1.1" 200 20
2025-04-13 14:53:57,881 - DEBUG - Received response: {
  "update": -32
}

2025-04-13 14:53:59,465 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    local msg=$(get_param)\n    echo "Hello, World! $msg"\n}\n\n', 'name': 'hello.sh'}
2025-04-13 14:53:59,466 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:53:59,474 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-13 14:53:59,484 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 14:53:59,484 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 14:53:59,494 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:53:59,494 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:53:59,509 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 326
2025-04-13 14:53:59,509 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  }
]

2025-04-13 14:53:59,542 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:53:59,543 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:53:59,557 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 326
2025-04-13 14:53:59,557 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  }
]

2025-04-13 14:53:59,585 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:53:59,585 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:53:59,599 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 326
2025-04-13 14:53:59,600 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  }
]

2025-04-13 14:54:02,887 - DEBUG - Polling for notifications...
2025-04-13 14:54:02,898 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552440 with data: None
2025-04-13 14:54:02,899 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:54:02,913 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552440 HTTP/1.1" 200 19
2025-04-13 14:54:02,914 - DEBUG - Received response: {
  "update": -1
}

2025-04-13 14:54:02,933 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/7 with data: None
2025-04-13 14:54:02,933 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:54:02,949 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/7 HTTP/1.1" 200 40
2025-04-13 14:54:02,949 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:54:03,827 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/7 with data: {}
2025-04-13 14:54:03,828 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:54:03,837 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/7 HTTP/1.1" 200 125
2025-04-13 14:54:03,877 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 14:54:03 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 14:54:07,919 - DEBUG - Polling for notifications...
2025-04-13 14:54:07,931 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552440 with data: None
2025-04-13 14:54:07,932 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:54:07,946 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552440 HTTP/1.1" 200 19
2025-04-13 14:54:07,947 - DEBUG - Received response: {
  "update": -1
}

2025-04-13 14:54:12,951 - DEBUG - Polling for notifications...
2025-04-13 14:54:12,963 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552440 with data: None
2025-04-13 14:54:12,964 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:54:12,978 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552440 HTTP/1.1" 200 19
2025-04-13 14:54:12,978 - DEBUG - Received response: {
  "update": -1
}

2025-04-13 14:55:11,594 - INFO - Application started.
2025-04-13 14:55:11,595 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:55:11,595 - INFO - Attempting to log in user: test
2025-04-13 14:55:11,598 - DEBUG - Loading KWallet
2025-04-13 14:55:11,598 - DEBUG - Loading SecretService
2025-04-13 14:55:11,607 - DEBUG - Loading Windows
2025-04-13 14:55:11,607 - DEBUG - Loading chainer
2025-04-13 14:55:11,608 - DEBUG - Loading libsecret
2025-04-13 14:55:11,608 - DEBUG - Loading macOS
2025-04-13 14:55:11,653 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:55:11,654 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:55:11,659 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 14:55:11,669 - DEBUG - Received response
2025-04-13 14:55:11,682 - INFO - User test logged in successfully.
2025-04-13 14:55:11,682 - INFO - Starting polling for notifications.
2025-04-13 14:55:11,683 - DEBUG - Polling for notifications...
2025-04-13 14:55:11,692 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552512 with data: None
2025-04-13 14:55:11,693 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:55:11,707 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552512 HTTP/1.1" 200 19
2025-04-13 14:55:11,708 - DEBUG - Received response: {
  "update": -9
}

2025-04-13 14:55:11,847 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:55:11,848 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:55:11,865 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 326
2025-04-13 14:55:11,865 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  }
]

2025-04-13 14:55:16,712 - DEBUG - Polling for notifications...
2025-04-13 14:55:16,724 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552512 with data: None
2025-04-13 14:55:16,725 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:55:16,739 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552512 HTTP/1.1" 200 19
2025-04-13 14:55:16,739 - DEBUG - Received response: {
  "update": -9
}

2025-04-13 14:55:18,163 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    local msg=$(get_param)\n    echo "Hello, World! $msg"\n}\n\n', 'name': 'hello.sh'}
2025-04-13 14:55:18,164 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:55:18,172 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-13 14:55:18,182 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 14:55:18,182 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 14:55:18,192 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:55:18,193 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:55:18,207 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 371
2025-04-13 14:55:18,207 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  }
]

2025-04-13 14:55:18,243 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:55:18,243 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:55:18,258 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 371
2025-04-13 14:55:18,258 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  }
]

2025-04-13 14:55:18,287 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:55:18,288 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:55:18,302 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 371
2025-04-13 14:55:18,302 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  }
]

2025-04-13 14:55:21,115 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/8 with data: None
2025-04-13 14:55:21,116 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:55:21,131 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/8 HTTP/1.1" 200 40
2025-04-13 14:55:21,132 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:55:21,744 - DEBUG - Polling for notifications...
2025-04-13 14:55:21,757 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552518 with data: None
2025-04-13 14:55:21,758 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:55:21,772 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552518 HTTP/1.1" 200 18
2025-04-13 14:55:21,772 - DEBUG - Received response: {
  "update": 0
}

2025-04-13 14:55:21,823 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/8 with data: {}
2025-04-13 14:55:21,824 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:55:21,832 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/8 HTTP/1.1" 200 125
2025-04-13 14:55:21,872 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 14:55:21 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 14:58:48,155 - INFO - Application started.
2025-04-13 14:58:48,156 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:58:48,156 - INFO - Attempting to log in user: test
2025-04-13 14:58:48,159 - DEBUG - Loading KWallet
2025-04-13 14:58:48,159 - DEBUG - Loading SecretService
2025-04-13 14:58:48,168 - DEBUG - Loading Windows
2025-04-13 14:58:48,168 - DEBUG - Loading chainer
2025-04-13 14:58:48,168 - DEBUG - Loading libsecret
2025-04-13 14:58:48,169 - DEBUG - Loading macOS
2025-04-13 14:58:48,214 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:58:48,215 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:58:48,215 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /login (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x79894d8edb40>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-04-13 14:59:32,474 - INFO - Application started.
2025-04-13 14:59:32,474 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 14:59:32,474 - INFO - Attempting to log in user: test
2025-04-13 14:59:32,477 - DEBUG - Loading KWallet
2025-04-13 14:59:32,478 - DEBUG - Loading SecretService
2025-04-13 14:59:32,486 - DEBUG - Loading Windows
2025-04-13 14:59:32,487 - DEBUG - Loading chainer
2025-04-13 14:59:32,487 - DEBUG - Loading libsecret
2025-04-13 14:59:32,487 - DEBUG - Loading macOS
2025-04-13 14:59:32,533 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 14:59:32,535 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:59:32,539 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 14:59:32,549 - DEBUG - Received response
2025-04-13 14:59:32,562 - INFO - User test logged in successfully.
2025-04-13 14:59:32,562 - INFO - Starting polling for notifications.
2025-04-13 14:59:32,563 - DEBUG - Polling for notifications...
2025-04-13 14:59:32,573 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552772 with data: None
2025-04-13 14:59:32,573 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:59:32,587 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552772 HTTP/1.1" 200 19
2025-04-13 14:59:32,588 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 14:59:32,726 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:59:32,727 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:59:32,744 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 371
2025-04-13 14:59:32,744 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  }
]

2025-04-13 14:59:37,593 - DEBUG - Polling for notifications...
2025-04-13 14:59:37,605 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552773 with data: None
2025-04-13 14:59:37,605 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:59:37,620 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552773 HTTP/1.1" 200 19
2025-04-13 14:59:37,620 - DEBUG - Received response: {
  "update": -9
}

2025-04-13 14:59:41,617 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    local msg=$(get_param)\n    echo "Hello, World! $msg"\n}\n\n', 'name': 'hello.sh'}
2025-04-13 14:59:41,618 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:59:41,626 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-13 14:59:41,636 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 14:59:41,636 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 14:59:41,646 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:59:41,647 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:59:41,661 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 416
2025-04-13 14:59:41,661 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  }
]

2025-04-13 14:59:41,697 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:59:41,698 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:59:41,712 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 416
2025-04-13 14:59:41,712 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  }
]

2025-04-13 14:59:41,743 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 14:59:41,744 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:59:41,758 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 416
2025-04-13 14:59:41,759 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  }
]

2025-04-13 14:59:42,625 - DEBUG - Polling for notifications...
2025-04-13 14:59:42,637 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552782 with data: None
2025-04-13 14:59:42,638 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:59:42,652 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552782 HTTP/1.1" 200 18
2025-04-13 14:59:42,653 - DEBUG - Received response: {
  "update": 0
}

2025-04-13 14:59:42,875 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-13 14:59:42,876 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:59:42,891 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-13 14:59:42,892 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 14:59:43,571 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/9 with data: {}
2025-04-13 14:59:43,572 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 14:59:43,581 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/9 HTTP/1.1" 200 125
2025-04-13 14:59:43,621 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 14:59:43 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 15:01:21,930 - INFO - Application started.
2025-04-13 15:01:21,930 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 15:01:21,930 - INFO - Attempting to log in user: test
2025-04-13 15:01:21,933 - DEBUG - Loading KWallet
2025-04-13 15:01:21,933 - DEBUG - Loading SecretService
2025-04-13 15:01:21,942 - DEBUG - Loading Windows
2025-04-13 15:01:21,942 - DEBUG - Loading chainer
2025-04-13 15:01:21,942 - DEBUG - Loading libsecret
2025-04-13 15:01:21,943 - DEBUG - Loading macOS
2025-04-13 15:01:21,989 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 15:01:21,990 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:01:21,994 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 15:01:22,004 - DEBUG - Received response
2025-04-13 15:01:22,019 - INFO - User test logged in successfully.
2025-04-13 15:01:22,020 - INFO - Starting polling for notifications.
2025-04-13 15:01:22,020 - DEBUG - Polling for notifications...
2025-04-13 15:01:22,029 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552882 with data: None
2025-04-13 15:01:22,030 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:01:22,044 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552882 HTTP/1.1" 200 20
2025-04-13 15:01:22,045 - DEBUG - Received response: {
  "update": -10
}

2025-04-13 15:01:22,184 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 15:01:22,185 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:01:22,202 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 416
2025-04-13 15:01:22,202 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  }
]

2025-04-13 15:01:27,050 - DEBUG - Polling for notifications...
2025-04-13 15:01:27,062 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552882 with data: None
2025-04-13 15:01:27,062 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:01:27,077 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552882 HTTP/1.1" 200 20
2025-04-13 15:01:27,077 - DEBUG - Received response: {
  "update": -10
}

2025-04-13 15:01:32,082 - DEBUG - Polling for notifications...
2025-04-13 15:01:32,095 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552882 with data: None
2025-04-13 15:01:32,096 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:01:32,110 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552882 HTTP/1.1" 200 20
2025-04-13 15:01:32,110 - DEBUG - Received response: {
  "update": -10
}

2025-04-13 15:01:36,632 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    local msg=$(get_param)\n    echo "Hello, World! $msg"\n}\n\n', 'name': 'hello.sh'}
2025-04-13 15:01:36,632 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:01:36,641 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-13 15:01:36,651 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 15:01:36,651 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-13 15:01:36,661 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 15:01:36,662 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:01:36,676 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 15:01:36,676 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 15:01:36,718 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 15:01:36,719 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:01:36,733 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 15:01:36,733 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 15:01:36,767 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 15:01:36,768 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:01:36,782 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 15:01:36,782 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 15:01:37,115 - DEBUG - Polling for notifications...
2025-04-13 15:01:37,128 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744552897 with data: None
2025-04-13 15:01:37,128 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:01:37,142 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744552897 HTTP/1.1" 200 18
2025-04-13 15:01:37,143 - DEBUG - Received response: {
  "update": 0
}

2025-04-13 15:01:37,435 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 15:01:37,436 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:01:37,452 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 15:01:37,452 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 15:01:38,217 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 15:01:38,217 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:01:38,226 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 125
2025-04-13 15:01:38,267 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 15:01:38 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 15:03:54,298 - INFO - Application started.
2025-04-13 15:03:54,298 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 15:03:54,298 - INFO - Attempting to log in user: test
2025-04-13 15:03:54,301 - DEBUG - Loading KWallet
2025-04-13 15:03:54,301 - DEBUG - Loading SecretService
2025-04-13 15:03:54,310 - DEBUG - Loading Windows
2025-04-13 15:03:54,311 - DEBUG - Loading chainer
2025-04-13 15:03:54,311 - DEBUG - Loading libsecret
2025-04-13 15:03:54,311 - DEBUG - Loading macOS
2025-04-13 15:03:54,356 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 15:03:54,357 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:03:54,361 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 15:03:54,372 - DEBUG - Received response
2025-04-13 15:03:54,385 - INFO - User test logged in successfully.
2025-04-13 15:03:54,385 - INFO - Starting polling for notifications.
2025-04-13 15:03:54,386 - DEBUG - Polling for notifications...
2025-04-13 15:03:54,396 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744553034 with data: None
2025-04-13 15:03:54,398 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:03:54,411 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744553034 HTTP/1.1" 200 20
2025-04-13 15:03:54,412 - DEBUG - Received response: {
  "update": -12
}

2025-04-13 15:03:54,552 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 15:03:54,553 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:03:54,569 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 15:03:54,570 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 15:03:55,596 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 15:03:55,597 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:03:55,613 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 15:03:55,614 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 15:03:56,289 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 15:03:56,290 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:03:56,299 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 125
2025-04-13 15:03:56,339 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 15:03:56 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 15:03:58,866 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 15:03:58,867 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:03:58,882 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 15:03:58,882 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 15:03:59,417 - DEBUG - Polling for notifications...
2025-04-13 15:03:59,429 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744553035 with data: None
2025-04-13 15:03:59,430 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:03:59,444 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744553035 HTTP/1.1" 200 20
2025-04-13 15:03:59,444 - DEBUG - Received response: {
  "update": -13
}

2025-04-13 15:03:59,612 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 15:03:59,613 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:03:59,621 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 125
2025-04-13 15:03:59,663 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 15:03:59 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 15:06:38,858 - INFO - Application started.
2025-04-13 15:06:38,858 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 15:06:38,859 - INFO - Attempting to log in user: test
2025-04-13 15:06:38,861 - DEBUG - Loading KWallet
2025-04-13 15:06:38,862 - DEBUG - Loading SecretService
2025-04-13 15:06:38,871 - DEBUG - Loading Windows
2025-04-13 15:06:38,872 - DEBUG - Loading chainer
2025-04-13 15:06:38,872 - DEBUG - Loading libsecret
2025-04-13 15:06:38,872 - DEBUG - Loading macOS
2025-04-13 15:06:38,918 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 15:06:38,919 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:06:38,923 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 15:06:38,933 - DEBUG - Received response
2025-04-13 15:06:38,946 - INFO - User test logged in successfully.
2025-04-13 15:06:38,947 - INFO - Starting polling for notifications.
2025-04-13 15:06:38,947 - DEBUG - Polling for notifications...
2025-04-13 15:06:38,957 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744553199 with data: None
2025-04-13 15:06:38,957 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:06:38,971 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744553199 HTTP/1.1" 200 20
2025-04-13 15:06:38,972 - DEBUG - Received response: {
  "update": -15
}

2025-04-13 15:06:39,130 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 15:06:39,131 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:06:39,147 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 15:06:39,148 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 15:06:40,170 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 15:06:40,170 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:06:40,186 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 15:06:40,187 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 15:06:40,832 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 15:06:40,833 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:06:40,842 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 125
2025-04-13 15:06:40,884 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 15:06:40 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 15:06:43,977 - DEBUG - Polling for notifications...
2025-04-13 15:06:43,989 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744553199 with data: None
2025-04-13 15:06:43,990 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:06:44,004 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744553199 HTTP/1.1" 200 20
2025-04-13 15:06:44,004 - DEBUG - Received response: {
  "update": -15
}

2025-04-13 15:07:12,294 - INFO - Application started.
2025-04-13 15:07:12,294 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 15:07:12,294 - INFO - Attempting to log in user: test
2025-04-13 15:07:12,297 - DEBUG - Loading KWallet
2025-04-13 15:07:12,297 - DEBUG - Loading SecretService
2025-04-13 15:07:12,306 - DEBUG - Loading Windows
2025-04-13 15:07:12,306 - DEBUG - Loading chainer
2025-04-13 15:07:12,307 - DEBUG - Loading libsecret
2025-04-13 15:07:12,307 - DEBUG - Loading macOS
2025-04-13 15:07:12,352 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 15:07:12,353 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:07:12,357 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 15:07:12,367 - DEBUG - Received response
2025-04-13 15:07:12,413 - INFO - User test logged in successfully.
2025-04-13 15:07:12,413 - INFO - Starting polling for notifications.
2025-04-13 15:07:12,414 - DEBUG - Polling for notifications...
2025-04-13 15:07:12,423 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744553232 with data: None
2025-04-13 15:07:12,424 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:07:12,438 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744553232 HTTP/1.1" 200 19
2025-04-13 15:07:12,439 - DEBUG - Received response: {
  "update": -7
}

2025-04-13 15:07:12,580 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 15:07:12,581 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:07:12,597 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 15:07:12,598 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 15:07:13,801 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 15:07:13,802 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:07:13,817 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 15:07:13,818 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 15:07:14,699 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 15:07:14,699 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:07:14,709 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 125
2025-04-13 15:07:14,749 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 15:07:14 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 15:07:41,200 - INFO - Application started.
2025-04-13 15:07:41,200 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 15:07:41,200 - INFO - Attempting to log in user: test
2025-04-13 15:07:41,203 - DEBUG - Loading KWallet
2025-04-13 15:07:41,204 - DEBUG - Loading SecretService
2025-04-13 15:07:41,212 - DEBUG - Loading Windows
2025-04-13 15:07:41,213 - DEBUG - Loading chainer
2025-04-13 15:07:41,213 - DEBUG - Loading libsecret
2025-04-13 15:07:41,213 - DEBUG - Loading macOS
2025-04-13 15:07:41,260 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 15:07:41,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:07:41,266 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 15:07:41,276 - DEBUG - Received response
2025-04-13 15:07:41,290 - INFO - User test logged in successfully.
2025-04-13 15:07:41,290 - INFO - Starting polling for notifications.
2025-04-13 15:07:41,290 - DEBUG - Polling for notifications...
2025-04-13 15:07:41,300 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744553261 with data: None
2025-04-13 15:07:41,301 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:07:41,315 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744553261 HTTP/1.1" 200 20
2025-04-13 15:07:41,315 - DEBUG - Received response: {
  "update": -10
}

2025-04-13 15:07:41,462 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 15:07:41,463 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:07:41,480 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 15:07:41,481 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 15:07:42,337 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 15:07:42,338 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:07:42,353 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 15:07:42,354 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 15:07:43,010 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 15:07:43,011 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:07:43,021 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 125
2025-04-13 15:07:43,061 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 15:07:43 GMT",
  "log": "Errore nell'esecuzione del plugin Bash",
  "status": "finished"
}

2025-04-13 15:07:46,320 - DEBUG - Polling for notifications...
2025-04-13 15:07:46,331 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744553261 with data: None
2025-04-13 15:07:46,332 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 15:07:46,346 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744553261 HTTP/1.1" 200 20
2025-04-13 15:07:46,346 - DEBUG - Received response: {
  "update": -10
}

2025-04-13 16:13:46,716 - INFO - Application started.
2025-04-13 16:13:46,716 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:13:46,716 - INFO - Attempting to log in user: test
2025-04-13 16:13:46,719 - DEBUG - Loading KWallet
2025-04-13 16:13:46,720 - DEBUG - Loading SecretService
2025-04-13 16:13:46,728 - DEBUG - Loading Windows
2025-04-13 16:13:46,729 - DEBUG - Loading chainer
2025-04-13 16:13:46,729 - DEBUG - Loading libsecret
2025-04-13 16:13:46,729 - DEBUG - Loading macOS
2025-04-13 16:13:46,775 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:13:46,776 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:13:46,780 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:13:46,790 - DEBUG - Received response
2025-04-13 16:13:46,804 - INFO - User test logged in successfully.
2025-04-13 16:13:46,804 - INFO - Starting polling for notifications.
2025-04-13 16:13:46,804 - DEBUG - Polling for notifications...
2025-04-13 16:13:46,814 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:13:46,815 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:13:46,828 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 200 20
2025-04-13 16:13:46,829 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 16:13:46,965 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:13:46,965 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:13:46,982 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:13:46,982 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:13:48,271 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:13:48,271 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:13:48,287 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:13:48,287 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:13:49,206 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:13:49,206 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:13:49,215 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 133
2025-04-13 16:13:49,256 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:13:49 GMT",
  "log": "Errore generico: 'str' object is not a mapping",
  "status": "finished"
}

2025-04-13 16:13:51,834 - DEBUG - Polling for notifications...
2025-04-13 16:13:51,846 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:13:51,847 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:13:51,861 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 200 20
2025-04-13 16:13:51,861 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 16:13:56,867 - DEBUG - Polling for notifications...
2025-04-13 16:13:56,879 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:13:56,880 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:13:56,894 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 200 20
2025-04-13 16:13:56,894 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 16:14:01,919 - DEBUG - Polling for notifications...
2025-04-13 16:14:01,929 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:14:01,929 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:01,943 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 200 20
2025-04-13 16:14:01,943 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 16:14:03,773 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:14:03,774 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:03,781 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 133
2025-04-13 16:14:03,822 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:14:03 GMT",
  "log": "Errore generico: 'str' object is not a mapping",
  "status": "finished"
}

2025-04-13 16:14:06,949 - DEBUG - Polling for notifications...
2025-04-13 16:14:06,962 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:14:06,963 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:06,977 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 200 20
2025-04-13 16:14:06,977 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 16:14:11,982 - DEBUG - Polling for notifications...
2025-04-13 16:14:11,995 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:14:11,995 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:12,009 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 200 20
2025-04-13 16:14:12,010 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 16:14:17,035 - DEBUG - Polling for notifications...
2025-04-13 16:14:17,047 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:14:17,048 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:17,062 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 200 20
2025-04-13 16:14:17,063 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 16:14:22,088 - DEBUG - Polling for notifications...
2025-04-13 16:14:22,101 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:14:22,101 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:22,115 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 200 20
2025-04-13 16:14:22,116 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 16:14:27,141 - DEBUG - Polling for notifications...
2025-04-13 16:14:27,153 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:14:27,154 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:27,168 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 200 20
2025-04-13 16:14:27,168 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 16:14:32,193 - DEBUG - Polling for notifications...
2025-04-13 16:14:32,206 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:14:32,207 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:32,221 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 200 20
2025-04-13 16:14:32,221 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 16:14:37,246 - DEBUG - Polling for notifications...
2025-04-13 16:14:37,258 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:14:37,259 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:37,273 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 200 20
2025-04-13 16:14:37,273 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 16:14:42,299 - DEBUG - Polling for notifications...
2025-04-13 16:14:42,312 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:14:42,313 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:42,326 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 200 20
2025-04-13 16:14:42,327 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 16:14:47,081 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:14:47,082 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:47,097 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 422 45
2025-04-13 16:14:47,098 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-04-13 16:14:47,098 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-04-13 16:14:47,352 - DEBUG - Polling for notifications...
2025-04-13 16:14:47,364 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557227 with data: None
2025-04-13 16:14:47,365 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:47,379 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557227 HTTP/1.1" 422 45
2025-04-13 16:14:47,379 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-04-13 16:14:47,379 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-04-13 16:14:48,034 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:14:48,034 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:48,038 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 422 45
2025-04-13 16:14:48,079 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-04-13 16:14:48,079 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-04-13 16:14:57,327 - INFO - Application started.
2025-04-13 16:14:57,327 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:14:57,327 - INFO - Attempting to log in user: test
2025-04-13 16:14:57,330 - DEBUG - Loading KWallet
2025-04-13 16:14:57,330 - DEBUG - Loading SecretService
2025-04-13 16:14:57,339 - DEBUG - Loading Windows
2025-04-13 16:14:57,340 - DEBUG - Loading chainer
2025-04-13 16:14:57,340 - DEBUG - Loading libsecret
2025-04-13 16:14:57,340 - DEBUG - Loading macOS
2025-04-13 16:14:57,385 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:14:57,386 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:57,390 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:14:57,400 - DEBUG - Received response
2025-04-13 16:14:57,413 - INFO - User test logged in successfully.
2025-04-13 16:14:57,413 - INFO - Starting polling for notifications.
2025-04-13 16:14:57,414 - DEBUG - Polling for notifications...
2025-04-13 16:14:57,424 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557297 with data: None
2025-04-13 16:14:57,425 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:57,439 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557297 HTTP/1.1" 200 20
2025-04-13 16:14:57,439 - DEBUG - Received response: {
  "update": -12
}

2025-04-13 16:14:57,581 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:14:57,582 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:57,599 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:14:57,600 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:14:58,702 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:14:58,703 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:58,720 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:14:58,720 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:14:59,367 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:14:59,368 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:14:59,378 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 89
2025-04-13 16:14:59,419 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:14:59 GMT",
  "log": null,
  "status": "finished"
}

2025-04-13 16:15:02,444 - DEBUG - Polling for notifications...
2025-04-13 16:15:02,456 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557298 with data: None
2025-04-13 16:15:02,457 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:15:02,471 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557298 HTTP/1.1" 200 20
2025-04-13 16:15:02,472 - DEBUG - Received response: {
  "update": -13
}

2025-04-13 16:16:11,250 - INFO - Application started.
2025-04-13 16:16:11,250 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:16:11,250 - INFO - Attempting to log in user: test
2025-04-13 16:16:11,254 - DEBUG - Loading KWallet
2025-04-13 16:16:11,254 - DEBUG - Loading SecretService
2025-04-13 16:16:11,263 - DEBUG - Loading Windows
2025-04-13 16:16:11,263 - DEBUG - Loading chainer
2025-04-13 16:16:11,264 - DEBUG - Loading libsecret
2025-04-13 16:16:11,264 - DEBUG - Loading macOS
2025-04-13 16:16:11,308 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:16:11,310 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:16:11,313 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:16:11,323 - DEBUG - Received response
2025-04-13 16:16:11,336 - INFO - User test logged in successfully.
2025-04-13 16:16:11,336 - INFO - Starting polling for notifications.
2025-04-13 16:16:11,337 - DEBUG - Polling for notifications...
2025-04-13 16:16:11,346 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557371 with data: None
2025-04-13 16:16:11,347 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:16:11,361 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557371 HTTP/1.1" 200 20
2025-04-13 16:16:11,361 - DEBUG - Received response: {
  "update": -86
}

2025-04-13 16:16:11,500 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:16:11,500 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:16:11,515 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:16:11,515 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:16:12,501 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:16:12,502 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:16:12,517 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:16:12,517 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:16:13,389 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:16:13,390 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:16:13,399 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 89
2025-04-13 16:16:13,439 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:16:13 GMT",
  "log": null,
  "status": "finished"
}

2025-04-13 16:17:47,369 - INFO - Application started.
2025-04-13 16:17:47,369 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:17:47,369 - INFO - Attempting to log in user: test
2025-04-13 16:17:47,372 - DEBUG - Loading KWallet
2025-04-13 16:17:47,373 - DEBUG - Loading SecretService
2025-04-13 16:17:47,381 - DEBUG - Loading Windows
2025-04-13 16:17:47,382 - DEBUG - Loading chainer
2025-04-13 16:17:47,382 - DEBUG - Loading libsecret
2025-04-13 16:17:47,382 - DEBUG - Loading macOS
2025-04-13 16:17:47,426 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:17:47,427 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:17:47,431 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:17:47,442 - DEBUG - Received response
2025-04-13 16:17:47,455 - INFO - User test logged in successfully.
2025-04-13 16:17:47,455 - INFO - Starting polling for notifications.
2025-04-13 16:17:47,455 - DEBUG - Polling for notifications...
2025-04-13 16:17:47,465 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557467 with data: None
2025-04-13 16:17:47,466 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:17:47,480 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557467 HTTP/1.1" 200 20
2025-04-13 16:17:47,481 - DEBUG - Received response: {
  "update": -23
}

2025-04-13 16:17:47,625 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:17:47,626 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:17:47,643 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:17:47,643 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:17:48,641 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:17:48,642 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:17:48,658 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:17:48,658 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:17:49,607 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:17:49,607 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:17:49,630 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 500 60126
2025-04-13 16:17:49,672 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.InterfaceError: (sqlite3.InterfaceError) Error binding parameter 2 - probably unsupported type.
[SQL: INSERT INTO &#34;Log&#34; (&#34;dateLog&#34;, success, result) VALUES (?, ?, ?)]
[parameters: (&#39;2025-04-13 16:17:49.611825&#39;, 1, CompletedProcess(args=&#39;. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh&#39;, returncode=0))]
(Background on this error at: https://sqlalche.me/e/20/rvf5)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "GtvkSQGoXf918N01SQvh";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>InterfaceError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.InterfaceError: (sqlite3.InterfaceError) Error binding parameter 2 - probably unsupported type.
[SQL: INSERT INTO &#34;Log&#34; (&#34;dateLog&#34;, success, result) VALUES (?, ?, ?)]
[parameters: (&#39;2025-04-13 16:17:49.611825&#39;, 1, CompletedProcess(args=&#39;. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh&#39;, returncode=0))]
(Background on this error at: https://sqlalche.me/e/20/rvf5)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-138691790970592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-138691790970704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-138691811298768">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-138691793169296">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-138691793169408">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-138691793169520">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-138691793169632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-138691793169744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-138691793169856">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691793274464">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-138691793278720">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">227</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(str(result[&#39;datetime&#39;])),</pre>
<pre class="line before"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line before"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line current"><span class="ws">    </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">    </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def start():</pre>
<pre class="line after"><span class="ws">    </span>with app.app_context():</pre>
<pre class="line after"><span class="ws">        </span>db.create_all()  # This will create the tables again</pre></div>
</div>

<li><div class="frame" id="frame-138691793278832">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-138691793427968">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-138691791767808">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-138691791767920">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-138691791771728">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-138691791771840">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-138691791771952">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-138691791772064">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-138691791772176">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-138691791772288">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-138691791772400">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691791963632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691791963744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691792012896">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691792013008">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py"</cite>,
      line <em class="line">93</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>mapper,</pre>
<pre class="line before"><span class="ws">            </span>table,</pre>
<pre class="line before"><span class="ws">            </span>update,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_insert_statements(</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>insert,</pre></div>
</div>

<li><div class="frame" id="frame-138691792139568">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py"</cite>,
      line <em class="line">1233</em>,
      in <code class="function">_emit_insert_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>statement.values(value_params),</pre>
<pre class="line before"><span class="ws">                            </span>params,</pre>
<pre class="line before"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line before"><span class="ws">                        </span>)</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line current"><span class="ws">                        </span>result = connection.execute(</pre>
<pre class="line after"><span class="ws">                            </span>statement,</pre>
<pre class="line after"><span class="ws">                            </span>params,</pre>
<pre class="line after"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">                        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691792139680">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691792446608">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691790742560">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-138691790742672">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-138691790742784">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691790742896">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-138691790743008">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-138691790743120">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.InterfaceError: (sqlite3.InterfaceError) Error binding parameter 2 - probably unsupported type.
[SQL: INSERT INTO &#34;Log&#34; (&#34;dateLog&#34;, success, result) VALUES (?, ?, ?)]
[parameters: (&#39;2025-04-13 16:17:49.611825&#39;, 1, CompletedProcess(args=&#39;. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh&#39;, returncode=0))]
(Background on this error at: https://sqlalche.me/e/20/rvf5)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.InterfaceError: Error binding parameter 2 - probably unsupported type.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    logUpdate(result)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 227, in logUpdate
    db.session.commit()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj
    _emit_insert_statements(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1233, in _emit_insert_statements
    result = connection.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.InterfaceError: (sqlite3.InterfaceError) Error binding parameter 2 - probably unsupported type.
[SQL: INSERT INTO &#34;Log&#34; (&#34;dateLog&#34;, success, result) VALUES (?, ?, ?)]
[parameters: (&#39;2025-04-13 16:17:49.611825&#39;, 1, CompletedProcess(args=&#39;. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh&#39;, returncode=0))]
(Background on this error at: https://sqlalche.me/e/20/rvf5)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.InterfaceError: Error binding parameter 2 - probably unsupported type.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    logUpdate(result)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 227, in logUpdate
    db.session.commit()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/scoping.py", line 599, in commit
    return self._proxied.commit()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 4353, in flush
    self._flush(objects)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 4488, in _flush
    with util.safe_reraise():
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 4449, in _flush
    flush_context.execute()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py", line 466, in execute
    rec.execute(self)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.InterfaceError: (sqlite3.InterfaceError) Error binding parameter 2 - probably unsupported type.
[SQL: INSERT INTO "Log" ("dateLog", success, result) VALUES (?, ?, ?)]
[parameters: ('2025-04-13 16:17:49.611825', 1, CompletedProcess(args='. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh', returncode=0))]
(Background on this error at: https://sqlalche.me/e/20/rvf5)


-->

2025-04-13 16:17:49,672 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.InterfaceError: (sqlite3.InterfaceError) Error binding parameter 2 - probably unsupported type.
[SQL: INSERT INTO &#34;Log&#34; (&#34;dateLog&#34;, success, result) VALUES (?, ?, ?)]
[parameters: (&#39;2025-04-13 16:17:49.611825&#39;, 1, CompletedProcess(args=&#39;. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh&#39;, returncode=0))]
(Background on this error at: https://sqlalche.me/e/20/rvf5)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "GtvkSQGoXf918N01SQvh";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>InterfaceError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.InterfaceError: (sqlite3.InterfaceError) Error binding parameter 2 - probably unsupported type.
[SQL: INSERT INTO &#34;Log&#34; (&#34;dateLog&#34;, success, result) VALUES (?, ?, ?)]
[parameters: (&#39;2025-04-13 16:17:49.611825&#39;, 1, CompletedProcess(args=&#39;. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh&#39;, returncode=0))]
(Background on this error at: https://sqlalche.me/e/20/rvf5)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-138691790970592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-138691790970704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-138691811298768">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-138691793169296">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-138691793169408">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-138691793169520">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-138691793169632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-138691793169744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-138691793169856">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691793274464">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-138691793278720">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">227</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(str(result[&#39;datetime&#39;])),</pre>
<pre class="line before"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line before"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line current"><span class="ws">    </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">    </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def start():</pre>
<pre class="line after"><span class="ws">    </span>with app.app_context():</pre>
<pre class="line after"><span class="ws">        </span>db.create_all()  # This will create the tables again</pre></div>
</div>

<li><div class="frame" id="frame-138691793278832">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-138691793427968">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-138691791767808">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-138691791767920">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-138691791771728">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-138691791771840">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-138691791771952">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-138691791772064">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-138691791772176">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-138691791772288">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-138691791772400">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691791963632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691791963744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691792012896">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691792013008">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py"</cite>,
      line <em class="line">93</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>mapper,</pre>
<pre class="line before"><span class="ws">            </span>table,</pre>
<pre class="line before"><span class="ws">            </span>update,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_insert_statements(</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>insert,</pre></div>
</div>

<li><div class="frame" id="frame-138691792139568">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py"</cite>,
      line <em class="line">1233</em>,
      in <code class="function">_emit_insert_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>statement.values(value_params),</pre>
<pre class="line before"><span class="ws">                            </span>params,</pre>
<pre class="line before"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line before"><span class="ws">                        </span>)</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line current"><span class="ws">                        </span>result = connection.execute(</pre>
<pre class="line after"><span class="ws">                            </span>statement,</pre>
<pre class="line after"><span class="ws">                            </span>params,</pre>
<pre class="line after"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">                        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691792139680">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691792446608">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691790742560">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-138691790742672">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-138691790742784">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-138691790742896">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-138691790743008">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-138691790743120">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.InterfaceError: (sqlite3.InterfaceError) Error binding parameter 2 - probably unsupported type.
[SQL: INSERT INTO &#34;Log&#34; (&#34;dateLog&#34;, success, result) VALUES (?, ?, ?)]
[parameters: (&#39;2025-04-13 16:17:49.611825&#39;, 1, CompletedProcess(args=&#39;. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh&#39;, returncode=0))]
(Background on this error at: https://sqlalche.me/e/20/rvf5)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.InterfaceError: Error binding parameter 2 - probably unsupported type.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    logUpdate(result)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 227, in logUpdate
    db.session.commit()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj
    _emit_insert_statements(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1233, in _emit_insert_statements
    result = connection.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.InterfaceError: (sqlite3.InterfaceError) Error binding parameter 2 - probably unsupported type.
[SQL: INSERT INTO &#34;Log&#34; (&#34;dateLog&#34;, success, result) VALUES (?, ?, ?)]
[parameters: (&#39;2025-04-13 16:17:49.611825&#39;, 1, CompletedProcess(args=&#39;. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh&#39;, returncode=0))]
(Background on this error at: https://sqlalche.me/e/20/rvf5)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.InterfaceError: Error binding parameter 2 - probably unsupported type.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    logUpdate(result)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 227, in logUpdate
    db.session.commit()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/scoping.py", line 599, in commit
    return self._proxied.commit()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 4353, in flush
    self._flush(objects)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 4488, in _flush
    with util.safe_reraise():
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 4449, in _flush
    flush_context.execute()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py", line 466, in execute
    rec.execute(self)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.InterfaceError: (sqlite3.InterfaceError) Error binding parameter 2 - probably unsupported type.
[SQL: INSERT INTO "Log" ("dateLog", success, result) VALUES (?, ?, ?)]
[parameters: ('2025-04-13 16:17:49.611825', 1, CompletedProcess(args='. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh', returncode=0))]
(Background on this error at: https://sqlalche.me/e/20/rvf5)


-->

2025-04-13 16:17:52,486 - DEBUG - Polling for notifications...
2025-04-13 16:17:52,498 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557468 with data: None
2025-04-13 16:17:52,498 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:17:52,512 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557468 HTTP/1.1" 200 20
2025-04-13 16:17:52,513 - DEBUG - Received response: {
  "update": -24
}

2025-04-13 16:18:57,516 - INFO - Application started.
2025-04-13 16:18:57,516 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:18:57,516 - INFO - Attempting to log in user: test
2025-04-13 16:18:57,519 - DEBUG - Loading KWallet
2025-04-13 16:18:57,520 - DEBUG - Loading SecretService
2025-04-13 16:18:57,528 - DEBUG - Loading Windows
2025-04-13 16:18:57,528 - DEBUG - Loading chainer
2025-04-13 16:18:57,528 - DEBUG - Loading libsecret
2025-04-13 16:18:57,529 - DEBUG - Loading macOS
2025-04-13 16:18:57,573 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:18:57,574 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:18:57,579 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:18:57,589 - DEBUG - Received response
2025-04-13 16:18:57,602 - INFO - User test logged in successfully.
2025-04-13 16:18:57,602 - INFO - Starting polling for notifications.
2025-04-13 16:18:57,603 - DEBUG - Polling for notifications...
2025-04-13 16:18:57,612 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557538 with data: None
2025-04-13 16:18:57,613 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:18:57,627 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557538 HTTP/1.1" 200 20
2025-04-13 16:18:57,627 - DEBUG - Received response: {
  "update": -15
}

2025-04-13 16:18:57,770 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:18:57,771 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:18:57,787 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:18:57,788 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:18:58,762 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:18:58,763 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:18:58,779 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:18:58,779 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:18:59,410 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:18:59,411 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:18:59,421 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 89
2025-04-13 16:18:59,461 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:18:59 GMT",
  "log": null,
  "status": "finished"
}

2025-04-13 16:19:02,633 - DEBUG - Polling for notifications...
2025-04-13 16:19:02,645 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557538 with data: None
2025-04-13 16:19:02,646 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:19:02,660 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557538 HTTP/1.1" 200 20
2025-04-13 16:19:02,660 - DEBUG - Received response: {
  "update": -15
}

2025-04-13 16:19:04,068 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:19:04,069 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:19:04,077 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 89
2025-04-13 16:19:04,118 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:19:04 GMT",
  "log": null,
  "status": "finished"
}

2025-04-13 16:21:05,821 - INFO - Application started.
2025-04-13 16:21:05,821 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:21:05,821 - INFO - Attempting to log in user: test
2025-04-13 16:21:05,824 - DEBUG - Loading KWallet
2025-04-13 16:21:05,824 - DEBUG - Loading SecretService
2025-04-13 16:21:05,833 - DEBUG - Loading Windows
2025-04-13 16:21:05,833 - DEBUG - Loading chainer
2025-04-13 16:21:05,834 - DEBUG - Loading libsecret
2025-04-13 16:21:05,834 - DEBUG - Loading macOS
2025-04-13 16:21:05,878 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:21:05,879 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:21:05,883 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:21:05,893 - DEBUG - Received response
2025-04-13 16:21:05,906 - INFO - User test logged in successfully.
2025-04-13 16:21:05,906 - INFO - Starting polling for notifications.
2025-04-13 16:21:05,906 - DEBUG - Polling for notifications...
2025-04-13 16:21:05,916 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557666 with data: None
2025-04-13 16:21:05,917 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:21:05,930 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557666 HTTP/1.1" 200 21
2025-04-13 16:21:05,931 - DEBUG - Received response: {
  "update": -143
}

2025-04-13 16:21:06,058 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:21:06,058 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:21:06,073 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:21:06,073 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:21:07,494 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:21:07,495 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:21:07,510 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:21:07,510 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:21:08,126 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:21:08,126 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:21:08,135 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 233
2025-04-13 16:21:08,176 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:21:08 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command '. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 16:21:10,936 - DEBUG - Polling for notifications...
2025-04-13 16:21:10,949 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557666 with data: None
2025-04-13 16:21:10,949 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:21:10,963 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557666 HTTP/1.1" 200 21
2025-04-13 16:21:10,964 - DEBUG - Received response: {
  "update": -143
}

2025-04-13 16:22:06,642 - INFO - Application started.
2025-04-13 16:22:06,642 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:22:06,642 - INFO - Attempting to log in user: test
2025-04-13 16:22:06,645 - DEBUG - Loading KWallet
2025-04-13 16:22:06,645 - DEBUG - Loading SecretService
2025-04-13 16:22:06,654 - DEBUG - Loading Windows
2025-04-13 16:22:06,654 - DEBUG - Loading chainer
2025-04-13 16:22:06,655 - DEBUG - Loading libsecret
2025-04-13 16:22:06,655 - DEBUG - Loading macOS
2025-04-13 16:22:06,699 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:22:06,700 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:22:06,703 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:22:06,713 - DEBUG - Received response
2025-04-13 16:22:06,727 - INFO - User test logged in successfully.
2025-04-13 16:22:06,727 - INFO - Starting polling for notifications.
2025-04-13 16:22:06,727 - DEBUG - Polling for notifications...
2025-04-13 16:22:06,737 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557727 with data: None
2025-04-13 16:22:06,737 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:22:06,751 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557727 HTTP/1.1" 200 21
2025-04-13 16:22:06,751 - DEBUG - Received response: {
  "update": -204
}

2025-04-13 16:22:06,890 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:22:06,891 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:22:06,905 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:22:06,905 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:22:07,936 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:22:07,937 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:22:07,951 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:22:07,952 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:22:08,525 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:22:08,526 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:22:08,534 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 233
2025-04-13 16:22:08,574 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:22:08 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command '. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 16:22:38,993 - INFO - Application started.
2025-04-13 16:22:38,993 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:22:38,993 - INFO - Attempting to log in user: test
2025-04-13 16:22:38,996 - DEBUG - Loading KWallet
2025-04-13 16:22:38,996 - DEBUG - Loading SecretService
2025-04-13 16:22:39,005 - DEBUG - Loading Windows
2025-04-13 16:22:39,005 - DEBUG - Loading chainer
2025-04-13 16:22:39,006 - DEBUG - Loading libsecret
2025-04-13 16:22:39,006 - DEBUG - Loading macOS
2025-04-13 16:22:39,051 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:22:39,052 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:22:39,056 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:22:39,066 - DEBUG - Received response
2025-04-13 16:22:39,079 - INFO - User test logged in successfully.
2025-04-13 16:22:39,079 - INFO - Starting polling for notifications.
2025-04-13 16:22:39,079 - DEBUG - Polling for notifications...
2025-04-13 16:22:39,089 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557759 with data: None
2025-04-13 16:22:39,090 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:22:39,103 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557759 HTTP/1.1" 200 21
2025-04-13 16:22:39,104 - DEBUG - Received response: {
  "update": -236
}

2025-04-13 16:22:39,241 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:22:39,242 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:22:39,256 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:22:39,256 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:22:40,170 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:22:40,171 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:22:40,185 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:22:40,186 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:22:40,711 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:22:40,712 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:22:40,720 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 233
2025-04-13 16:22:40,761 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:22:40 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command '. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 16:23:09,335 - INFO - Application started.
2025-04-13 16:23:09,336 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:23:09,336 - INFO - Attempting to log in user: test
2025-04-13 16:23:09,339 - DEBUG - Loading KWallet
2025-04-13 16:23:09,339 - DEBUG - Loading SecretService
2025-04-13 16:23:09,348 - DEBUG - Loading Windows
2025-04-13 16:23:09,348 - DEBUG - Loading chainer
2025-04-13 16:23:09,348 - DEBUG - Loading libsecret
2025-04-13 16:23:09,349 - DEBUG - Loading macOS
2025-04-13 16:23:09,392 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:23:09,394 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:23:09,397 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:23:09,407 - DEBUG - Received response
2025-04-13 16:23:09,421 - INFO - User test logged in successfully.
2025-04-13 16:23:09,421 - INFO - Starting polling for notifications.
2025-04-13 16:23:09,421 - DEBUG - Polling for notifications...
2025-04-13 16:23:09,431 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557789 with data: None
2025-04-13 16:23:09,431 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:23:09,445 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557789 HTTP/1.1" 200 21
2025-04-13 16:23:09,445 - DEBUG - Received response: {
  "update": -266
}

2025-04-13 16:23:09,575 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:23:09,576 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:23:09,590 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:23:09,590 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:23:10,457 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:23:10,458 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:23:10,473 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:23:10,473 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:23:11,027 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:23:11,028 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:23:11,039 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 89
2025-04-13 16:23:11,079 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:23:11 GMT",
  "log": null,
  "status": "finished"
}

2025-04-13 16:23:14,451 - DEBUG - Polling for notifications...
2025-04-13 16:23:14,463 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557790 with data: None
2025-04-13 16:23:14,464 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:23:14,478 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557790 HTTP/1.1" 200 21
2025-04-13 16:23:14,479 - DEBUG - Received response: {
  "update": -267
}

2025-04-13 16:23:42,675 - INFO - Application started.
2025-04-13 16:23:42,675 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:23:42,675 - INFO - Attempting to log in user: test
2025-04-13 16:23:42,678 - DEBUG - Loading KWallet
2025-04-13 16:23:42,678 - DEBUG - Loading SecretService
2025-04-13 16:23:42,687 - DEBUG - Loading Windows
2025-04-13 16:23:42,687 - DEBUG - Loading chainer
2025-04-13 16:23:42,687 - DEBUG - Loading libsecret
2025-04-13 16:23:42,688 - DEBUG - Loading macOS
2025-04-13 16:23:42,731 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:23:42,732 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:23:42,735 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:23:42,746 - DEBUG - Received response
2025-04-13 16:23:42,759 - INFO - User test logged in successfully.
2025-04-13 16:23:42,759 - INFO - Starting polling for notifications.
2025-04-13 16:23:42,759 - DEBUG - Polling for notifications...
2025-04-13 16:23:42,768 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557823 with data: None
2025-04-13 16:23:42,769 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:23:42,783 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557823 HTTP/1.1" 200 21
2025-04-13 16:23:42,784 - DEBUG - Received response: {
  "update": -300
}

2025-04-13 16:23:42,918 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:23:42,919 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:23:42,934 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:23:42,934 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:23:43,818 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:23:43,819 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:23:43,834 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:23:43,835 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:23:44,450 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:23:44,451 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:23:44,460 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 89
2025-04-13 16:23:44,501 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:23:44 GMT",
  "log": null,
  "status": "finished"
}

2025-04-13 16:23:47,789 - DEBUG - Polling for notifications...
2025-04-13 16:23:47,802 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557823 with data: None
2025-04-13 16:23:47,802 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:23:47,817 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557823 HTTP/1.1" 200 21
2025-04-13 16:23:47,817 - DEBUG - Received response: {
  "update": -300
}

2025-04-13 16:25:45,581 - INFO - Application started.
2025-04-13 16:25:45,581 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:25:45,581 - INFO - Attempting to log in user: test
2025-04-13 16:25:45,584 - DEBUG - Loading KWallet
2025-04-13 16:25:45,585 - DEBUG - Loading SecretService
2025-04-13 16:25:45,593 - DEBUG - Loading Windows
2025-04-13 16:25:45,594 - DEBUG - Loading chainer
2025-04-13 16:25:45,594 - DEBUG - Loading libsecret
2025-04-13 16:25:45,594 - DEBUG - Loading macOS
2025-04-13 16:25:45,638 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:25:45,639 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:25:45,642 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:25:45,652 - DEBUG - Received response
2025-04-13 16:25:45,668 - INFO - User test logged in successfully.
2025-04-13 16:25:45,668 - INFO - Starting polling for notifications.
2025-04-13 16:25:45,668 - DEBUG - Polling for notifications...
2025-04-13 16:25:45,678 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557946 with data: None
2025-04-13 16:25:45,679 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:25:45,693 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557946 HTTP/1.1" 200 21
2025-04-13 16:25:45,693 - DEBUG - Received response: {
  "update": -423
}

2025-04-13 16:25:45,826 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:25:45,827 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:25:45,841 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:25:45,842 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:25:47,070 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:25:47,071 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:25:47,086 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:25:47,086 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:25:47,761 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:25:47,762 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:25:47,770 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 233
2025-04-13 16:25:47,811 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:25:47 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command '. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 16:25:50,699 - DEBUG - Polling for notifications...
2025-04-13 16:25:50,711 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557946 with data: None
2025-04-13 16:25:50,712 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:25:50,726 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557946 HTTP/1.1" 200 21
2025-04-13 16:25:50,726 - DEBUG - Received response: {
  "update": -423
}

2025-04-13 16:25:55,732 - DEBUG - Polling for notifications...
2025-04-13 16:25:55,744 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557946 with data: None
2025-04-13 16:25:55,745 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:25:55,759 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557946 HTTP/1.1" 200 21
2025-04-13 16:25:55,759 - DEBUG - Received response: {
  "update": -423
}

2025-04-13 16:26:36,008 - INFO - Application started.
2025-04-13 16:26:36,008 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:26:36,008 - INFO - Attempting to log in user: test
2025-04-13 16:26:36,011 - DEBUG - Loading KWallet
2025-04-13 16:26:36,011 - DEBUG - Loading SecretService
2025-04-13 16:26:36,020 - DEBUG - Loading Windows
2025-04-13 16:26:36,020 - DEBUG - Loading chainer
2025-04-13 16:26:36,021 - DEBUG - Loading libsecret
2025-04-13 16:26:36,021 - DEBUG - Loading macOS
2025-04-13 16:26:36,065 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:26:36,066 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:26:36,070 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:26:36,080 - DEBUG - Received response
2025-04-13 16:26:36,093 - INFO - User test logged in successfully.
2025-04-13 16:26:36,093 - INFO - Starting polling for notifications.
2025-04-13 16:26:36,093 - DEBUG - Polling for notifications...
2025-04-13 16:26:36,103 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744557996 with data: None
2025-04-13 16:26:36,104 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:26:36,118 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744557996 HTTP/1.1" 200 21
2025-04-13 16:26:36,118 - DEBUG - Received response: {
  "update": -473
}

2025-04-13 16:26:36,255 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:26:36,256 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:26:36,271 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:26:36,271 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:26:37,402 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:26:37,403 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:26:37,418 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:26:37,418 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:26:38,018 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:26:38,019 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:26:38,028 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 233
2025-04-13 16:26:38,068 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 16:26:38 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command '. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 16:27:37,050 - INFO - Application started.
2025-04-13 16:27:37,050 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 16:27:37,051 - INFO - Attempting to log in user: test
2025-04-13 16:27:37,054 - DEBUG - Loading KWallet
2025-04-13 16:27:37,054 - DEBUG - Loading SecretService
2025-04-13 16:27:37,062 - DEBUG - Loading Windows
2025-04-13 16:27:37,063 - DEBUG - Loading chainer
2025-04-13 16:27:37,063 - DEBUG - Loading libsecret
2025-04-13 16:27:37,063 - DEBUG - Loading macOS
2025-04-13 16:27:37,107 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 16:27:37,108 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:27:37,113 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 16:27:37,123 - DEBUG - Received response
2025-04-13 16:27:37,136 - INFO - User test logged in successfully.
2025-04-13 16:27:37,136 - INFO - Starting polling for notifications.
2025-04-13 16:27:37,137 - DEBUG - Polling for notifications...
2025-04-13 16:27:37,148 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744558057 with data: None
2025-04-13 16:27:37,148 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:27:37,162 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744558057 HTTP/1.1" 200 20
2025-04-13 16:27:37,163 - DEBUG - Received response: {
  "update": -13
}

2025-04-13 16:27:37,299 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 16:27:37,299 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:27:37,316 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 16:27:37,316 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 16:27:38,255 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 16:27:38,256 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:27:38,272 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 16:27:38,272 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 16:27:38,836 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:27:38,836 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:27:38,867 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 500 29683
2025-04-13 16:27:38,907 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: Object of type bytes is not JSON serializable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "2IRFP3yyWja2LGQbBuvJ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: Object of type bytes is not JSON serializable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-131941477468752">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-131941467744944">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-131941467745056">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-131941467745168">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-131941467745280">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-131941467745392">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-131941467745504">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-131941467833728">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line before"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line current"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre>
<pre class="line after"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre></div>
</div>

<li><div class="frame" id="frame-131941467837984">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">jsonify</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Added support for serializing top-level arrays. This was a</pre>
<pre class="line before"><span class="ws">        </span>security risk in ancient browsers. See :ref:`security-json`.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>.. versionadded:: 0.2</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]</pre></div>
</div>

<li><div class="frame" id="frame-131941467840448">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">214</em>,
      in <code class="function">response</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;indent&#34;, 2)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;separators&#34;, (&#34;,&#34;, &#34;:&#34;))</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>return self._app.response_class(</pre>
<pre class="line current"><span class="ws">            </span>f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype</pre>
<pre class="line after"><span class="ws">        </span>)</pre></div>
</div>

<li><div class="frame" id="frame-131941467844368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>:param kwargs: Passed to :func:`json.dumps`.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;default&#34;, self.default)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;ensure_ascii&#34;, self.ensure_ascii)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;sort_keys&#34;, self.sort_keys)</pre>
<pre class="line current"><span class="ws">        </span>return json.dumps(obj, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def loads(self, s: str | bytes, **kwargs: t.Any) -&gt; t.Any:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Deserialize data as JSON from a string or bytes.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>:param s: Text or UTF-8 bytes.</pre></div>
</div>

<li><div class="frame" id="frame-131941467844480">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/__init__.py"</cite>,
      line <em class="line">238</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>cls = JSONEncoder</pre>
<pre class="line before"><span class="ws">    </span>return cls(</pre>
<pre class="line before"><span class="ws">        </span>skipkeys=skipkeys, ensure_ascii=ensure_ascii,</pre>
<pre class="line before"><span class="ws">        </span>check_circular=check_circular, allow_nan=allow_nan, indent=indent,</pre>
<pre class="line before"><span class="ws">        </span>separators=separators, default=default, sort_keys=sort_keys,</pre>
<pre class="line current"><span class="ws">        </span>**kw).encode(obj)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>_default_decoder = JSONDecoder(object_hook=None, object_pairs_hook=None)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-131941467914528">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">201</em>,
      in <code class="function">encode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># This doesn&#39;t pass the iterator directly to &#39;&#39;.join() because the</pre>
<pre class="line before"><span class="ws">        </span># exceptions aren&#39;t as detailed.  The list call should be roughly</pre>
<pre class="line before"><span class="ws">        </span># equivalent to the PySequence_Fast that &#39;&#39;.join() would do.</pre>
<pre class="line before"><span class="ws">        </span>chunks = self.iterencode(o, _one_shot=True)</pre>
<pre class="line before"><span class="ws">        </span>if not isinstance(chunks, (list, tuple)):</pre>
<pre class="line current"><span class="ws">            </span>chunks = list(chunks)</pre>
<pre class="line after"><span class="ws">        </span>return &#39;&#39;.join(chunks)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def iterencode(self, o, _one_shot=False):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Encode the given object and yield each string</pre>
<pre class="line after"><span class="ws">        </span>representation as available.</pre></div>
</div>

<li><div class="frame" id="frame-131941467919680">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">431</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># see comment for int/float in _make_iterencode</pre>
<pre class="line before"><span class="ws">            </span>yield _floatstr(o)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, (list, tuple)):</pre>
<pre class="line before"><span class="ws">            </span>yield from _iterencode_list(o, _current_indent_level)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, dict):</pre>
<pre class="line current"><span class="ws">            </span>yield from _iterencode_dict(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line after"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line after"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre></div>
</div>

<li><div class="frame" id="frame-131941467919792">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">405</em>,
      in <code class="function">_iterencode_dict</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>chunks = _iterencode_list(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>elif isinstance(value, dict):</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode_dict(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode(value, _current_indent_level)</pre>
<pre class="line current"><span class="ws">                </span>yield from chunks</pre>
<pre class="line after"><span class="ws">        </span>if newline_indent is not None:</pre>
<pre class="line after"><span class="ws">            </span>_current_indent_level -= 1</pre>
<pre class="line after"><span class="ws">            </span>yield &#39;\n&#39; + _indent * _current_indent_level</pre>
<pre class="line after"><span class="ws">        </span>yield &#39;}&#39;</pre>
<pre class="line after"><span class="ws">        </span>if markers is not None:</pre></div>
</div>

<li><div class="frame" id="frame-131941467919904">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">438</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line before"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line before"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line before"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre>
<pre class="line before"><span class="ws">                </span>markers[markerid] = o</pre>
<pre class="line current"><span class="ws">            </span>o = _default(o)</pre>
<pre class="line after"><span class="ws">            </span>yield from _iterencode(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>del markers[markerid]</pre>
<pre class="line after"><span class="ws">    </span>return _iterencode</pre></div>
</div>

<li><div class="frame" id="frame-131941467920016">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">121</em>,
      in <code class="function">_default</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>return dataclasses.asdict(o)  # type: ignore[arg-type]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>if hasattr(o, &#34;__html__&#34;):</pre>
<pre class="line before"><span class="ws">        </span>return str(o.__html__())</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class DefaultJSONProvider(JSONProvider):</pre>
<pre class="line after"><span class="ws">    </span>&#34;&#34;&#34;Provide JSON operations using Python&#39;s built-in :mod:`json`</pre>
<pre class="line after"><span class="ws">    </span>library. Serializes the following additional data types:</pre></div>
</div>
</ul>
  <blockquote>TypeError: Object of type bytes is not JSON serializable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    return jsonify(result) # Use the renamed method
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py&#34;, line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 214, in response
    f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 179, in dumps
    return json.dumps(obj, **kwargs)
  File &#34;/usr/lib/python3.10/json/__init__.py&#34;, line 238, in dumps
    **kw).encode(obj)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 201, in encode
    chunks = list(chunks)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 405, in _iterencode_dict
    yield from chunks
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 438, in _iterencode
    o = _default(o)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 121, in _default
    raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)
TypeError: Object of type bytes is not JSON serializable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    return jsonify(result) # Use the renamed method
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 214, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 179, in dumps
    return json.dumps(obj, **kwargs)
  File "/usr/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/usr/lib/python3.10/json/encoder.py", line 201, in encode
    chunks = list(chunks)
  File "/usr/lib/python3.10/json/encoder.py", line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "/usr/lib/python3.10/json/encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "/usr/lib/python3.10/json/encoder.py", line 438, in _iterencode
    o = _default(o)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 121, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type bytes is not JSON serializable


-->

2025-04-13 16:27:38,908 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: Object of type bytes is not JSON serializable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "2IRFP3yyWja2LGQbBuvJ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: Object of type bytes is not JSON serializable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-131941477468752">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-131941467744944">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-131941467745056">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-131941467745168">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-131941467745280">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-131941467745392">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-131941467745504">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-131941467833728">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line before"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line current"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre>
<pre class="line after"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre></div>
</div>

<li><div class="frame" id="frame-131941467837984">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">jsonify</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Added support for serializing top-level arrays. This was a</pre>
<pre class="line before"><span class="ws">        </span>security risk in ancient browsers. See :ref:`security-json`.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>.. versionadded:: 0.2</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]</pre></div>
</div>

<li><div class="frame" id="frame-131941467840448">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">214</em>,
      in <code class="function">response</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;indent&#34;, 2)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;separators&#34;, (&#34;,&#34;, &#34;:&#34;))</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>return self._app.response_class(</pre>
<pre class="line current"><span class="ws">            </span>f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype</pre>
<pre class="line after"><span class="ws">        </span>)</pre></div>
</div>

<li><div class="frame" id="frame-131941467844368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>:param kwargs: Passed to :func:`json.dumps`.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;default&#34;, self.default)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;ensure_ascii&#34;, self.ensure_ascii)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;sort_keys&#34;, self.sort_keys)</pre>
<pre class="line current"><span class="ws">        </span>return json.dumps(obj, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def loads(self, s: str | bytes, **kwargs: t.Any) -&gt; t.Any:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Deserialize data as JSON from a string or bytes.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>:param s: Text or UTF-8 bytes.</pre></div>
</div>

<li><div class="frame" id="frame-131941467844480">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/__init__.py"</cite>,
      line <em class="line">238</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>cls = JSONEncoder</pre>
<pre class="line before"><span class="ws">    </span>return cls(</pre>
<pre class="line before"><span class="ws">        </span>skipkeys=skipkeys, ensure_ascii=ensure_ascii,</pre>
<pre class="line before"><span class="ws">        </span>check_circular=check_circular, allow_nan=allow_nan, indent=indent,</pre>
<pre class="line before"><span class="ws">        </span>separators=separators, default=default, sort_keys=sort_keys,</pre>
<pre class="line current"><span class="ws">        </span>**kw).encode(obj)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>_default_decoder = JSONDecoder(object_hook=None, object_pairs_hook=None)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-131941467914528">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">201</em>,
      in <code class="function">encode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># This doesn&#39;t pass the iterator directly to &#39;&#39;.join() because the</pre>
<pre class="line before"><span class="ws">        </span># exceptions aren&#39;t as detailed.  The list call should be roughly</pre>
<pre class="line before"><span class="ws">        </span># equivalent to the PySequence_Fast that &#39;&#39;.join() would do.</pre>
<pre class="line before"><span class="ws">        </span>chunks = self.iterencode(o, _one_shot=True)</pre>
<pre class="line before"><span class="ws">        </span>if not isinstance(chunks, (list, tuple)):</pre>
<pre class="line current"><span class="ws">            </span>chunks = list(chunks)</pre>
<pre class="line after"><span class="ws">        </span>return &#39;&#39;.join(chunks)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def iterencode(self, o, _one_shot=False):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Encode the given object and yield each string</pre>
<pre class="line after"><span class="ws">        </span>representation as available.</pre></div>
</div>

<li><div class="frame" id="frame-131941467919680">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">431</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># see comment for int/float in _make_iterencode</pre>
<pre class="line before"><span class="ws">            </span>yield _floatstr(o)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, (list, tuple)):</pre>
<pre class="line before"><span class="ws">            </span>yield from _iterencode_list(o, _current_indent_level)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, dict):</pre>
<pre class="line current"><span class="ws">            </span>yield from _iterencode_dict(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line after"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line after"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre></div>
</div>

<li><div class="frame" id="frame-131941467919792">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">405</em>,
      in <code class="function">_iterencode_dict</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>chunks = _iterencode_list(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>elif isinstance(value, dict):</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode_dict(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode(value, _current_indent_level)</pre>
<pre class="line current"><span class="ws">                </span>yield from chunks</pre>
<pre class="line after"><span class="ws">        </span>if newline_indent is not None:</pre>
<pre class="line after"><span class="ws">            </span>_current_indent_level -= 1</pre>
<pre class="line after"><span class="ws">            </span>yield &#39;\n&#39; + _indent * _current_indent_level</pre>
<pre class="line after"><span class="ws">        </span>yield &#39;}&#39;</pre>
<pre class="line after"><span class="ws">        </span>if markers is not None:</pre></div>
</div>

<li><div class="frame" id="frame-131941467919904">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">438</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line before"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line before"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line before"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre>
<pre class="line before"><span class="ws">                </span>markers[markerid] = o</pre>
<pre class="line current"><span class="ws">            </span>o = _default(o)</pre>
<pre class="line after"><span class="ws">            </span>yield from _iterencode(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>del markers[markerid]</pre>
<pre class="line after"><span class="ws">    </span>return _iterencode</pre></div>
</div>

<li><div class="frame" id="frame-131941467920016">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">121</em>,
      in <code class="function">_default</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>return dataclasses.asdict(o)  # type: ignore[arg-type]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>if hasattr(o, &#34;__html__&#34;):</pre>
<pre class="line before"><span class="ws">        </span>return str(o.__html__())</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class DefaultJSONProvider(JSONProvider):</pre>
<pre class="line after"><span class="ws">    </span>&#34;&#34;&#34;Provide JSON operations using Python&#39;s built-in :mod:`json`</pre>
<pre class="line after"><span class="ws">    </span>library. Serializes the following additional data types:</pre></div>
</div>
</ul>
  <blockquote>TypeError: Object of type bytes is not JSON serializable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    return jsonify(result) # Use the renamed method
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py&#34;, line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 214, in response
    f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 179, in dumps
    return json.dumps(obj, **kwargs)
  File &#34;/usr/lib/python3.10/json/__init__.py&#34;, line 238, in dumps
    **kw).encode(obj)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 201, in encode
    chunks = list(chunks)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 405, in _iterencode_dict
    yield from chunks
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 438, in _iterencode
    o = _default(o)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 121, in _default
    raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)
TypeError: Object of type bytes is not JSON serializable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    return jsonify(result) # Use the renamed method
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 214, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 179, in dumps
    return json.dumps(obj, **kwargs)
  File "/usr/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/usr/lib/python3.10/json/encoder.py", line 201, in encode
    chunks = list(chunks)
  File "/usr/lib/python3.10/json/encoder.py", line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "/usr/lib/python3.10/json/encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "/usr/lib/python3.10/json/encoder.py", line 438, in _iterencode
    o = _default(o)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 121, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type bytes is not JSON serializable


-->

2025-04-13 16:27:41,443 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 16:27:41,444 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:27:41,471 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 500 29683
2025-04-13 16:27:41,511 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: Object of type bytes is not JSON serializable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "2IRFP3yyWja2LGQbBuvJ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: Object of type bytes is not JSON serializable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-131941467922032">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-131941467921248">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-131941467922144">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-131941467922704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-131941467922816">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-131941467922368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-131941467921136">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-131941467922592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line before"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line current"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre>
<pre class="line after"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre></div>
</div>

<li><div class="frame" id="frame-131941467922256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">jsonify</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Added support for serializing top-level arrays. This was a</pre>
<pre class="line before"><span class="ws">        </span>security risk in ancient browsers. See :ref:`security-json`.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>.. versionadded:: 0.2</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]</pre></div>
</div>

<li><div class="frame" id="frame-131941467922480">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">214</em>,
      in <code class="function">response</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;indent&#34;, 2)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;separators&#34;, (&#34;,&#34;, &#34;:&#34;))</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>return self._app.response_class(</pre>
<pre class="line current"><span class="ws">            </span>f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype</pre>
<pre class="line after"><span class="ws">        </span>)</pre></div>
</div>

<li><div class="frame" id="frame-131941467920128">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>:param kwargs: Passed to :func:`json.dumps`.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;default&#34;, self.default)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;ensure_ascii&#34;, self.ensure_ascii)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;sort_keys&#34;, self.sort_keys)</pre>
<pre class="line current"><span class="ws">        </span>return json.dumps(obj, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def loads(self, s: str | bytes, **kwargs: t.Any) -&gt; t.Any:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Deserialize data as JSON from a string or bytes.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>:param s: Text or UTF-8 bytes.</pre></div>
</div>

<li><div class="frame" id="frame-131941467921472">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/__init__.py"</cite>,
      line <em class="line">238</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>cls = JSONEncoder</pre>
<pre class="line before"><span class="ws">    </span>return cls(</pre>
<pre class="line before"><span class="ws">        </span>skipkeys=skipkeys, ensure_ascii=ensure_ascii,</pre>
<pre class="line before"><span class="ws">        </span>check_circular=check_circular, allow_nan=allow_nan, indent=indent,</pre>
<pre class="line before"><span class="ws">        </span>separators=separators, default=default, sort_keys=sort_keys,</pre>
<pre class="line current"><span class="ws">        </span>**kw).encode(obj)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>_default_decoder = JSONDecoder(object_hook=None, object_pairs_hook=None)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-131941467921696">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">201</em>,
      in <code class="function">encode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># This doesn&#39;t pass the iterator directly to &#39;&#39;.join() because the</pre>
<pre class="line before"><span class="ws">        </span># exceptions aren&#39;t as detailed.  The list call should be roughly</pre>
<pre class="line before"><span class="ws">        </span># equivalent to the PySequence_Fast that &#39;&#39;.join() would do.</pre>
<pre class="line before"><span class="ws">        </span>chunks = self.iterencode(o, _one_shot=True)</pre>
<pre class="line before"><span class="ws">        </span>if not isinstance(chunks, (list, tuple)):</pre>
<pre class="line current"><span class="ws">            </span>chunks = list(chunks)</pre>
<pre class="line after"><span class="ws">        </span>return &#39;&#39;.join(chunks)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def iterencode(self, o, _one_shot=False):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Encode the given object and yield each string</pre>
<pre class="line after"><span class="ws">        </span>representation as available.</pre></div>
</div>

<li><div class="frame" id="frame-131941467922928">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">431</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># see comment for int/float in _make_iterencode</pre>
<pre class="line before"><span class="ws">            </span>yield _floatstr(o)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, (list, tuple)):</pre>
<pre class="line before"><span class="ws">            </span>yield from _iterencode_list(o, _current_indent_level)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, dict):</pre>
<pre class="line current"><span class="ws">            </span>yield from _iterencode_dict(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line after"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line after"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre></div>
</div>

<li><div class="frame" id="frame-131941467923040">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">405</em>,
      in <code class="function">_iterencode_dict</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>chunks = _iterencode_list(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>elif isinstance(value, dict):</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode_dict(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode(value, _current_indent_level)</pre>
<pre class="line current"><span class="ws">                </span>yield from chunks</pre>
<pre class="line after"><span class="ws">        </span>if newline_indent is not None:</pre>
<pre class="line after"><span class="ws">            </span>_current_indent_level -= 1</pre>
<pre class="line after"><span class="ws">            </span>yield &#39;\n&#39; + _indent * _current_indent_level</pre>
<pre class="line after"><span class="ws">        </span>yield &#39;}&#39;</pre>
<pre class="line after"><span class="ws">        </span>if markers is not None:</pre></div>
</div>

<li><div class="frame" id="frame-131941467923152">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">438</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line before"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line before"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line before"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre>
<pre class="line before"><span class="ws">                </span>markers[markerid] = o</pre>
<pre class="line current"><span class="ws">            </span>o = _default(o)</pre>
<pre class="line after"><span class="ws">            </span>yield from _iterencode(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>del markers[markerid]</pre>
<pre class="line after"><span class="ws">    </span>return _iterencode</pre></div>
</div>

<li><div class="frame" id="frame-131941467923264">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">121</em>,
      in <code class="function">_default</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>return dataclasses.asdict(o)  # type: ignore[arg-type]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>if hasattr(o, &#34;__html__&#34;):</pre>
<pre class="line before"><span class="ws">        </span>return str(o.__html__())</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class DefaultJSONProvider(JSONProvider):</pre>
<pre class="line after"><span class="ws">    </span>&#34;&#34;&#34;Provide JSON operations using Python&#39;s built-in :mod:`json`</pre>
<pre class="line after"><span class="ws">    </span>library. Serializes the following additional data types:</pre></div>
</div>
</ul>
  <blockquote>TypeError: Object of type bytes is not JSON serializable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    return jsonify(result) # Use the renamed method
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py&#34;, line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 214, in response
    f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 179, in dumps
    return json.dumps(obj, **kwargs)
  File &#34;/usr/lib/python3.10/json/__init__.py&#34;, line 238, in dumps
    **kw).encode(obj)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 201, in encode
    chunks = list(chunks)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 405, in _iterencode_dict
    yield from chunks
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 438, in _iterencode
    o = _default(o)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 121, in _default
    raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)
TypeError: Object of type bytes is not JSON serializable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    return jsonify(result) # Use the renamed method
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 214, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 179, in dumps
    return json.dumps(obj, **kwargs)
  File "/usr/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/usr/lib/python3.10/json/encoder.py", line 201, in encode
    chunks = list(chunks)
  File "/usr/lib/python3.10/json/encoder.py", line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "/usr/lib/python3.10/json/encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "/usr/lib/python3.10/json/encoder.py", line 438, in _iterencode
    o = _default(o)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 121, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type bytes is not JSON serializable


-->

2025-04-13 16:27:41,512 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: Object of type bytes is not JSON serializable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "2IRFP3yyWja2LGQbBuvJ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: Object of type bytes is not JSON serializable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-131941467922032">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-131941467921248">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-131941467922144">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-131941467922704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-131941467922816">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-131941467922368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-131941467921136">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-131941467922592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line before"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line current"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre>
<pre class="line after"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre></div>
</div>

<li><div class="frame" id="frame-131941467922256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">jsonify</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Added support for serializing top-level arrays. This was a</pre>
<pre class="line before"><span class="ws">        </span>security risk in ancient browsers. See :ref:`security-json`.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>.. versionadded:: 0.2</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]</pre></div>
</div>

<li><div class="frame" id="frame-131941467922480">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">214</em>,
      in <code class="function">response</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;indent&#34;, 2)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;separators&#34;, (&#34;,&#34;, &#34;:&#34;))</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>return self._app.response_class(</pre>
<pre class="line current"><span class="ws">            </span>f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype</pre>
<pre class="line after"><span class="ws">        </span>)</pre></div>
</div>

<li><div class="frame" id="frame-131941467920128">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>:param kwargs: Passed to :func:`json.dumps`.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;default&#34;, self.default)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;ensure_ascii&#34;, self.ensure_ascii)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;sort_keys&#34;, self.sort_keys)</pre>
<pre class="line current"><span class="ws">        </span>return json.dumps(obj, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def loads(self, s: str | bytes, **kwargs: t.Any) -&gt; t.Any:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Deserialize data as JSON from a string or bytes.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>:param s: Text or UTF-8 bytes.</pre></div>
</div>

<li><div class="frame" id="frame-131941467921472">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/__init__.py"</cite>,
      line <em class="line">238</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>cls = JSONEncoder</pre>
<pre class="line before"><span class="ws">    </span>return cls(</pre>
<pre class="line before"><span class="ws">        </span>skipkeys=skipkeys, ensure_ascii=ensure_ascii,</pre>
<pre class="line before"><span class="ws">        </span>check_circular=check_circular, allow_nan=allow_nan, indent=indent,</pre>
<pre class="line before"><span class="ws">        </span>separators=separators, default=default, sort_keys=sort_keys,</pre>
<pre class="line current"><span class="ws">        </span>**kw).encode(obj)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>_default_decoder = JSONDecoder(object_hook=None, object_pairs_hook=None)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-131941467921696">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">201</em>,
      in <code class="function">encode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># This doesn&#39;t pass the iterator directly to &#39;&#39;.join() because the</pre>
<pre class="line before"><span class="ws">        </span># exceptions aren&#39;t as detailed.  The list call should be roughly</pre>
<pre class="line before"><span class="ws">        </span># equivalent to the PySequence_Fast that &#39;&#39;.join() would do.</pre>
<pre class="line before"><span class="ws">        </span>chunks = self.iterencode(o, _one_shot=True)</pre>
<pre class="line before"><span class="ws">        </span>if not isinstance(chunks, (list, tuple)):</pre>
<pre class="line current"><span class="ws">            </span>chunks = list(chunks)</pre>
<pre class="line after"><span class="ws">        </span>return &#39;&#39;.join(chunks)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def iterencode(self, o, _one_shot=False):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Encode the given object and yield each string</pre>
<pre class="line after"><span class="ws">        </span>representation as available.</pre></div>
</div>

<li><div class="frame" id="frame-131941467922928">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">431</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># see comment for int/float in _make_iterencode</pre>
<pre class="line before"><span class="ws">            </span>yield _floatstr(o)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, (list, tuple)):</pre>
<pre class="line before"><span class="ws">            </span>yield from _iterencode_list(o, _current_indent_level)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, dict):</pre>
<pre class="line current"><span class="ws">            </span>yield from _iterencode_dict(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line after"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line after"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre></div>
</div>

<li><div class="frame" id="frame-131941467923040">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">405</em>,
      in <code class="function">_iterencode_dict</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>chunks = _iterencode_list(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>elif isinstance(value, dict):</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode_dict(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode(value, _current_indent_level)</pre>
<pre class="line current"><span class="ws">                </span>yield from chunks</pre>
<pre class="line after"><span class="ws">        </span>if newline_indent is not None:</pre>
<pre class="line after"><span class="ws">            </span>_current_indent_level -= 1</pre>
<pre class="line after"><span class="ws">            </span>yield &#39;\n&#39; + _indent * _current_indent_level</pre>
<pre class="line after"><span class="ws">        </span>yield &#39;}&#39;</pre>
<pre class="line after"><span class="ws">        </span>if markers is not None:</pre></div>
</div>

<li><div class="frame" id="frame-131941467923152">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">438</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line before"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line before"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line before"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre>
<pre class="line before"><span class="ws">                </span>markers[markerid] = o</pre>
<pre class="line current"><span class="ws">            </span>o = _default(o)</pre>
<pre class="line after"><span class="ws">            </span>yield from _iterencode(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>del markers[markerid]</pre>
<pre class="line after"><span class="ws">    </span>return _iterencode</pre></div>
</div>

<li><div class="frame" id="frame-131941467923264">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">121</em>,
      in <code class="function">_default</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>return dataclasses.asdict(o)  # type: ignore[arg-type]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>if hasattr(o, &#34;__html__&#34;):</pre>
<pre class="line before"><span class="ws">        </span>return str(o.__html__())</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class DefaultJSONProvider(JSONProvider):</pre>
<pre class="line after"><span class="ws">    </span>&#34;&#34;&#34;Provide JSON operations using Python&#39;s built-in :mod:`json`</pre>
<pre class="line after"><span class="ws">    </span>library. Serializes the following additional data types:</pre></div>
</div>
</ul>
  <blockquote>TypeError: Object of type bytes is not JSON serializable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    return jsonify(result) # Use the renamed method
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py&#34;, line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 214, in response
    f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 179, in dumps
    return json.dumps(obj, **kwargs)
  File &#34;/usr/lib/python3.10/json/__init__.py&#34;, line 238, in dumps
    **kw).encode(obj)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 201, in encode
    chunks = list(chunks)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 405, in _iterencode_dict
    yield from chunks
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 438, in _iterencode
    o = _default(o)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 121, in _default
    raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)
TypeError: Object of type bytes is not JSON serializable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    return jsonify(result) # Use the renamed method
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 214, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 179, in dumps
    return json.dumps(obj, **kwargs)
  File "/usr/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/usr/lib/python3.10/json/encoder.py", line 201, in encode
    chunks = list(chunks)
  File "/usr/lib/python3.10/json/encoder.py", line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "/usr/lib/python3.10/json/encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "/usr/lib/python3.10/json/encoder.py", line 438, in _iterencode
    o = _default(o)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 121, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type bytes is not JSON serializable


-->

2025-04-13 16:27:42,168 - DEBUG - Polling for notifications...
2025-04-13 16:27:42,180 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744558057 with data: None
2025-04-13 16:27:42,181 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 16:27:42,195 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744558057 HTTP/1.1" 200 20
2025-04-13 16:27:42,195 - DEBUG - Received response: {
  "update": -13
}

2025-04-13 19:59:22,960 - INFO - Application started.
2025-04-13 19:59:22,960 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 19:59:22,960 - INFO - Attempting to log in user: test
2025-04-13 19:59:22,963 - DEBUG - Loading KWallet
2025-04-13 19:59:22,963 - DEBUG - Loading SecretService
2025-04-13 19:59:22,972 - DEBUG - Loading Windows
2025-04-13 19:59:22,972 - DEBUG - Loading chainer
2025-04-13 19:59:22,972 - DEBUG - Loading libsecret
2025-04-13 19:59:22,973 - DEBUG - Loading macOS
2025-04-13 19:59:23,016 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 19:59:23,017 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 19:59:23,021 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 19:59:23,032 - DEBUG - Received response
2025-04-13 19:59:23,045 - INFO - User test logged in successfully.
2025-04-13 19:59:23,045 - INFO - Starting polling for notifications.
2025-04-13 19:59:23,045 - DEBUG - Polling for notifications...
2025-04-13 19:59:23,055 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744570763 with data: None
2025-04-13 19:59:23,056 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 19:59:23,070 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744570763 HTTP/1.1" 200 19
2025-04-13 19:59:23,070 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 19:59:23,210 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 19:59:23,211 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 19:59:23,228 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 19:59:23,228 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 19:59:24,810 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 19:59:24,811 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 19:59:24,827 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 19:59:24,827 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 19:59:25,728 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 19:59:25,729 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 19:59:25,757 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 500 29683
2025-04-13 19:59:25,798 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: Object of type bytes is not JSON serializable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "lnhoJRMSQk1Fi7hHe0tM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: Object of type bytes is not JSON serializable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139062116961856">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139062098831936">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139062098832048">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139062098832160">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-139062098832272">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139062098832384">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139062098832496">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139062098937104">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line before"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line current"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre>
<pre class="line after"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre></div>
</div>

<li><div class="frame" id="frame-139062098941360">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">jsonify</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Added support for serializing top-level arrays. This was a</pre>
<pre class="line before"><span class="ws">        </span>security risk in ancient browsers. See :ref:`security-json`.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>.. versionadded:: 0.2</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]</pre></div>
</div>

<li><div class="frame" id="frame-139062098943824">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">214</em>,
      in <code class="function">response</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;indent&#34;, 2)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;separators&#34;, (&#34;,&#34;, &#34;:&#34;))</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>return self._app.response_class(</pre>
<pre class="line current"><span class="ws">            </span>f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype</pre>
<pre class="line after"><span class="ws">        </span>)</pre></div>
</div>

<li><div class="frame" id="frame-139062098947744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>:param kwargs: Passed to :func:`json.dumps`.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;default&#34;, self.default)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;ensure_ascii&#34;, self.ensure_ascii)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;sort_keys&#34;, self.sort_keys)</pre>
<pre class="line current"><span class="ws">        </span>return json.dumps(obj, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def loads(self, s: str | bytes, **kwargs: t.Any) -&gt; t.Any:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Deserialize data as JSON from a string or bytes.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>:param s: Text or UTF-8 bytes.</pre></div>
</div>

<li><div class="frame" id="frame-139062098947856">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/__init__.py"</cite>,
      line <em class="line">238</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>cls = JSONEncoder</pre>
<pre class="line before"><span class="ws">    </span>return cls(</pre>
<pre class="line before"><span class="ws">        </span>skipkeys=skipkeys, ensure_ascii=ensure_ascii,</pre>
<pre class="line before"><span class="ws">        </span>check_circular=check_circular, allow_nan=allow_nan, indent=indent,</pre>
<pre class="line before"><span class="ws">        </span>separators=separators, default=default, sort_keys=sort_keys,</pre>
<pre class="line current"><span class="ws">        </span>**kw).encode(obj)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>_default_decoder = JSONDecoder(object_hook=None, object_pairs_hook=None)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139062099001520">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">201</em>,
      in <code class="function">encode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># This doesn&#39;t pass the iterator directly to &#39;&#39;.join() because the</pre>
<pre class="line before"><span class="ws">        </span># exceptions aren&#39;t as detailed.  The list call should be roughly</pre>
<pre class="line before"><span class="ws">        </span># equivalent to the PySequence_Fast that &#39;&#39;.join() would do.</pre>
<pre class="line before"><span class="ws">        </span>chunks = self.iterencode(o, _one_shot=True)</pre>
<pre class="line before"><span class="ws">        </span>if not isinstance(chunks, (list, tuple)):</pre>
<pre class="line current"><span class="ws">            </span>chunks = list(chunks)</pre>
<pre class="line after"><span class="ws">        </span>return &#39;&#39;.join(chunks)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def iterencode(self, o, _one_shot=False):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Encode the given object and yield each string</pre>
<pre class="line after"><span class="ws">        </span>representation as available.</pre></div>
</div>

<li><div class="frame" id="frame-139062099006672">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">431</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># see comment for int/float in _make_iterencode</pre>
<pre class="line before"><span class="ws">            </span>yield _floatstr(o)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, (list, tuple)):</pre>
<pre class="line before"><span class="ws">            </span>yield from _iterencode_list(o, _current_indent_level)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, dict):</pre>
<pre class="line current"><span class="ws">            </span>yield from _iterencode_dict(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line after"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line after"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre></div>
</div>

<li><div class="frame" id="frame-139062099006784">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">405</em>,
      in <code class="function">_iterencode_dict</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>chunks = _iterencode_list(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>elif isinstance(value, dict):</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode_dict(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode(value, _current_indent_level)</pre>
<pre class="line current"><span class="ws">                </span>yield from chunks</pre>
<pre class="line after"><span class="ws">        </span>if newline_indent is not None:</pre>
<pre class="line after"><span class="ws">            </span>_current_indent_level -= 1</pre>
<pre class="line after"><span class="ws">            </span>yield &#39;\n&#39; + _indent * _current_indent_level</pre>
<pre class="line after"><span class="ws">        </span>yield &#39;}&#39;</pre>
<pre class="line after"><span class="ws">        </span>if markers is not None:</pre></div>
</div>

<li><div class="frame" id="frame-139062099006896">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">438</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line before"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line before"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line before"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre>
<pre class="line before"><span class="ws">                </span>markers[markerid] = o</pre>
<pre class="line current"><span class="ws">            </span>o = _default(o)</pre>
<pre class="line after"><span class="ws">            </span>yield from _iterencode(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>del markers[markerid]</pre>
<pre class="line after"><span class="ws">    </span>return _iterencode</pre></div>
</div>

<li><div class="frame" id="frame-139062099007008">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">121</em>,
      in <code class="function">_default</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>return dataclasses.asdict(o)  # type: ignore[arg-type]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>if hasattr(o, &#34;__html__&#34;):</pre>
<pre class="line before"><span class="ws">        </span>return str(o.__html__())</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class DefaultJSONProvider(JSONProvider):</pre>
<pre class="line after"><span class="ws">    </span>&#34;&#34;&#34;Provide JSON operations using Python&#39;s built-in :mod:`json`</pre>
<pre class="line after"><span class="ws">    </span>library. Serializes the following additional data types:</pre></div>
</div>
</ul>
  <blockquote>TypeError: Object of type bytes is not JSON serializable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    return jsonify(result) # Use the renamed method
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py&#34;, line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 214, in response
    f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 179, in dumps
    return json.dumps(obj, **kwargs)
  File &#34;/usr/lib/python3.10/json/__init__.py&#34;, line 238, in dumps
    **kw).encode(obj)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 201, in encode
    chunks = list(chunks)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 405, in _iterencode_dict
    yield from chunks
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 438, in _iterencode
    o = _default(o)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 121, in _default
    raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)
TypeError: Object of type bytes is not JSON serializable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    return jsonify(result) # Use the renamed method
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 214, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 179, in dumps
    return json.dumps(obj, **kwargs)
  File "/usr/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/usr/lib/python3.10/json/encoder.py", line 201, in encode
    chunks = list(chunks)
  File "/usr/lib/python3.10/json/encoder.py", line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "/usr/lib/python3.10/json/encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "/usr/lib/python3.10/json/encoder.py", line 438, in _iterencode
    o = _default(o)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 121, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type bytes is not JSON serializable


-->

2025-04-13 19:59:25,799 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: Object of type bytes is not JSON serializable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "lnhoJRMSQk1Fi7hHe0tM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: Object of type bytes is not JSON serializable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139062116961856">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139062098831936">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139062098832048">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139062098832160">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-139062098832272">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139062098832384">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139062098832496">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139062098937104">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line before"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line current"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre>
<pre class="line after"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre></div>
</div>

<li><div class="frame" id="frame-139062098941360">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">jsonify</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Added support for serializing top-level arrays. This was a</pre>
<pre class="line before"><span class="ws">        </span>security risk in ancient browsers. See :ref:`security-json`.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>.. versionadded:: 0.2</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]</pre></div>
</div>

<li><div class="frame" id="frame-139062098943824">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">214</em>,
      in <code class="function">response</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;indent&#34;, 2)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;separators&#34;, (&#34;,&#34;, &#34;:&#34;))</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>return self._app.response_class(</pre>
<pre class="line current"><span class="ws">            </span>f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype</pre>
<pre class="line after"><span class="ws">        </span>)</pre></div>
</div>

<li><div class="frame" id="frame-139062098947744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>:param kwargs: Passed to :func:`json.dumps`.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;default&#34;, self.default)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;ensure_ascii&#34;, self.ensure_ascii)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;sort_keys&#34;, self.sort_keys)</pre>
<pre class="line current"><span class="ws">        </span>return json.dumps(obj, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def loads(self, s: str | bytes, **kwargs: t.Any) -&gt; t.Any:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Deserialize data as JSON from a string or bytes.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>:param s: Text or UTF-8 bytes.</pre></div>
</div>

<li><div class="frame" id="frame-139062098947856">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/__init__.py"</cite>,
      line <em class="line">238</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>cls = JSONEncoder</pre>
<pre class="line before"><span class="ws">    </span>return cls(</pre>
<pre class="line before"><span class="ws">        </span>skipkeys=skipkeys, ensure_ascii=ensure_ascii,</pre>
<pre class="line before"><span class="ws">        </span>check_circular=check_circular, allow_nan=allow_nan, indent=indent,</pre>
<pre class="line before"><span class="ws">        </span>separators=separators, default=default, sort_keys=sort_keys,</pre>
<pre class="line current"><span class="ws">        </span>**kw).encode(obj)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>_default_decoder = JSONDecoder(object_hook=None, object_pairs_hook=None)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139062099001520">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">201</em>,
      in <code class="function">encode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># This doesn&#39;t pass the iterator directly to &#39;&#39;.join() because the</pre>
<pre class="line before"><span class="ws">        </span># exceptions aren&#39;t as detailed.  The list call should be roughly</pre>
<pre class="line before"><span class="ws">        </span># equivalent to the PySequence_Fast that &#39;&#39;.join() would do.</pre>
<pre class="line before"><span class="ws">        </span>chunks = self.iterencode(o, _one_shot=True)</pre>
<pre class="line before"><span class="ws">        </span>if not isinstance(chunks, (list, tuple)):</pre>
<pre class="line current"><span class="ws">            </span>chunks = list(chunks)</pre>
<pre class="line after"><span class="ws">        </span>return &#39;&#39;.join(chunks)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def iterencode(self, o, _one_shot=False):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Encode the given object and yield each string</pre>
<pre class="line after"><span class="ws">        </span>representation as available.</pre></div>
</div>

<li><div class="frame" id="frame-139062099006672">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">431</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># see comment for int/float in _make_iterencode</pre>
<pre class="line before"><span class="ws">            </span>yield _floatstr(o)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, (list, tuple)):</pre>
<pre class="line before"><span class="ws">            </span>yield from _iterencode_list(o, _current_indent_level)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, dict):</pre>
<pre class="line current"><span class="ws">            </span>yield from _iterencode_dict(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line after"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line after"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre></div>
</div>

<li><div class="frame" id="frame-139062099006784">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">405</em>,
      in <code class="function">_iterencode_dict</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>chunks = _iterencode_list(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>elif isinstance(value, dict):</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode_dict(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode(value, _current_indent_level)</pre>
<pre class="line current"><span class="ws">                </span>yield from chunks</pre>
<pre class="line after"><span class="ws">        </span>if newline_indent is not None:</pre>
<pre class="line after"><span class="ws">            </span>_current_indent_level -= 1</pre>
<pre class="line after"><span class="ws">            </span>yield &#39;\n&#39; + _indent * _current_indent_level</pre>
<pre class="line after"><span class="ws">        </span>yield &#39;}&#39;</pre>
<pre class="line after"><span class="ws">        </span>if markers is not None:</pre></div>
</div>

<li><div class="frame" id="frame-139062099006896">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">438</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line before"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line before"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line before"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre>
<pre class="line before"><span class="ws">                </span>markers[markerid] = o</pre>
<pre class="line current"><span class="ws">            </span>o = _default(o)</pre>
<pre class="line after"><span class="ws">            </span>yield from _iterencode(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>del markers[markerid]</pre>
<pre class="line after"><span class="ws">    </span>return _iterencode</pre></div>
</div>

<li><div class="frame" id="frame-139062099007008">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">121</em>,
      in <code class="function">_default</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>return dataclasses.asdict(o)  # type: ignore[arg-type]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>if hasattr(o, &#34;__html__&#34;):</pre>
<pre class="line before"><span class="ws">        </span>return str(o.__html__())</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class DefaultJSONProvider(JSONProvider):</pre>
<pre class="line after"><span class="ws">    </span>&#34;&#34;&#34;Provide JSON operations using Python&#39;s built-in :mod:`json`</pre>
<pre class="line after"><span class="ws">    </span>library. Serializes the following additional data types:</pre></div>
</div>
</ul>
  <blockquote>TypeError: Object of type bytes is not JSON serializable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    return jsonify(result) # Use the renamed method
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py&#34;, line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 214, in response
    f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 179, in dumps
    return json.dumps(obj, **kwargs)
  File &#34;/usr/lib/python3.10/json/__init__.py&#34;, line 238, in dumps
    **kw).encode(obj)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 201, in encode
    chunks = list(chunks)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 405, in _iterencode_dict
    yield from chunks
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 438, in _iterencode
    o = _default(o)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 121, in _default
    raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)
TypeError: Object of type bytes is not JSON serializable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    return jsonify(result) # Use the renamed method
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 214, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 179, in dumps
    return json.dumps(obj, **kwargs)
  File "/usr/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/usr/lib/python3.10/json/encoder.py", line 201, in encode
    chunks = list(chunks)
  File "/usr/lib/python3.10/json/encoder.py", line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "/usr/lib/python3.10/json/encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "/usr/lib/python3.10/json/encoder.py", line 438, in _iterencode
    o = _default(o)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 121, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type bytes is not JSON serializable


-->

2025-04-13 19:59:28,096 - DEBUG - Polling for notifications...
2025-04-13 19:59:28,108 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744570763 with data: None
2025-04-13 19:59:28,109 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 19:59:28,123 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744570763 HTTP/1.1" 200 19
2025-04-13 19:59:28,123 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 20:02:27,517 - INFO - Application started.
2025-04-13 20:02:27,517 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:02:27,518 - INFO - Attempting to log in user: test
2025-04-13 20:02:27,521 - DEBUG - Loading KWallet
2025-04-13 20:02:27,521 - DEBUG - Loading SecretService
2025-04-13 20:02:27,529 - DEBUG - Loading Windows
2025-04-13 20:02:27,530 - DEBUG - Loading chainer
2025-04-13 20:02:27,530 - DEBUG - Loading libsecret
2025-04-13 20:02:27,530 - DEBUG - Loading macOS
2025-04-13 20:02:27,574 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:02:27,575 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:02:27,580 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:02:27,590 - DEBUG - Received response
2025-04-13 20:02:27,602 - INFO - User test logged in successfully.
2025-04-13 20:02:27,603 - INFO - Starting polling for notifications.
2025-04-13 20:02:27,603 - DEBUG - Polling for notifications...
2025-04-13 20:02:27,613 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744570948 with data: None
2025-04-13 20:02:27,614 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:02:27,627 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744570948 HTTP/1.1" 200 19
2025-04-13 20:02:27,628 - DEBUG - Received response: {
  "update": -9
}

2025-04-13 20:02:27,763 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:02:27,764 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:02:27,780 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:02:27,781 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:02:29,022 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:02:29,023 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:02:29,038 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:02:29,038 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:02:29,675 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:02:29,676 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:02:29,699 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 500 16991
2025-04-13 20:02:29,740 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: string indices must be integers
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "u1GbjOQlkYUxAmjLvuxl";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: string indices must be integers
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-130150196087040">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-130150177875984">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-130150177876096">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-130150177876208">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-130150177876320">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-130150177876432">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-130150177876544">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-130150177964768">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = str(avvia_plugin(plugin.name ,parametri, extension))</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-130150177968912">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">222</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(str(result[&#39;datetime&#39;])),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: string indices must be integers
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    logUpdate(result)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(str(result[&#39;datetime&#39;])),
TypeError: string indices must be integers
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    logUpdate(result)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(str(result['datetime'])),
TypeError: string indices must be integers


-->

2025-04-13 20:02:29,741 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: string indices must be integers
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "u1GbjOQlkYUxAmjLvuxl";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: string indices must be integers
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-130150196087040">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-130150177875984">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-130150177876096">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-130150177876208">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-130150177876320">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-130150177876432">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-130150177876544">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-130150177964768">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = str(avvia_plugin(plugin.name ,parametri, extension))</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-130150177968912">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">222</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(str(result[&#39;datetime&#39;])),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: string indices must be integers
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    logUpdate(result)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(str(result[&#39;datetime&#39;])),
TypeError: string indices must be integers
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    logUpdate(result)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(str(result['datetime'])),
TypeError: string indices must be integers


-->

2025-04-13 20:02:32,633 - DEBUG - Polling for notifications...
2025-04-13 20:02:32,645 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744570948 with data: None
2025-04-13 20:02:32,646 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:02:32,660 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744570948 HTTP/1.1" 200 19
2025-04-13 20:02:32,660 - DEBUG - Received response: {
  "update": -9
}

2025-04-13 20:02:56,571 - INFO - Application started.
2025-04-13 20:02:56,571 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:02:56,571 - INFO - Attempting to log in user: test
2025-04-13 20:02:56,574 - DEBUG - Loading KWallet
2025-04-13 20:02:56,575 - DEBUG - Loading SecretService
2025-04-13 20:02:56,583 - DEBUG - Loading Windows
2025-04-13 20:02:56,584 - DEBUG - Loading chainer
2025-04-13 20:02:56,584 - DEBUG - Loading libsecret
2025-04-13 20:02:56,584 - DEBUG - Loading macOS
2025-04-13 20:02:56,630 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:02:56,631 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:02:56,636 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:02:56,646 - DEBUG - Received response
2025-04-13 20:02:56,659 - INFO - User test logged in successfully.
2025-04-13 20:02:56,659 - INFO - Starting polling for notifications.
2025-04-13 20:02:56,659 - DEBUG - Polling for notifications...
2025-04-13 20:02:56,669 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744570977 with data: None
2025-04-13 20:02:56,670 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:02:56,684 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744570977 HTTP/1.1" 200 19
2025-04-13 20:02:56,684 - DEBUG - Received response: {
  "update": -6
}

2025-04-13 20:02:56,827 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:02:56,827 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:02:56,844 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:02:56,844 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:02:58,266 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:02:58,267 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:02:58,283 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:02:58,283 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:02:58,845 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:02:58,846 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:02:58,870 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 500 15547
2025-04-13 20:02:58,910 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: can only concatenate str (not &#34;dict&#34;) to str
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "9DqTABbQDAODqfxXbf62";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: can only concatenate str (not &#34;dict&#34;) to str
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-132233930573408">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-132233912362912">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-132233912363024">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-132233912363136">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-132233912363248">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-132233912363360">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-132233912363472">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-132233912451696">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>print(&#34;RESULT: &#34;+result)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: can only concatenate str (not &#34;dict&#34;) to str
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    print(&#34;RESULT: &#34;+result)
TypeError: can only concatenate str (not &#34;dict&#34;) to str
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    print("RESULT: "+result)
TypeError: can only concatenate str (not "dict") to str


-->

2025-04-13 20:02:58,911 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: can only concatenate str (not &#34;dict&#34;) to str
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "9DqTABbQDAODqfxXbf62";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: can only concatenate str (not &#34;dict&#34;) to str
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-132233930573408">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-132233912362912">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-132233912363024">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-132233912363136">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-132233912363248">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-132233912363360">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-132233912363472">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-132233912451696">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>print(&#34;RESULT: &#34;+result)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: can only concatenate str (not &#34;dict&#34;) to str
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    print(&#34;RESULT: &#34;+result)
TypeError: can only concatenate str (not &#34;dict&#34;) to str
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    print("RESULT: "+result)
TypeError: can only concatenate str (not "dict") to str


-->

2025-04-13 20:03:48,644 - INFO - Application started.
2025-04-13 20:03:48,644 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:03:48,644 - INFO - Attempting to log in user: test
2025-04-13 20:03:48,647 - DEBUG - Loading KWallet
2025-04-13 20:03:48,647 - DEBUG - Loading SecretService
2025-04-13 20:03:48,656 - DEBUG - Loading Windows
2025-04-13 20:03:48,656 - DEBUG - Loading chainer
2025-04-13 20:03:48,656 - DEBUG - Loading libsecret
2025-04-13 20:03:48,657 - DEBUG - Loading macOS
2025-04-13 20:03:48,700 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:03:48,701 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:03:48,706 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:03:48,716 - DEBUG - Received response
2025-04-13 20:03:48,728 - INFO - User test logged in successfully.
2025-04-13 20:03:48,729 - INFO - Starting polling for notifications.
2025-04-13 20:03:48,729 - DEBUG - Polling for notifications...
2025-04-13 20:03:48,739 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571029 with data: None
2025-04-13 20:03:48,739 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:03:48,753 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571029 HTTP/1.1" 200 19
2025-04-13 20:03:48,753 - DEBUG - Received response: {
  "update": -6
}

2025-04-13 20:03:48,892 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:03:48,892 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:03:48,909 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:03:48,909 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:03:50,281 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:03:50,282 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:03:50,298 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:03:50,298 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:03:50,967 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:03:50,968 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:03:50,998 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 500 29635
2025-04-13 20:03:51,038 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: Object of type bytes is not JSON serializable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3kprZtTxJqybmbQgkxAw";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: Object of type bytes is not JSON serializable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127413111672272">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127413093542464">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127413093542576">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127413093542688">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127413093542800">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127413093542912">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127413093543024">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127413093647632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">184</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line before"><span class="ws">    </span>print(result)</pre>
<pre class="line before"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line current"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre>
<pre class="line after"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre></div>
</div>

<li><div class="frame" id="frame-127413093651888">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">jsonify</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Added support for serializing top-level arrays. This was a</pre>
<pre class="line before"><span class="ws">        </span>security risk in ancient browsers. See :ref:`security-json`.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>.. versionadded:: 0.2</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]</pre></div>
</div>

<li><div class="frame" id="frame-127413093654352">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">214</em>,
      in <code class="function">response</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;indent&#34;, 2)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;separators&#34;, (&#34;,&#34;, &#34;:&#34;))</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>return self._app.response_class(</pre>
<pre class="line current"><span class="ws">            </span>f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype</pre>
<pre class="line after"><span class="ws">        </span>)</pre></div>
</div>

<li><div class="frame" id="frame-127413093658272">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>:param kwargs: Passed to :func:`json.dumps`.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;default&#34;, self.default)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;ensure_ascii&#34;, self.ensure_ascii)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;sort_keys&#34;, self.sort_keys)</pre>
<pre class="line current"><span class="ws">        </span>return json.dumps(obj, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def loads(self, s: str | bytes, **kwargs: t.Any) -&gt; t.Any:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Deserialize data as JSON from a string or bytes.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>:param s: Text or UTF-8 bytes.</pre></div>
</div>

<li><div class="frame" id="frame-127413093658384">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/__init__.py"</cite>,
      line <em class="line">238</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>cls = JSONEncoder</pre>
<pre class="line before"><span class="ws">    </span>return cls(</pre>
<pre class="line before"><span class="ws">        </span>skipkeys=skipkeys, ensure_ascii=ensure_ascii,</pre>
<pre class="line before"><span class="ws">        </span>check_circular=check_circular, allow_nan=allow_nan, indent=indent,</pre>
<pre class="line before"><span class="ws">        </span>separators=separators, default=default, sort_keys=sort_keys,</pre>
<pre class="line current"><span class="ws">        </span>**kw).encode(obj)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>_default_decoder = JSONDecoder(object_hook=None, object_pairs_hook=None)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127413093712048">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">201</em>,
      in <code class="function">encode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># This doesn&#39;t pass the iterator directly to &#39;&#39;.join() because the</pre>
<pre class="line before"><span class="ws">        </span># exceptions aren&#39;t as detailed.  The list call should be roughly</pre>
<pre class="line before"><span class="ws">        </span># equivalent to the PySequence_Fast that &#39;&#39;.join() would do.</pre>
<pre class="line before"><span class="ws">        </span>chunks = self.iterencode(o, _one_shot=True)</pre>
<pre class="line before"><span class="ws">        </span>if not isinstance(chunks, (list, tuple)):</pre>
<pre class="line current"><span class="ws">            </span>chunks = list(chunks)</pre>
<pre class="line after"><span class="ws">        </span>return &#39;&#39;.join(chunks)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def iterencode(self, o, _one_shot=False):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Encode the given object and yield each string</pre>
<pre class="line after"><span class="ws">        </span>representation as available.</pre></div>
</div>

<li><div class="frame" id="frame-127413093717200">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">431</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># see comment for int/float in _make_iterencode</pre>
<pre class="line before"><span class="ws">            </span>yield _floatstr(o)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, (list, tuple)):</pre>
<pre class="line before"><span class="ws">            </span>yield from _iterencode_list(o, _current_indent_level)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, dict):</pre>
<pre class="line current"><span class="ws">            </span>yield from _iterencode_dict(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line after"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line after"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre></div>
</div>

<li><div class="frame" id="frame-127413093717312">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">405</em>,
      in <code class="function">_iterencode_dict</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>chunks = _iterencode_list(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>elif isinstance(value, dict):</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode_dict(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode(value, _current_indent_level)</pre>
<pre class="line current"><span class="ws">                </span>yield from chunks</pre>
<pre class="line after"><span class="ws">        </span>if newline_indent is not None:</pre>
<pre class="line after"><span class="ws">            </span>_current_indent_level -= 1</pre>
<pre class="line after"><span class="ws">            </span>yield &#39;\n&#39; + _indent * _current_indent_level</pre>
<pre class="line after"><span class="ws">        </span>yield &#39;}&#39;</pre>
<pre class="line after"><span class="ws">        </span>if markers is not None:</pre></div>
</div>

<li><div class="frame" id="frame-127413093717424">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">438</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line before"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line before"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line before"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre>
<pre class="line before"><span class="ws">                </span>markers[markerid] = o</pre>
<pre class="line current"><span class="ws">            </span>o = _default(o)</pre>
<pre class="line after"><span class="ws">            </span>yield from _iterencode(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>del markers[markerid]</pre>
<pre class="line after"><span class="ws">    </span>return _iterencode</pre></div>
</div>

<li><div class="frame" id="frame-127413093717536">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">121</em>,
      in <code class="function">_default</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>return dataclasses.asdict(o)  # type: ignore[arg-type]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>if hasattr(o, &#34;__html__&#34;):</pre>
<pre class="line before"><span class="ws">        </span>return str(o.__html__())</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class DefaultJSONProvider(JSONProvider):</pre>
<pre class="line after"><span class="ws">    </span>&#34;&#34;&#34;Provide JSON operations using Python&#39;s built-in :mod:`json`</pre>
<pre class="line after"><span class="ws">    </span>library. Serializes the following additional data types:</pre></div>
</div>
</ul>
  <blockquote>TypeError: Object of type bytes is not JSON serializable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 184, in plug_table_details
    return jsonify(result) # Use the renamed method
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py&#34;, line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 214, in response
    f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 179, in dumps
    return json.dumps(obj, **kwargs)
  File &#34;/usr/lib/python3.10/json/__init__.py&#34;, line 238, in dumps
    **kw).encode(obj)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 201, in encode
    chunks = list(chunks)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 405, in _iterencode_dict
    yield from chunks
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 438, in _iterencode
    o = _default(o)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 121, in _default
    raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)
TypeError: Object of type bytes is not JSON serializable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 184, in plug_table_details
    return jsonify(result) # Use the renamed method
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 214, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 179, in dumps
    return json.dumps(obj, **kwargs)
  File "/usr/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/usr/lib/python3.10/json/encoder.py", line 201, in encode
    chunks = list(chunks)
  File "/usr/lib/python3.10/json/encoder.py", line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "/usr/lib/python3.10/json/encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "/usr/lib/python3.10/json/encoder.py", line 438, in _iterencode
    o = _default(o)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 121, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type bytes is not JSON serializable


-->

2025-04-13 20:03:51,039 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: Object of type bytes is not JSON serializable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "3kprZtTxJqybmbQgkxAw";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: Object of type bytes is not JSON serializable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127413111672272">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127413093542464">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127413093542576">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127413093542688">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127413093542800">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127413093542912">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127413093543024">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127413093647632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">184</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line before"><span class="ws">    </span>print(result)</pre>
<pre class="line before"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line current"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre>
<pre class="line after"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre></div>
</div>

<li><div class="frame" id="frame-127413093651888">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">jsonify</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Added support for serializing top-level arrays. This was a</pre>
<pre class="line before"><span class="ws">        </span>security risk in ancient browsers. See :ref:`security-json`.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>.. versionadded:: 0.2</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]</pre></div>
</div>

<li><div class="frame" id="frame-127413093654352">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">214</em>,
      in <code class="function">response</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;indent&#34;, 2)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>dump_args.setdefault(&#34;separators&#34;, (&#34;,&#34;, &#34;:&#34;))</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>return self._app.response_class(</pre>
<pre class="line current"><span class="ws">            </span>f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype</pre>
<pre class="line after"><span class="ws">        </span>)</pre></div>
</div>

<li><div class="frame" id="frame-127413093658272">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">179</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>:param kwargs: Passed to :func:`json.dumps`.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;default&#34;, self.default)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;ensure_ascii&#34;, self.ensure_ascii)</pre>
<pre class="line before"><span class="ws">        </span>kwargs.setdefault(&#34;sort_keys&#34;, self.sort_keys)</pre>
<pre class="line current"><span class="ws">        </span>return json.dumps(obj, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def loads(self, s: str | bytes, **kwargs: t.Any) -&gt; t.Any:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Deserialize data as JSON from a string or bytes.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>:param s: Text or UTF-8 bytes.</pre></div>
</div>

<li><div class="frame" id="frame-127413093658384">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/__init__.py"</cite>,
      line <em class="line">238</em>,
      in <code class="function">dumps</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>cls = JSONEncoder</pre>
<pre class="line before"><span class="ws">    </span>return cls(</pre>
<pre class="line before"><span class="ws">        </span>skipkeys=skipkeys, ensure_ascii=ensure_ascii,</pre>
<pre class="line before"><span class="ws">        </span>check_circular=check_circular, allow_nan=allow_nan, indent=indent,</pre>
<pre class="line before"><span class="ws">        </span>separators=separators, default=default, sort_keys=sort_keys,</pre>
<pre class="line current"><span class="ws">        </span>**kw).encode(obj)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>_default_decoder = JSONDecoder(object_hook=None, object_pairs_hook=None)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127413093712048">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">201</em>,
      in <code class="function">encode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># This doesn&#39;t pass the iterator directly to &#39;&#39;.join() because the</pre>
<pre class="line before"><span class="ws">        </span># exceptions aren&#39;t as detailed.  The list call should be roughly</pre>
<pre class="line before"><span class="ws">        </span># equivalent to the PySequence_Fast that &#39;&#39;.join() would do.</pre>
<pre class="line before"><span class="ws">        </span>chunks = self.iterencode(o, _one_shot=True)</pre>
<pre class="line before"><span class="ws">        </span>if not isinstance(chunks, (list, tuple)):</pre>
<pre class="line current"><span class="ws">            </span>chunks = list(chunks)</pre>
<pre class="line after"><span class="ws">        </span>return &#39;&#39;.join(chunks)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def iterencode(self, o, _one_shot=False):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Encode the given object and yield each string</pre>
<pre class="line after"><span class="ws">        </span>representation as available.</pre></div>
</div>

<li><div class="frame" id="frame-127413093717200">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">431</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># see comment for int/float in _make_iterencode</pre>
<pre class="line before"><span class="ws">            </span>yield _floatstr(o)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, (list, tuple)):</pre>
<pre class="line before"><span class="ws">            </span>yield from _iterencode_list(o, _current_indent_level)</pre>
<pre class="line before"><span class="ws">        </span>elif isinstance(o, dict):</pre>
<pre class="line current"><span class="ws">            </span>yield from _iterencode_dict(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line after"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line after"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre></div>
</div>

<li><div class="frame" id="frame-127413093717312">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">405</em>,
      in <code class="function">_iterencode_dict</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>chunks = _iterencode_list(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>elif isinstance(value, dict):</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode_dict(value, _current_indent_level)</pre>
<pre class="line before"><span class="ws">                </span>else:</pre>
<pre class="line before"><span class="ws">                    </span>chunks = _iterencode(value, _current_indent_level)</pre>
<pre class="line current"><span class="ws">                </span>yield from chunks</pre>
<pre class="line after"><span class="ws">        </span>if newline_indent is not None:</pre>
<pre class="line after"><span class="ws">            </span>_current_indent_level -= 1</pre>
<pre class="line after"><span class="ws">            </span>yield &#39;\n&#39; + _indent * _current_indent_level</pre>
<pre class="line after"><span class="ws">        </span>yield &#39;}&#39;</pre>
<pre class="line after"><span class="ws">        </span>if markers is not None:</pre></div>
</div>

<li><div class="frame" id="frame-127413093717424">
  <h4>File <cite class="filename">"/usr/lib/python3.10/json/encoder.py"</cite>,
      line <em class="line">438</em>,
      in <code class="function">_iterencode</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line before"><span class="ws">                </span>markerid = id(o)</pre>
<pre class="line before"><span class="ws">                </span>if markerid in markers:</pre>
<pre class="line before"><span class="ws">                    </span>raise ValueError(&#34;Circular reference detected&#34;)</pre>
<pre class="line before"><span class="ws">                </span>markers[markerid] = o</pre>
<pre class="line current"><span class="ws">            </span>o = _default(o)</pre>
<pre class="line after"><span class="ws">            </span>yield from _iterencode(o, _current_indent_level)</pre>
<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>
<pre class="line after"><span class="ws">                </span>del markers[markerid]</pre>
<pre class="line after"><span class="ws">    </span>return _iterencode</pre></div>
</div>

<li><div class="frame" id="frame-127413093717536">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">121</em>,
      in <code class="function">_default</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>return dataclasses.asdict(o)  # type: ignore[arg-type]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>if hasattr(o, &#34;__html__&#34;):</pre>
<pre class="line before"><span class="ws">        </span>return str(o.__html__())</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class DefaultJSONProvider(JSONProvider):</pre>
<pre class="line after"><span class="ws">    </span>&#34;&#34;&#34;Provide JSON operations using Python&#39;s built-in :mod:`json`</pre>
<pre class="line after"><span class="ws">    </span>library. Serializes the following additional data types:</pre></div>
</div>
</ul>
  <blockquote>TypeError: Object of type bytes is not JSON serializable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 184, in plug_table_details
    return jsonify(result) # Use the renamed method
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py&#34;, line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 214, in response
    f&#34;{self.dumps(obj, **dump_args)}\n&#34;, mimetype=self.mimetype
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 179, in dumps
    return json.dumps(obj, **kwargs)
  File &#34;/usr/lib/python3.10/json/__init__.py&#34;, line 238, in dumps
    **kw).encode(obj)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 201, in encode
    chunks = list(chunks)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 405, in _iterencode_dict
    yield from chunks
  File &#34;/usr/lib/python3.10/json/encoder.py&#34;, line 438, in _iterencode
    o = _default(o)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py&#34;, line 121, in _default
    raise TypeError(f&#34;Object of type {type(o).__name__} is not JSON serializable&#34;)
TypeError: Object of type bytes is not JSON serializable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 184, in plug_table_details
    return jsonify(result) # Use the renamed method
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 214, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 179, in dumps
    return json.dumps(obj, **kwargs)
  File "/usr/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/usr/lib/python3.10/json/encoder.py", line 201, in encode
    chunks = list(chunks)
  File "/usr/lib/python3.10/json/encoder.py", line 431, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "/usr/lib/python3.10/json/encoder.py", line 405, in _iterencode_dict
    yield from chunks
  File "/usr/lib/python3.10/json/encoder.py", line 438, in _iterencode
    o = _default(o)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/json/provider.py", line 121, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type bytes is not JSON serializable


-->

2025-04-13 20:04:57,413 - INFO - Application started.
2025-04-13 20:04:57,413 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:04:57,414 - INFO - Attempting to log in user: test
2025-04-13 20:04:57,417 - DEBUG - Loading KWallet
2025-04-13 20:04:57,417 - DEBUG - Loading SecretService
2025-04-13 20:04:57,426 - DEBUG - Loading Windows
2025-04-13 20:04:57,426 - DEBUG - Loading chainer
2025-04-13 20:04:57,426 - DEBUG - Loading libsecret
2025-04-13 20:04:57,427 - DEBUG - Loading macOS
2025-04-13 20:04:57,471 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:04:57,472 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:04:57,477 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:04:57,487 - DEBUG - Received response
2025-04-13 20:04:57,500 - INFO - User test logged in successfully.
2025-04-13 20:04:57,500 - INFO - Starting polling for notifications.
2025-04-13 20:04:57,501 - DEBUG - Polling for notifications...
2025-04-13 20:04:57,511 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571097 with data: None
2025-04-13 20:04:57,511 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:04:57,525 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571097 HTTP/1.1" 200 20
2025-04-13 20:04:57,525 - DEBUG - Received response: {
  "update": -10
}

2025-04-13 20:04:57,658 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:04:57,659 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:04:57,675 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:04:57,675 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:04:58,648 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:04:58,649 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:04:58,665 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:04:58,665 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:04:59,285 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:04:59,286 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:04:59,311 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 121
2025-04-13 20:04:59,351 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:04:59 GMT",
  "log": "b'Hello, World! Custom message\\n'",
  "status": "finished"
}

2025-04-13 20:05:02,531 - DEBUG - Polling for notifications...
2025-04-13 20:05:02,544 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571098 with data: None
2025-04-13 20:05:02,544 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:05:02,558 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571098 HTTP/1.1" 200 20
2025-04-13 20:05:02,559 - DEBUG - Received response: {
  "update": -11
}

2025-04-13 20:06:32,662 - INFO - Application started.
2025-04-13 20:06:32,662 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:06:32,662 - INFO - Attempting to log in user: test
2025-04-13 20:06:32,665 - DEBUG - Loading KWallet
2025-04-13 20:06:32,665 - DEBUG - Loading SecretService
2025-04-13 20:06:32,674 - DEBUG - Loading Windows
2025-04-13 20:06:32,674 - DEBUG - Loading chainer
2025-04-13 20:06:32,674 - DEBUG - Loading libsecret
2025-04-13 20:06:32,674 - DEBUG - Loading macOS
2025-04-13 20:06:32,719 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:06:32,720 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:06:32,724 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:06:32,734 - DEBUG - Received response
2025-04-13 20:06:32,747 - INFO - User test logged in successfully.
2025-04-13 20:06:32,747 - INFO - Starting polling for notifications.
2025-04-13 20:06:32,747 - DEBUG - Polling for notifications...
2025-04-13 20:06:32,757 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571193 with data: None
2025-04-13 20:06:32,758 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:06:32,772 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571193 HTTP/1.1" 200 19
2025-04-13 20:06:32,772 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 20:06:32,909 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:06:32,910 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:06:32,926 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:06:32,926 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:06:33,948 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:06:33,949 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:06:33,965 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:06:33,965 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:06:34,510 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:06:34,510 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:06:34,535 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 117
2025-04-13 20:06:34,576 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:06:34 GMT",
  "log": "Hello, World! Custom message\n",
  "status": "finished"
}

2025-04-13 20:06:37,032 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-13 20:06:37,032 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:06:37,047 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-13 20:06:37,048 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:06:37,778 - DEBUG - Polling for notifications...
2025-04-13 20:06:37,791 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571193 with data: None
2025-04-13 20:06:37,792 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:06:37,806 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571193 HTTP/1.1" 200 19
2025-04-13 20:06:37,806 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 20:06:37,835 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-13 20:06:37,836 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:06:37,844 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 15674
2025-04-13 20:06:37,885 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "BI538kSnKJKBekEeQbzO";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-135872667551776">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-135872649455968">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-135872649456080">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-135872649456192">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-135872649456304">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-135872649456416">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-135872649456528">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-135872649528368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>result[&#39;log&#39;] = result[&#39;log&#39;].decode(&#39;utf-8&#39;)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    result[&#39;log&#39;] = result[&#39;log&#39;].decode(&#39;utf-8&#39;)
AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    result['log'] = result['log'].decode('utf-8')
AttributeError: 'str' object has no attribute 'decode'


-->

2025-04-13 20:06:37,885 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "BI538kSnKJKBekEeQbzO";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-135872667551776">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-135872649455968">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-135872649456080">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-135872649456192">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-135872649456304">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-135872649456416">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-135872649456528">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-135872649528368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>result[&#39;log&#39;] = result[&#39;log&#39;].decode(&#39;utf-8&#39;)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    result[&#39;log&#39;] = result[&#39;log&#39;].decode(&#39;utf-8&#39;)
AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    result['log'] = result['log'].decode('utf-8')
AttributeError: 'str' object has no attribute 'decode'


-->

2025-04-13 20:06:39,249 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-13 20:06:39,249 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:06:39,264 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 94
2025-04-13 20:06:39,265 - DEBUG - Received response: {
  "description": "Io sono un plugin di test che ti dice il mio vero nome",
  "params": ""
}

2025-04-13 20:06:39,911 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-13 20:06:39,912 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:06:39,919 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 15674
2025-04-13 20:06:39,959 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "BI538kSnKJKBekEeQbzO";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-135872649534304">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-135872649533856">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-135872649534640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-135872649534192">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-135872649534976">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-135872649535312">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-135872649534528">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-135872649534416">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>result[&#39;log&#39;] = result[&#39;log&#39;].decode(&#39;utf-8&#39;)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    result[&#39;log&#39;] = result[&#39;log&#39;].decode(&#39;utf-8&#39;)
AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    result['log'] = result['log'].decode('utf-8')
AttributeError: 'str' object has no attribute 'decode'


-->

2025-04-13 20:06:39,960 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "BI538kSnKJKBekEeQbzO";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-135872649534304">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-135872649533856">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-135872649534640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-135872649534192">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-135872649534976">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-135872649535312">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-135872649534528">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-135872649534416">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>result[&#39;log&#39;] = result[&#39;log&#39;].decode(&#39;utf-8&#39;)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    result[&#39;log&#39;] = result[&#39;log&#39;].decode(&#39;utf-8&#39;)
AttributeError: &#39;str&#39; object has no attribute &#39;decode&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    result['log'] = result['log'].decode('utf-8')
AttributeError: 'str' object has no attribute 'decode'


-->

2025-04-13 20:07:24,432 - INFO - Application started.
2025-04-13 20:07:24,432 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:07:24,432 - INFO - Attempting to log in user: test
2025-04-13 20:07:24,435 - DEBUG - Loading KWallet
2025-04-13 20:07:24,436 - DEBUG - Loading SecretService
2025-04-13 20:07:24,444 - DEBUG - Loading Windows
2025-04-13 20:07:24,444 - DEBUG - Loading chainer
2025-04-13 20:07:24,445 - DEBUG - Loading libsecret
2025-04-13 20:07:24,445 - DEBUG - Loading macOS
2025-04-13 20:07:24,489 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:07:24,491 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:07:24,495 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:07:24,505 - DEBUG - Received response
2025-04-13 20:07:24,518 - INFO - User test logged in successfully.
2025-04-13 20:07:24,518 - INFO - Starting polling for notifications.
2025-04-13 20:07:24,518 - DEBUG - Polling for notifications...
2025-04-13 20:07:24,528 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571244 with data: None
2025-04-13 20:07:24,529 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:07:24,542 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571244 HTTP/1.1" 200 19
2025-04-13 20:07:24,543 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 20:07:24,680 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:07:24,681 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:07:24,697 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:07:24,698 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:07:25,609 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-13 20:07:25,610 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:07:25,626 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-13 20:07:25,626 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:07:26,250 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-13 20:07:26,250 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:07:26,260 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 102
2025-04-13 20:07:26,300 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:07:26 GMT",
  "log": "Io piango tanto",
  "status": "finished"
}

2025-04-13 20:07:27,735 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-13 20:07:27,736 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:07:27,751 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-13 20:07:27,751 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:07:28,307 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-13 20:07:28,308 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:07:28,316 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-04-13 20:07:28,356 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:07:28 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-04-13 20:07:29,335 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:07:29,336 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:07:29,351 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:07:29,351 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:07:29,548 - DEBUG - Polling for notifications...
2025-04-13 20:07:29,560 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571245 with data: None
2025-04-13 20:07:29,561 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:07:29,575 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571245 HTTP/1.1" 200 19
2025-04-13 20:07:29,576 - DEBUG - Received response: {
  "update": -9
}

2025-04-13 20:07:29,921 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:07:29,922 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:07:29,946 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 117
2025-04-13 20:07:29,987 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:07:29 GMT",
  "log": "Hello, World! Custom message\n",
  "status": "finished"
}

2025-04-13 20:07:34,581 - DEBUG - Polling for notifications...
2025-04-13 20:07:34,593 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571245 with data: None
2025-04-13 20:07:34,594 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:07:34,608 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571245 HTTP/1.1" 200 19
2025-04-13 20:07:34,608 - DEBUG - Received response: {
  "update": -9
}

2025-04-13 20:08:11,231 - INFO - Application started.
2025-04-13 20:08:11,231 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:08:11,231 - INFO - Attempting to log in user: test
2025-04-13 20:08:11,234 - DEBUG - Loading KWallet
2025-04-13 20:08:11,234 - DEBUG - Loading SecretService
2025-04-13 20:08:11,243 - DEBUG - Loading Windows
2025-04-13 20:08:11,243 - DEBUG - Loading chainer
2025-04-13 20:08:11,244 - DEBUG - Loading libsecret
2025-04-13 20:08:11,244 - DEBUG - Loading macOS
2025-04-13 20:08:11,287 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:08:11,288 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:08:11,292 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:08:11,302 - DEBUG - Received response
2025-04-13 20:08:11,315 - INFO - User test logged in successfully.
2025-04-13 20:08:11,316 - INFO - Starting polling for notifications.
2025-04-13 20:08:11,316 - DEBUG - Polling for notifications...
2025-04-13 20:08:11,326 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571291 with data: None
2025-04-13 20:08:11,326 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:08:11,340 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571291 HTTP/1.1" 200 20
2025-04-13 20:08:11,340 - DEBUG - Received response: {
  "update": -55
}

2025-04-13 20:08:11,477 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:08:11,478 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:08:11,492 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:08:11,493 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:08:12,781 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:08:12,782 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:08:12,796 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:08:12,797 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:08:13,837 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:08:13,837 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:08:13,862 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 117
2025-04-13 20:08:13,902 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:08:13 GMT",
  "log": "Hello, World! Custom message\n",
  "status": "finished"
}

2025-04-13 20:08:16,346 - DEBUG - Polling for notifications...
2025-04-13 20:08:16,358 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571291 with data: None
2025-04-13 20:08:16,359 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:08:16,372 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571291 HTTP/1.1" 200 20
2025-04-13 20:08:16,373 - DEBUG - Received response: {
  "update": -55
}

2025-04-13 20:08:21,378 - DEBUG - Polling for notifications...
2025-04-13 20:08:21,391 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571291 with data: None
2025-04-13 20:08:21,392 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:08:21,406 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571291 HTTP/1.1" 200 20
2025-04-13 20:08:21,406 - DEBUG - Received response: {
  "update": -55
}

2025-04-13 20:08:26,412 - DEBUG - Polling for notifications...
2025-04-13 20:08:26,424 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571291 with data: None
2025-04-13 20:08:26,425 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:08:26,439 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571291 HTTP/1.1" 200 20
2025-04-13 20:08:26,439 - DEBUG - Received response: {
  "update": -55
}

2025-04-13 20:08:31,445 - DEBUG - Polling for notifications...
2025-04-13 20:08:31,457 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571291 with data: None
2025-04-13 20:08:31,458 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:08:31,472 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571291 HTTP/1.1" 200 20
2025-04-13 20:08:31,472 - DEBUG - Received response: {
  "update": -55
}

2025-04-13 20:08:36,478 - DEBUG - Polling for notifications...
2025-04-13 20:08:36,490 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571291 with data: None
2025-04-13 20:08:36,491 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:08:36,504 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571291 HTTP/1.1" 200 20
2025-04-13 20:08:36,505 - DEBUG - Received response: {
  "update": -55
}

2025-04-13 20:08:41,510 - DEBUG - Polling for notifications...
2025-04-13 20:08:41,523 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571291 with data: None
2025-04-13 20:08:41,524 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:08:41,538 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571291 HTTP/1.1" 200 20
2025-04-13 20:08:41,539 - DEBUG - Received response: {
  "update": -55
}

2025-04-13 20:08:46,543 - DEBUG - Polling for notifications...
2025-04-13 20:08:46,555 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571291 with data: None
2025-04-13 20:08:46,556 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:08:46,570 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571291 HTTP/1.1" 200 20
2025-04-13 20:08:46,571 - DEBUG - Received response: {
  "update": -55
}

2025-04-13 20:09:09,769 - INFO - Application started.
2025-04-13 20:09:09,769 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:09:09,769 - INFO - Attempting to log in user: test
2025-04-13 20:09:09,772 - DEBUG - Loading KWallet
2025-04-13 20:09:09,772 - DEBUG - Loading SecretService
2025-04-13 20:09:09,781 - DEBUG - Loading Windows
2025-04-13 20:09:09,781 - DEBUG - Loading chainer
2025-04-13 20:09:09,781 - DEBUG - Loading libsecret
2025-04-13 20:09:09,782 - DEBUG - Loading macOS
2025-04-13 20:09:09,825 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:09:09,826 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:09:09,831 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:09:09,841 - DEBUG - Received response
2025-04-13 20:09:09,853 - INFO - User test logged in successfully.
2025-04-13 20:09:09,853 - INFO - Starting polling for notifications.
2025-04-13 20:09:09,854 - DEBUG - Polling for notifications...
2025-04-13 20:09:09,864 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571350 with data: None
2025-04-13 20:09:09,865 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:09:09,878 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571350 HTTP/1.1" 200 19
2025-04-13 20:09:09,879 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 20:09:10,017 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:09:10,018 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:09:10,035 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:09:10,035 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:09:11,150 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:09:11,151 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:09:11,167 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:09:11,167 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:09:11,763 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:09:11,763 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:09:11,773 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 233
2025-04-13 20:09:11,814 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:09:11 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command '. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 20:13:52,482 - INFO - Application started.
2025-04-13 20:13:52,482 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:13:52,482 - INFO - Attempting to log in user: test
2025-04-13 20:13:52,485 - DEBUG - Loading KWallet
2025-04-13 20:13:52,485 - DEBUG - Loading SecretService
2025-04-13 20:13:52,494 - DEBUG - Loading Windows
2025-04-13 20:13:52,494 - DEBUG - Loading chainer
2025-04-13 20:13:52,495 - DEBUG - Loading libsecret
2025-04-13 20:13:52,495 - DEBUG - Loading macOS
2025-04-13 20:13:52,540 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:13:52,541 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:13:52,541 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /login (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7cee15fe1c90>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-04-13 20:14:23,241 - INFO - Application started.
2025-04-13 20:14:23,242 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:14:23,242 - INFO - Attempting to log in user: test
2025-04-13 20:14:23,244 - DEBUG - Loading KWallet
2025-04-13 20:14:23,245 - DEBUG - Loading SecretService
2025-04-13 20:14:23,253 - DEBUG - Loading Windows
2025-04-13 20:14:23,254 - DEBUG - Loading chainer
2025-04-13 20:14:23,254 - DEBUG - Loading libsecret
2025-04-13 20:14:23,254 - DEBUG - Loading macOS
2025-04-13 20:14:23,297 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:14:23,298 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:14:23,299 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /login (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7d89819ddc90>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-04-13 20:14:51,386 - INFO - Application started.
2025-04-13 20:14:51,387 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:14:51,387 - INFO - Attempting to log in user: test
2025-04-13 20:14:51,390 - DEBUG - Loading KWallet
2025-04-13 20:14:51,390 - DEBUG - Loading SecretService
2025-04-13 20:14:51,399 - DEBUG - Loading Windows
2025-04-13 20:14:51,400 - DEBUG - Loading chainer
2025-04-13 20:14:51,400 - DEBUG - Loading libsecret
2025-04-13 20:14:51,400 - DEBUG - Loading macOS
2025-04-13 20:14:51,445 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:14:51,446 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:14:51,450 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:14:51,460 - DEBUG - Received response
2025-04-13 20:14:51,474 - INFO - User test logged in successfully.
2025-04-13 20:14:51,474 - INFO - Starting polling for notifications.
2025-04-13 20:14:51,474 - DEBUG - Polling for notifications...
2025-04-13 20:14:51,484 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571691 with data: None
2025-04-13 20:14:51,484 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:14:51,498 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571691 HTTP/1.1" 200 19
2025-04-13 20:14:51,498 - DEBUG - Received response: {
  "update": -7
}

2025-04-13 20:14:51,631 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:14:51,632 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:14:51,649 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:14:51,649 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:14:52,883 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:14:52,884 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:14:52,900 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:14:52,900 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:14:53,500 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:14:53,501 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:14:53,512 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 233
2025-04-13 20:14:53,552 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:14:53 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command '. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 20:14:55,919 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-13 20:14:55,920 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:14:55,935 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-13 20:14:55,935 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:14:56,494 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-13 20:14:56,495 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:14:56,503 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-04-13 20:14:56,504 - DEBUG - Polling for notifications...
2025-04-13 20:14:56,514 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571692 with data: None
2025-04-13 20:14:56,514 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:14:56,528 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571692 HTTP/1.1" 200 19
2025-04-13 20:14:56,528 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 20:14:56,543 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:14:56 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-04-13 20:16:24,394 - INFO - Application started.
2025-04-13 20:16:24,394 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:16:24,395 - INFO - Attempting to log in user: test
2025-04-13 20:16:24,397 - DEBUG - Loading KWallet
2025-04-13 20:16:24,398 - DEBUG - Loading SecretService
2025-04-13 20:16:24,406 - DEBUG - Loading Windows
2025-04-13 20:16:24,407 - DEBUG - Loading chainer
2025-04-13 20:16:24,407 - DEBUG - Loading libsecret
2025-04-13 20:16:24,407 - DEBUG - Loading macOS
2025-04-13 20:16:24,451 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:16:24,452 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:24,466 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:16:24,467 - DEBUG - Received response
2025-04-13 20:16:24,479 - INFO - User test logged in successfully.
2025-04-13 20:16:24,479 - INFO - Starting polling for notifications.
2025-04-13 20:16:24,480 - DEBUG - Polling for notifications...
2025-04-13 20:16:24,490 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571784 with data: None
2025-04-13 20:16:24,491 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:24,505 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571784 HTTP/1.1" 200 19
2025-04-13 20:16:24,505 - DEBUG - Received response: {
  "update": -7
}

2025-04-13 20:16:24,645 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:16:24,646 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:24,662 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:16:24,663 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:16:25,612 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:16:25,613 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:25,628 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:16:25,629 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:16:26,463 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:16:26,463 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:26,474 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 233
2025-04-13 20:16:26,515 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:16:26 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command '. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 20:16:29,531 - DEBUG - Polling for notifications...
2025-04-13 20:16:29,544 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571785 with data: None
2025-04-13 20:16:29,545 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:29,559 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571785 HTTP/1.1" 200 19
2025-04-13 20:16:29,559 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 20:16:30,136 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:16:30,137 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:30,152 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:16:30,152 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:16:30,772 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:16:30,772 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:30,781 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 233
2025-04-13 20:16:30,822 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:16:30 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command '. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 20:16:32,835 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-13 20:16:32,836 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:32,851 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-13 20:16:32,851 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:16:33,601 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-13 20:16:33,601 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:33,610 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-04-13 20:16:33,650 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:16:33 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-04-13 20:16:34,560 - DEBUG - Polling for notifications...
2025-04-13 20:16:34,572 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571785 with data: None
2025-04-13 20:16:34,573 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:34,587 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571785 HTTP/1.1" 200 19
2025-04-13 20:16:34,587 - DEBUG - Received response: {
  "update": -8
}

2025-04-13 20:16:51,316 - INFO - Application started.
2025-04-13 20:16:51,316 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:16:51,316 - INFO - Attempting to log in user: test
2025-04-13 20:16:51,319 - DEBUG - Loading KWallet
2025-04-13 20:16:51,319 - DEBUG - Loading SecretService
2025-04-13 20:16:51,328 - DEBUG - Loading Windows
2025-04-13 20:16:51,328 - DEBUG - Loading chainer
2025-04-13 20:16:51,329 - DEBUG - Loading libsecret
2025-04-13 20:16:51,329 - DEBUG - Loading macOS
2025-04-13 20:16:51,373 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:16:51,374 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:51,378 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:16:51,388 - DEBUG - Received response
2025-04-13 20:16:51,402 - INFO - User test logged in successfully.
2025-04-13 20:16:51,402 - INFO - Starting polling for notifications.
2025-04-13 20:16:51,403 - DEBUG - Polling for notifications...
2025-04-13 20:16:51,413 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571811 with data: None
2025-04-13 20:16:51,413 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:51,427 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571811 HTTP/1.1" 200 19
2025-04-13 20:16:51,427 - DEBUG - Received response: {
  "update": -6
}

2025-04-13 20:16:51,567 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:16:51,567 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:51,584 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:16:51,584 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:16:52,993 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:16:52,993 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:53,009 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:16:53,010 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:16:53,588 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:16:53,588 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:53,613 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 117
2025-04-13 20:16:53,653 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:16:53 GMT",
  "log": "Hello, World! Custom message\n",
  "status": "finished"
}

2025-04-13 20:16:55,554 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-13 20:16:55,555 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:55,570 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-13 20:16:55,570 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:16:56,063 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-13 20:16:56,064 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:56,072 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 102
2025-04-13 20:16:56,112 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:16:56 GMT",
  "log": "Io piango tanto",
  "status": "finished"
}

2025-04-13 20:16:56,433 - DEBUG - Polling for notifications...
2025-04-13 20:16:56,445 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571812 with data: None
2025-04-13 20:16:56,446 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:16:56,460 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571812 HTTP/1.1" 200 19
2025-04-13 20:16:56,461 - DEBUG - Received response: {
  "update": -7
}

2025-04-13 20:17:09,965 - INFO - Application started.
2025-04-13 20:17:09,965 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:17:09,966 - INFO - Attempting to log in user: test
2025-04-13 20:17:09,969 - DEBUG - Loading KWallet
2025-04-13 20:17:09,969 - DEBUG - Loading SecretService
2025-04-13 20:17:09,978 - DEBUG - Loading Windows
2025-04-13 20:17:09,978 - DEBUG - Loading chainer
2025-04-13 20:17:09,978 - DEBUG - Loading libsecret
2025-04-13 20:17:09,979 - DEBUG - Loading macOS
2025-04-13 20:17:10,023 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:17:10,024 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:17:10,029 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:17:10,039 - DEBUG - Received response
2025-04-13 20:17:10,053 - INFO - User test logged in successfully.
2025-04-13 20:17:10,053 - INFO - Starting polling for notifications.
2025-04-13 20:17:10,053 - DEBUG - Polling for notifications...
2025-04-13 20:17:10,063 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571830 with data: None
2025-04-13 20:17:10,063 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:17:10,077 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571830 HTTP/1.1" 200 19
2025-04-13 20:17:10,078 - DEBUG - Received response: {
  "update": -6
}

2025-04-13 20:17:10,217 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:17:10,217 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:17:10,234 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:17:10,234 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:17:11,318 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:17:11,318 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:17:11,334 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:17:11,334 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:17:11,843 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:17:11,844 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:17:11,855 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 233
2025-04-13 20:17:11,896 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:17:11 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command '. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 20:17:15,083 - DEBUG - Polling for notifications...
2025-04-13 20:17:15,096 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571830 with data: None
2025-04-13 20:17:15,097 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:17:15,111 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571830 HTTP/1.1" 200 19
2025-04-13 20:17:15,111 - DEBUG - Received response: {
  "update": -6
}

2025-04-13 20:17:20,117 - DEBUG - Polling for notifications...
2025-04-13 20:17:20,129 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571830 with data: None
2025-04-13 20:17:20,130 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:17:20,144 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571830 HTTP/1.1" 200 19
2025-04-13 20:17:20,144 - DEBUG - Received response: {
  "update": -6
}

2025-04-13 20:19:06,596 - INFO - Application started.
2025-04-13 20:19:06,596 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:19:06,596 - INFO - Attempting to log in user: test
2025-04-13 20:19:06,599 - DEBUG - Loading KWallet
2025-04-13 20:19:06,599 - DEBUG - Loading SecretService
2025-04-13 20:19:06,608 - DEBUG - Loading Windows
2025-04-13 20:19:06,608 - DEBUG - Loading chainer
2025-04-13 20:19:06,608 - DEBUG - Loading libsecret
2025-04-13 20:19:06,608 - DEBUG - Loading macOS
2025-04-13 20:19:06,653 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:19:06,654 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:19:06,658 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:19:06,668 - DEBUG - Received response
2025-04-13 20:19:06,681 - INFO - User test logged in successfully.
2025-04-13 20:19:06,682 - INFO - Starting polling for notifications.
2025-04-13 20:19:06,682 - DEBUG - Polling for notifications...
2025-04-13 20:19:06,691 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571947 with data: None
2025-04-13 20:19:06,692 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:19:06,706 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571947 HTTP/1.1" 200 19
2025-04-13 20:19:06,706 - DEBUG - Received response: {
  "update": -6
}

2025-04-13 20:19:06,842 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:19:06,843 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:19:06,860 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:19:06,860 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:19:07,788 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:19:07,789 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:19:07,805 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:19:07,805 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:19:08,430 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:19:08,431 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:19:08,443 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 236
2025-04-13 20:19:08,484 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:19:08 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command 'bash /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 20:19:10,012 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-13 20:19:10,013 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:19:10,028 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-13 20:19:10,028 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:19:10,562 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-13 20:19:10,562 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:19:10,571 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-04-13 20:19:10,611 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:19:10 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-04-13 20:19:11,711 - DEBUG - Polling for notifications...
2025-04-13 20:19:11,723 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744571947 with data: None
2025-04-13 20:19:11,724 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:19:11,738 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744571947 HTTP/1.1" 200 19
2025-04-13 20:19:11,738 - DEBUG - Received response: {
  "update": -6
}

2025-04-13 20:20:42,443 - INFO - Application started.
2025-04-13 20:20:42,443 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:20:42,443 - INFO - Attempting to log in user: test
2025-04-13 20:20:42,446 - DEBUG - Loading KWallet
2025-04-13 20:20:42,447 - DEBUG - Loading SecretService
2025-04-13 20:20:42,455 - DEBUG - Loading Windows
2025-04-13 20:20:42,456 - DEBUG - Loading chainer
2025-04-13 20:20:42,456 - DEBUG - Loading libsecret
2025-04-13 20:20:42,456 - DEBUG - Loading macOS
2025-04-13 20:20:42,500 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:20:42,502 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:20:42,506 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:20:42,516 - DEBUG - Received response
2025-04-13 20:20:42,529 - INFO - User test logged in successfully.
2025-04-13 20:20:42,529 - INFO - Starting polling for notifications.
2025-04-13 20:20:42,530 - DEBUG - Polling for notifications...
2025-04-13 20:20:42,540 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572042 with data: None
2025-04-13 20:20:42,540 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:20:42,554 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572042 HTTP/1.1" 200 19
2025-04-13 20:20:42,554 - DEBUG - Received response: {
  "update": -9
}

2025-04-13 20:20:42,688 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:20:42,688 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:20:42,705 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:20:42,706 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:20:44,159 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:20:44,160 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:20:44,175 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:20:44,176 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:20:44,664 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:20:44,665 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:20:44,676 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 233
2025-04-13 20:20:44,716 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:20:44 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command '. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 20:20:47,558 - DEBUG - Polling for notifications...
2025-04-13 20:20:47,571 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572043 with data: None
2025-04-13 20:20:47,572 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:20:47,587 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572043 HTTP/1.1" 200 20
2025-04-13 20:20:47,587 - DEBUG - Received response: {
  "update": -10
}

2025-04-13 20:20:52,310 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-13 20:20:52,311 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:20:52,325 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-13 20:20:52,326 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:20:52,592 - DEBUG - Polling for notifications...
2025-04-13 20:20:52,604 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572043 with data: None
2025-04-13 20:20:52,605 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:20:52,619 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572043 HTTP/1.1" 200 20
2025-04-13 20:20:52,619 - DEBUG - Received response: {
  "update": -10
}

2025-04-13 20:20:52,832 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-13 20:20:52,833 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:20:52,841 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-04-13 20:20:52,882 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:20:52 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-04-13 20:21:05,375 - INFO - Application started.
2025-04-13 20:21:05,375 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:21:05,375 - INFO - Attempting to log in user: test
2025-04-13 20:21:05,378 - DEBUG - Loading KWallet
2025-04-13 20:21:05,379 - DEBUG - Loading SecretService
2025-04-13 20:21:05,387 - DEBUG - Loading Windows
2025-04-13 20:21:05,387 - DEBUG - Loading chainer
2025-04-13 20:21:05,388 - DEBUG - Loading libsecret
2025-04-13 20:21:05,388 - DEBUG - Loading macOS
2025-04-13 20:21:05,432 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:21:05,433 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:21:05,437 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:21:05,448 - DEBUG - Received response
2025-04-13 20:21:05,461 - INFO - User test logged in successfully.
2025-04-13 20:21:05,461 - INFO - Starting polling for notifications.
2025-04-13 20:21:05,462 - DEBUG - Polling for notifications...
2025-04-13 20:21:05,472 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572065 with data: None
2025-04-13 20:21:05,472 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:21:05,486 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572065 HTTP/1.1" 200 19
2025-04-13 20:21:05,486 - DEBUG - Received response: {
  "update": -6
}

2025-04-13 20:21:05,621 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:21:05,621 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:21:05,638 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:21:05,638 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:21:06,590 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:21:06,590 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:21:06,606 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:21:06,607 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:21:07,216 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:21:07,217 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:21:07,231 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 236
2025-04-13 20:21:07,272 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:21:07 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command 'bash /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.",
  "status": "finished"
}

2025-04-13 20:22:51,889 - INFO - Application started.
2025-04-13 20:22:51,889 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:22:51,889 - INFO - Attempting to log in user: test
2025-04-13 20:22:51,892 - DEBUG - Loading KWallet
2025-04-13 20:22:51,892 - DEBUG - Loading SecretService
2025-04-13 20:22:51,901 - DEBUG - Loading Windows
2025-04-13 20:22:51,901 - DEBUG - Loading chainer
2025-04-13 20:22:51,901 - DEBUG - Loading libsecret
2025-04-13 20:22:51,902 - DEBUG - Loading macOS
2025-04-13 20:22:51,945 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:22:51,947 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:22:51,950 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:22:51,960 - DEBUG - Received response
2025-04-13 20:22:51,974 - INFO - User test logged in successfully.
2025-04-13 20:22:51,974 - INFO - Starting polling for notifications.
2025-04-13 20:22:51,975 - DEBUG - Polling for notifications...
2025-04-13 20:22:51,985 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572172 with data: None
2025-04-13 20:22:51,986 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:22:51,999 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572172 HTTP/1.1" 200 21
2025-04-13 20:22:52,000 - DEBUG - Received response: {
  "update": -113
}

2025-04-13 20:22:52,132 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:22:52,133 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:22:52,147 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:22:52,147 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.sh"
  }
]

2025-04-13 20:22:53,344 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:22:53,345 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:22:53,360 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:22:53,360 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:22:54,188 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:22:54,189 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:22:54,199 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 103
2025-04-13 20:22:54,240 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:22:54 GMT",
  "log": "Hello, World! \n",
  "status": "finished"
}

2025-04-13 20:22:57,005 - DEBUG - Polling for notifications...
2025-04-13 20:22:57,018 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572172 with data: None
2025-04-13 20:22:57,018 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:22:57,032 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572172 HTTP/1.1" 200 21
2025-04-13 20:22:57,033 - DEBUG - Received response: {
  "update": -113
}

2025-04-13 20:22:59,058 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:22:59,059 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:22:59,074 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:22:59,074 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:22:59,852 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/10 with data: {}
2025-04-13 20:22:59,852 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:22:59,863 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/10 HTTP/1.1" 200 103
2025-04-13 20:22:59,904 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:22:59 GMT",
  "log": "Hello, World! \n",
  "status": "finished"
}

2025-04-13 20:23:01,187 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-13 20:23:01,188 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:01,203 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-13 20:23:01,203 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:23:01,795 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-13 20:23:01,796 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:01,805 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-04-13 20:23:01,845 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:23:01 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-04-13 20:23:02,038 - DEBUG - Polling for notifications...
2025-04-13 20:23:02,051 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572172 with data: None
2025-04-13 20:23:02,052 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:02,066 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572172 HTTP/1.1" 200 21
2025-04-13 20:23:02,066 - DEBUG - Received response: {
  "update": -113
}

2025-04-13 20:23:02,922 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-13 20:23:02,923 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:02,937 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-13 20:23:02,938 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:23:03,487 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-13 20:23:03,488 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:03,499 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 102
2025-04-13 20:23:03,540 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:23:03 GMT",
  "log": "Io piango tanto",
  "status": "finished"
}

2025-04-13 20:23:04,602 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-13 20:23:04,602 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:04,617 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 40
2025-04-13 20:23:04,617 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:23:07,071 - DEBUG - Polling for notifications...
2025-04-13 20:23:07,083 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572172 with data: None
2025-04-13 20:23:07,084 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:07,098 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572172 HTTP/1.1" 200 21
2025-04-13 20:23:07,098 - DEBUG - Received response: {
  "update": -113
}

2025-04-13 20:23:12,104 - DEBUG - Polling for notifications...
2025-04-13 20:23:12,117 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572172 with data: None
2025-04-13 20:23:12,118 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:12,132 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572172 HTTP/1.1" 200 21
2025-04-13 20:23:12,132 - DEBUG - Received response: {
  "update": -113
}

2025-04-13 20:23:13,421 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/10 with data: {'name': 'hello.py', 'description': 'ciao'}
2025-04-13 20:23:13,422 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:13,436 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/10 HTTP/1.1" 500 12480
2025-04-13 20:23:13,446 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kqsHg5az9bLtqsbi4Enm";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-123746278199632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-123746268589616">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-123746268589728">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-123746268589840">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-123746268589952">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-123746268590064">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-13 20:23:13,446 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kqsHg5az9bLtqsbi4Enm";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-123746278199632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-123746268589616">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-123746268589728">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-123746268589840">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-123746268589952">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-123746268590064">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-13 20:23:13,466 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:23:13,467 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:13,481 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:23:13,481 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-13 20:23:15,446 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-13 20:23:15,447 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:15,461 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-13 20:23:15,462 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:23:17,138 - DEBUG - Polling for notifications...
2025-04-13 20:23:17,151 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572193 with data: None
2025-04-13 20:23:17,152 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:17,165 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572193 HTTP/1.1" 200 21
2025-04-13 20:23:17,166 - DEBUG - Received response: {
  "update": -134
}

2025-04-13 20:23:17,584 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/9 with data: {}
2025-04-13 20:23:17,585 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:17,596 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/9 HTTP/1.1" 200 238
2025-04-13 20:23:17,637 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:23:17 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command 'bash /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 127.",
  "status": "finished"
}

2025-04-13 20:23:22,171 - DEBUG - Polling for notifications...
2025-04-13 20:23:22,183 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572193 with data: None
2025-04-13 20:23:22,184 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:22,198 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572193 HTTP/1.1" 200 21
2025-04-13 20:23:22,199 - DEBUG - Received response: {
  "update": -134
}

2025-04-13 20:23:24,347 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/9 with data: {'name': 'hello.sh', 'description': ''}
2025-04-13 20:23:24,348 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:24,353 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/9 HTTP/1.1" 500 12480
2025-04-13 20:23:24,363 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kqsHg5az9bLtqsbi4Enm";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-123746268591744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-123746268592304">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-123746268592976">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-123746268591968">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-123746268592080">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-123746268592192">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-13 20:23:24,364 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kqsHg5az9bLtqsbi4Enm";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-123746268591744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-123746268592304">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-123746268592976">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-123746268591968">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-123746268592080">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-123746268592192">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-13 20:23:24,382 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:23:24,382 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:24,397 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:23:24,397 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-13 20:23:25,146 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-13 20:23:25,147 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:25,162 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-13 20:23:25,162 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:23:25,534 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-13 20:23:25,534 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:25,549 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-13 20:23:25,549 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:23:27,204 - DEBUG - Polling for notifications...
2025-04-13 20:23:27,217 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572204 with data: None
2025-04-13 20:23:27,218 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:27,232 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572204 HTTP/1.1" 200 21
2025-04-13 20:23:27,232 - DEBUG - Received response: {
  "update": -145
}

2025-04-13 20:23:27,396 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/9 with data: {}
2025-04-13 20:23:27,397 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:27,407 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/9 HTTP/1.1" 200 238
2025-04-13 20:23:27,448 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:23:27 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command 'bash /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 127.",
  "status": "finished"
}

2025-04-13 20:23:32,238 - DEBUG - Polling for notifications...
2025-04-13 20:23:32,250 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572204 with data: None
2025-04-13 20:23:32,251 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:23:32,265 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572204 HTTP/1.1" 200 21
2025-04-13 20:23:32,265 - DEBUG - Received response: {
  "update": -145
}

2025-04-13 20:26:38,263 - INFO - Application started.
2025-04-13 20:26:38,263 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-13 20:26:38,263 - INFO - Attempting to log in user: test
2025-04-13 20:26:38,266 - DEBUG - Loading KWallet
2025-04-13 20:26:38,266 - DEBUG - Loading SecretService
2025-04-13 20:26:38,275 - DEBUG - Loading Windows
2025-04-13 20:26:38,275 - DEBUG - Loading chainer
2025-04-13 20:26:38,276 - DEBUG - Loading libsecret
2025-04-13 20:26:38,276 - DEBUG - Loading macOS
2025-04-13 20:26:38,321 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-13 20:26:38,322 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:26:38,326 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-13 20:26:38,336 - DEBUG - Received response
2025-04-13 20:26:38,350 - INFO - User test logged in successfully.
2025-04-13 20:26:38,350 - INFO - Starting polling for notifications.
2025-04-13 20:26:38,350 - DEBUG - Polling for notifications...
2025-04-13 20:26:38,360 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572398 with data: None
2025-04-13 20:26:38,361 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:26:38,374 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572398 HTTP/1.1" 200 21
2025-04-13 20:26:38,375 - DEBUG - Received response: {
  "update": -339
}

2025-04-13 20:26:38,509 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-13 20:26:38,510 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:26:38,524 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-13 20:26:38,524 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-13 20:26:39,522 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-13 20:26:39,522 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:26:39,537 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-13 20:26:39,537 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:26:40,045 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/9 with data: {}
2025-04-13 20:26:40,046 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:26:40,057 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/9 HTTP/1.1" 200 117
2025-04-13 20:26:40,097 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:26:40 GMT",
  "log": "Hello, World! Custom message\n",
  "status": "finished"
}

2025-04-13 20:26:41,372 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-13 20:26:41,373 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:26:41,388 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-13 20:26:41,388 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-13 20:26:41,964 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-13 20:26:41,965 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:26:41,973 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-04-13 20:26:42,013 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:26:41 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-04-13 20:26:43,008 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-13 20:26:43,009 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:26:43,024 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 94
2025-04-13 20:26:43,024 - DEBUG - Received response: {
  "description": "Io sono un plugin di test che ti dice il mio vero nome",
  "params": ""
}

2025-04-13 20:26:43,380 - DEBUG - Polling for notifications...
2025-04-13 20:26:43,392 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744572399 with data: None
2025-04-13 20:26:43,393 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:26:43,407 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744572399 HTTP/1.1" 200 21
2025-04-13 20:26:43,407 - DEBUG - Received response: {
  "update": -340
}

2025-04-13 20:26:43,746 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-13 20:26:43,747 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-13 20:26:43,755 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-04-13 20:26:43,796 - DEBUG - Received response: {
  "datetime": "Sun, 13 Apr 2025 20:26:43 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-04-14 13:18:17,122 - INFO - Application started.
2025-04-14 13:18:17,123 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:18:17,123 - INFO - Attempting to log in user: test
2025-04-14 13:18:17,129 - DEBUG - Loading KWallet
2025-04-14 13:18:17,129 - DEBUG - Loading SecretService
2025-04-14 13:18:17,171 - DEBUG - Loading Windows
2025-04-14 13:18:17,172 - DEBUG - Loading chainer
2025-04-14 13:18:17,172 - DEBUG - Loading libsecret
2025-04-14 13:18:17,172 - DEBUG - Loading macOS
2025-04-14 13:18:17,247 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:18:17,249 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:18:17,253 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:18:17,263 - DEBUG - Received response
2025-04-14 13:18:17,276 - INFO - User test logged in successfully.
2025-04-14 13:18:17,276 - INFO - Starting polling for notifications.
2025-04-14 13:18:17,277 - DEBUG - Polling for notifications...
2025-04-14 13:18:17,287 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744633097 with data: None
2025-04-14 13:18:17,287 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:18:17,301 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744633097 HTTP/1.1" 200 19
2025-04-14 13:18:17,302 - DEBUG - Received response: {
  "update": -8
}

2025-04-14 13:18:17,431 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:18:17,431 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:18:17,448 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:18:17,449 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:18:22,307 - DEBUG - Polling for notifications...
2025-04-14 13:18:22,320 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744633097 with data: None
2025-04-14 13:18:22,320 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:18:22,334 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744633097 HTTP/1.1" 200 19
2025-04-14 13:18:22,335 - DEBUG - Received response: {
  "update": -8
}

2025-04-14 13:18:24,936 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:18:24,937 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:18:24,952 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:18:24,953 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:18:25,643 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/9 with data: {}
2025-04-14 13:18:25,644 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:18:25,687 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/9 HTTP/1.1" 200 117
2025-04-14 13:18:25,728 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 13:18:25 GMT",
  "log": "Hello, World! Custom message\n",
  "status": "finished"
}

2025-04-14 13:18:27,076 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-14 13:18:27,077 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:18:27,091 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-14 13:18:27,092 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:18:27,339 - DEBUG - Polling for notifications...
2025-04-14 13:18:27,351 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744633097 with data: None
2025-04-14 13:18:27,352 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:18:27,366 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744633097 HTTP/1.1" 200 19
2025-04-14 13:18:27,366 - DEBUG - Received response: {
  "update": -8
}

2025-04-14 13:18:27,829 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-14 13:18:27,830 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:18:27,842 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-04-14 13:18:27,883 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 13:18:27 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-04-14 13:32:04,415 - INFO - Application started.
2025-04-14 13:32:04,415 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:32:04,415 - INFO - Attempting to log in user: test
2025-04-14 13:32:04,418 - DEBUG - Loading KWallet
2025-04-14 13:32:04,418 - DEBUG - Loading SecretService
2025-04-14 13:32:04,426 - DEBUG - Loading Windows
2025-04-14 13:32:04,427 - DEBUG - Loading chainer
2025-04-14 13:32:04,427 - DEBUG - Loading libsecret
2025-04-14 13:32:04,427 - DEBUG - Loading macOS
2025-04-14 13:32:04,472 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:32:04,473 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:32:04,474 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /login (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x70da3e92d0f0>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-04-14 13:32:18,844 - INFO - Application started.
2025-04-14 13:32:18,844 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:32:18,844 - INFO - Attempting to log in user: test
2025-04-14 13:32:18,847 - DEBUG - Loading KWallet
2025-04-14 13:32:18,847 - DEBUG - Loading SecretService
2025-04-14 13:32:18,856 - DEBUG - Loading Windows
2025-04-14 13:32:18,856 - DEBUG - Loading chainer
2025-04-14 13:32:18,856 - DEBUG - Loading libsecret
2025-04-14 13:32:18,856 - DEBUG - Loading macOS
2025-04-14 13:32:18,901 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:32:18,902 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:32:18,906 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:32:18,916 - DEBUG - Received response
2025-04-14 13:32:18,930 - INFO - User test logged in successfully.
2025-04-14 13:32:18,930 - INFO - Starting polling for notifications.
2025-04-14 13:32:18,930 - DEBUG - Polling for notifications...
2025-04-14 13:32:18,940 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744633939 with data: None
2025-04-14 13:32:18,941 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:32:18,955 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744633939 HTTP/1.1" 200 19
2025-04-14 13:32:18,955 - DEBUG - Received response: {
  "update": -9
}

2025-04-14 13:32:19,099 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:32:19,100 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:32:19,117 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:32:19,117 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:32:20,231 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-14 13:32:20,231 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:32:20,247 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-04-14 13:32:20,247 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:32:20,990 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-14 13:32:20,991 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:32:21,001 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-04-14 13:32:21,041 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 13:32:20 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-04-14 13:32:23,224 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:32:23,224 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:32:23,239 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:32:23,240 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:32:23,959 - DEBUG - Polling for notifications...
2025-04-14 13:32:23,972 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744633939 with data: None
2025-04-14 13:32:23,972 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:32:23,986 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744633939 HTTP/1.1" 200 19
2025-04-14 13:32:23,987 - DEBUG - Received response: {
  "update": -9
}

2025-04-14 13:32:28,988 - DEBUG - Polling for notifications...
2025-04-14 13:32:29,001 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744633939 with data: None
2025-04-14 13:32:29,002 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:32:29,016 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744633939 HTTP/1.1" 200 19
2025-04-14 13:32:29,016 - DEBUG - Received response: {
  "update": -9
}

2025-04-14 13:33:55,301 - INFO - Application started.
2025-04-14 13:33:55,301 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:33:55,301 - INFO - Attempting to log in user: test
2025-04-14 13:33:55,304 - DEBUG - Loading KWallet
2025-04-14 13:33:55,305 - DEBUG - Loading SecretService
2025-04-14 13:33:55,313 - DEBUG - Loading Windows
2025-04-14 13:33:55,313 - DEBUG - Loading chainer
2025-04-14 13:33:55,314 - DEBUG - Loading libsecret
2025-04-14 13:33:55,314 - DEBUG - Loading macOS
2025-04-14 13:33:55,358 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:33:55,359 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:33:55,362 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:33:55,373 - DEBUG - Received response
2025-04-14 13:33:55,432 - INFO - User test logged in successfully.
2025-04-14 13:33:55,432 - INFO - Starting polling for notifications.
2025-04-14 13:33:55,432 - DEBUG - Polling for notifications...
2025-04-14 13:33:55,442 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634035 with data: None
2025-04-14 13:33:55,443 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:33:55,457 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634035 HTTP/1.1" 200 21
2025-04-14 13:33:55,457 - DEBUG - Received response: {
  "update": -105
}

2025-04-14 13:33:55,592 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:33:55,592 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:33:55,606 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:33:55,607 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:33:56,433 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 13:33:56,434 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:33:56,449 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-14 13:33:56,449 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:33:57,093 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 13:33:57,094 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:33:57,102 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 102
2025-04-14 13:33:57,143 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 13:33:57 GMT",
  "log": "Io piango tanto",
  "status": "finished"
}

2025-04-14 13:33:58,484 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:33:58,485 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:33:58,499 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:33:58,500 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:33:59,223 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/None with data: None
2025-04-14 13:33:59,224 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:33:59,238 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/None HTTP/1.1" 404 207
2025-04-14 13:33:59,238 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2025-04-14 13:33:59,238 - ERROR - Error 404: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2025-04-14 13:34:00,463 - DEBUG - Polling for notifications...
2025-04-14 13:34:00,476 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634036 with data: None
2025-04-14 13:34:00,476 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:00,491 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634036 HTTP/1.1" 200 21
2025-04-14 13:34:00,491 - DEBUG - Received response: {
  "update": -106
}

2025-04-14 13:34:22,994 - INFO - Application started.
2025-04-14 13:34:22,994 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:34:22,994 - INFO - Attempting to log in user: test
2025-04-14 13:34:22,997 - DEBUG - Loading KWallet
2025-04-14 13:34:22,997 - DEBUG - Loading SecretService
2025-04-14 13:34:23,005 - DEBUG - Loading Windows
2025-04-14 13:34:23,006 - DEBUG - Loading chainer
2025-04-14 13:34:23,006 - DEBUG - Loading libsecret
2025-04-14 13:34:23,006 - DEBUG - Loading macOS
2025-04-14 13:34:23,051 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:34:23,052 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:23,056 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:34:23,066 - DEBUG - Received response
2025-04-14 13:34:23,079 - INFO - User test logged in successfully.
2025-04-14 13:34:23,079 - INFO - Starting polling for notifications.
2025-04-14 13:34:23,079 - DEBUG - Polling for notifications...
2025-04-14 13:34:23,090 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:34:23,090 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:23,104 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:34:23,104 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:34:23,246 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:34:23,246 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:23,261 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:34:23,261 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:34:24,537 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:34:24,538 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:24,553 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:34:24,553 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:34:25,948 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/None with data: None
2025-04-14 13:34:25,949 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:25,962 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/None HTTP/1.1" 404 207
2025-04-14 13:34:25,963 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2025-04-14 13:34:25,963 - ERROR - Error 404: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2025-04-14 13:34:28,110 - DEBUG - Polling for notifications...
2025-04-14 13:34:28,122 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:34:28,123 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:28,137 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:34:28,137 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:34:33,143 - DEBUG - Polling for notifications...
2025-04-14 13:34:33,155 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:34:33,156 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:33,170 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:34:33,170 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:34:38,195 - DEBUG - Polling for notifications...
2025-04-14 13:34:38,207 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:34:38,208 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:38,222 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:34:38,223 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:34:43,248 - DEBUG - Polling for notifications...
2025-04-14 13:34:43,260 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:34:43,261 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:43,275 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:34:43,275 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:34:48,301 - DEBUG - Polling for notifications...
2025-04-14 13:34:48,314 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:34:48,315 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:48,329 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:34:48,329 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:34:53,355 - DEBUG - Polling for notifications...
2025-04-14 13:34:53,367 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:34:53,368 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:53,382 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:34:53,382 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:34:58,408 - DEBUG - Polling for notifications...
2025-04-14 13:34:58,421 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:34:58,422 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:34:58,436 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:34:58,436 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:35:03,461 - DEBUG - Polling for notifications...
2025-04-14 13:35:03,474 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:35:03,475 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:03,488 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:35:03,489 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:35:08,514 - DEBUG - Polling for notifications...
2025-04-14 13:35:08,527 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:35:08,528 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:08,542 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:35:08,542 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:35:13,557 - DEBUG - Polling for notifications...
2025-04-14 13:35:13,570 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:35:13,571 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:13,584 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:35:13,585 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:35:18,610 - DEBUG - Polling for notifications...
2025-04-14 13:35:18,623 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:35:18,624 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:18,638 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:35:18,638 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:35:23,652 - DEBUG - Polling for notifications...
2025-04-14 13:35:23,664 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634063 with data: None
2025-04-14 13:35:23,665 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:23,679 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634063 HTTP/1.1" 200 21
2025-04-14 13:35:23,679 - DEBUG - Received response: {
  "update": -133
}

2025-04-14 13:35:32,543 - INFO - Application started.
2025-04-14 13:35:32,544 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:35:32,544 - INFO - Attempting to log in user: test
2025-04-14 13:35:32,546 - DEBUG - Loading KWallet
2025-04-14 13:35:32,547 - DEBUG - Loading SecretService
2025-04-14 13:35:32,555 - DEBUG - Loading Windows
2025-04-14 13:35:32,555 - DEBUG - Loading chainer
2025-04-14 13:35:32,556 - DEBUG - Loading libsecret
2025-04-14 13:35:32,556 - DEBUG - Loading macOS
2025-04-14 13:35:32,600 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:35:32,601 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:32,605 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:35:32,615 - DEBUG - Received response
2025-04-14 13:35:32,628 - INFO - User test logged in successfully.
2025-04-14 13:35:32,628 - INFO - Starting polling for notifications.
2025-04-14 13:35:32,629 - DEBUG - Polling for notifications...
2025-04-14 13:35:32,639 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634133 with data: None
2025-04-14 13:35:32,639 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:32,653 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634133 HTTP/1.1" 200 21
2025-04-14 13:35:32,653 - DEBUG - Received response: {
  "update": -203
}

2025-04-14 13:35:32,790 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:35:32,790 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:32,805 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:35:32,805 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:35:33,774 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:35:33,775 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:33,789 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:35:33,790 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:35:34,313 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/9 with data: {}
2025-04-14 13:35:34,313 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:34,324 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/9 HTTP/1.1" 200 117
2025-04-14 13:35:34,365 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 13:35:34 GMT",
  "log": "Hello, World! Custom message\n",
  "status": "finished"
}

2025-04-14 13:35:37,152 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/None with data: None
2025-04-14 13:35:37,153 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:37,167 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/None HTTP/1.1" 404 207
2025-04-14 13:35:37,167 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2025-04-14 13:35:37,167 - ERROR - Error 404: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2025-04-14 13:35:37,659 - DEBUG - Polling for notifications...
2025-04-14 13:35:37,672 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634133 with data: None
2025-04-14 13:35:37,672 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:37,686 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634133 HTTP/1.1" 200 21
2025-04-14 13:35:37,687 - DEBUG - Received response: {
  "update": -203
}

2025-04-14 13:35:39,654 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:35:39,655 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:39,670 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:35:39,670 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:35:40,420 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/None with data: None
2025-04-14 13:35:40,421 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:40,435 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/None HTTP/1.1" 404 207
2025-04-14 13:35:40,435 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2025-04-14 13:35:40,435 - ERROR - Error 404: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2025-04-14 13:35:42,692 - DEBUG - Polling for notifications...
2025-04-14 13:35:42,705 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634133 with data: None
2025-04-14 13:35:42,706 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:35:42,719 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634133 HTTP/1.1" 200 21
2025-04-14 13:35:42,720 - DEBUG - Received response: {
  "update": -203
}

2025-04-14 13:36:26,639 - INFO - Application started.
2025-04-14 13:36:26,639 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:36:26,639 - INFO - Attempting to log in user: test
2025-04-14 13:36:26,642 - DEBUG - Loading KWallet
2025-04-14 13:36:26,642 - DEBUG - Loading SecretService
2025-04-14 13:36:26,650 - DEBUG - Loading Windows
2025-04-14 13:36:26,651 - DEBUG - Loading chainer
2025-04-14 13:36:26,651 - DEBUG - Loading libsecret
2025-04-14 13:36:26,651 - DEBUG - Loading macOS
2025-04-14 13:36:26,695 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:36:26,697 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:36:26,700 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:36:26,710 - DEBUG - Received response
2025-04-14 13:36:26,724 - INFO - User test logged in successfully.
2025-04-14 13:36:26,724 - INFO - Starting polling for notifications.
2025-04-14 13:36:26,724 - DEBUG - Polling for notifications...
2025-04-14 13:36:26,734 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634187 with data: None
2025-04-14 13:36:26,735 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:36:26,748 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634187 HTTP/1.1" 200 21
2025-04-14 13:36:26,749 - DEBUG - Received response: {
  "update": -257
}

2025-04-14 13:36:26,886 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:36:26,886 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:36:26,901 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:36:26,901 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:36:28,195 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:36:28,195 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:36:28,210 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:36:28,211 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:36:28,909 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/9 with data: None
2025-04-14 13:36:28,909 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:36:28,927 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/9 HTTP/1.1" 500 12928
2025-04-14 13:36:28,928 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a int.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "PBPUAAjssdb9HK7YcbP5";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a int.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127789074582768">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127789056568208">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127789056568320">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127789056568432">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-127789056568544">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-127789056568656">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1249</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                        </span>&#34; dict, list, tuple with headers or status,&#34;</pre>
<pre class="line before"><span class="ws">                        </span>&#34; Response instance, or WSGI callable, but it&#34;</pre>
<pre class="line before"><span class="ws">                        </span>f&#34; was a {type(rv).__name__}.&#34;</pre>
<pre class="line before"><span class="ws">                    </span>).with_traceback(sys.exc_info()[2]) from None</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line current"><span class="ws">                </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;The view function did not return a valid&#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34; response. The return type must be a string,&#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34; dict, list, tuple with headers or status,&#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34; Response instance, or WSGI callable, but it was a&#34;</pre>
<pre class="line after"><span class="ws">                    </span>f&#34; {type(rv).__name__}.&#34;</pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a int.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1249, in make_response
    raise TypeError(
TypeError: The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a int.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1249, in make_response
    raise TypeError(
TypeError: The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a int.


-->

2025-04-14 13:36:28,928 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a int.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "PBPUAAjssdb9HK7YcbP5";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a int.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127789074582768">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127789056568208">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127789056568320">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127789056568432">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-127789056568544">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-127789056568656">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1249</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                        </span>&#34; dict, list, tuple with headers or status,&#34;</pre>
<pre class="line before"><span class="ws">                        </span>&#34; Response instance, or WSGI callable, but it&#34;</pre>
<pre class="line before"><span class="ws">                        </span>f&#34; was a {type(rv).__name__}.&#34;</pre>
<pre class="line before"><span class="ws">                    </span>).with_traceback(sys.exc_info()[2]) from None</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line current"><span class="ws">                </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;The view function did not return a valid&#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34; response. The return type must be a string,&#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34; dict, list, tuple with headers or status,&#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34; Response instance, or WSGI callable, but it was a&#34;</pre>
<pre class="line after"><span class="ws">                    </span>f&#34; {type(rv).__name__}.&#34;</pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a int.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1249, in make_response
    raise TypeError(
TypeError: The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a int.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1249, in make_response
    raise TypeError(
TypeError: The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a int.


-->

2025-04-14 13:36:31,754 - DEBUG - Polling for notifications...
2025-04-14 13:36:31,767 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634187 with data: None
2025-04-14 13:36:31,768 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:36:31,782 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634187 HTTP/1.1" 200 21
2025-04-14 13:36:31,782 - DEBUG - Received response: {
  "update": -257
}

2025-04-14 13:37:18,864 - INFO - Application started.
2025-04-14 13:37:18,864 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:37:18,864 - INFO - Attempting to log in user: test
2025-04-14 13:37:18,867 - DEBUG - Loading KWallet
2025-04-14 13:37:18,868 - DEBUG - Loading SecretService
2025-04-14 13:37:18,876 - DEBUG - Loading Windows
2025-04-14 13:37:18,877 - DEBUG - Loading chainer
2025-04-14 13:37:18,877 - DEBUG - Loading libsecret
2025-04-14 13:37:18,877 - DEBUG - Loading macOS
2025-04-14 13:37:18,921 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:37:18,922 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:37:18,927 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:37:18,937 - DEBUG - Received response
2025-04-14 13:37:18,951 - INFO - User test logged in successfully.
2025-04-14 13:37:18,951 - INFO - Starting polling for notifications.
2025-04-14 13:37:18,951 - DEBUG - Polling for notifications...
2025-04-14 13:37:18,961 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634239 with data: None
2025-04-14 13:37:18,962 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:37:18,976 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634239 HTTP/1.1" 200 19
2025-04-14 13:37:18,976 - DEBUG - Received response: {
  "update": -8
}

2025-04-14 13:37:19,109 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:37:19,110 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:37:19,126 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:37:19,126 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:37:20,158 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:37:20,159 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:37:20,174 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:37:20,175 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:37:20,823 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/9 with data: None
2025-04-14 13:37:20,823 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:37:20,838 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/9 HTTP/1.1" 200 3
2025-04-14 13:37:20,838 - DEBUG - Received response: 500
2025-04-14 13:37:23,981 - DEBUG - Polling for notifications...
2025-04-14 13:37:23,994 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634239 with data: None
2025-04-14 13:37:23,995 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:37:24,009 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634239 HTTP/1.1" 200 19
2025-04-14 13:37:24,010 - DEBUG - Received response: {
  "update": -8
}

2025-04-14 13:37:29,015 - DEBUG - Polling for notifications...
2025-04-14 13:37:29,028 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634239 with data: None
2025-04-14 13:37:29,028 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:37:29,042 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634239 HTTP/1.1" 200 19
2025-04-14 13:37:29,043 - DEBUG - Received response: {
  "update": -8
}

2025-04-14 13:38:27,040 - INFO - Application started.
2025-04-14 13:38:27,040 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:38:27,040 - INFO - Attempting to log in user: test
2025-04-14 13:38:27,043 - DEBUG - Loading KWallet
2025-04-14 13:38:27,044 - DEBUG - Loading SecretService
2025-04-14 13:38:27,052 - DEBUG - Loading Windows
2025-04-14 13:38:27,052 - DEBUG - Loading chainer
2025-04-14 13:38:27,052 - DEBUG - Loading libsecret
2025-04-14 13:38:27,053 - DEBUG - Loading macOS
2025-04-14 13:38:27,097 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:38:27,098 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:38:27,102 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:38:27,112 - DEBUG - Received response
2025-04-14 13:38:27,126 - INFO - User test logged in successfully.
2025-04-14 13:38:27,126 - INFO - Starting polling for notifications.
2025-04-14 13:38:27,126 - DEBUG - Polling for notifications...
2025-04-14 13:38:27,136 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634307 with data: None
2025-04-14 13:38:27,136 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:38:27,150 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634307 HTTP/1.1" 200 20
2025-04-14 13:38:27,150 - DEBUG - Received response: {
  "update": -76
}

2025-04-14 13:38:27,294 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:38:27,295 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:38:27,309 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:38:27,310 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:38:28,537 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:38:28,537 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:38:28,552 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:38:28,552 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:38:29,250 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/9 with data: {}
2025-04-14 13:38:29,250 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:38:29,261 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/9 HTTP/1.1" 200 238
2025-04-14 13:38:29,302 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 13:38:29 GMT",
  "log": "Errore nell'esecuzione del plugin Bash: Command 'bash /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 127.",
  "status": "finished"
}

2025-04-14 13:40:56,411 - INFO - Application started.
2025-04-14 13:40:56,411 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:40:56,412 - INFO - Attempting to log in user: test
2025-04-14 13:40:56,416 - DEBUG - Loading KWallet
2025-04-14 13:40:56,416 - DEBUG - Loading SecretService
2025-04-14 13:40:56,426 - DEBUG - Loading Windows
2025-04-14 13:40:56,426 - DEBUG - Loading chainer
2025-04-14 13:40:56,426 - DEBUG - Loading libsecret
2025-04-14 13:40:56,426 - DEBUG - Loading macOS
2025-04-14 13:40:56,471 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:40:56,472 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:40:56,477 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:40:56,487 - DEBUG - Received response
2025-04-14 13:40:56,500 - INFO - User test logged in successfully.
2025-04-14 13:40:56,500 - INFO - Starting polling for notifications.
2025-04-14 13:40:56,500 - DEBUG - Polling for notifications...
2025-04-14 13:40:56,510 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634456 with data: None
2025-04-14 13:40:56,511 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:40:56,526 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634456 HTTP/1.1" 200 20
2025-04-14 13:40:56,526 - DEBUG - Received response: {
  "update": -36
}

2025-04-14 13:40:56,666 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:40:56,666 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:40:56,683 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:40:56,683 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:40:57,464 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:40:57,465 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:40:57,480 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:40:57,481 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:40:58,676 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/9 with data: None
2025-04-14 13:40:58,676 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:40:58,694 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/9 HTTP/1.1" 500 13954
2025-04-14 13:40:58,695 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;PlugTable&#39; object has no attribute &#39;delete&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "JZ2lPMJR1VsRiugro47N";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;PlugTable&#39; object has no attribute &#39;delete&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-134467441495168">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-134467431671824">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-134467431671936">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-134467431672048">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-134467431672160">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-134467431672272">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-134467431672384">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">207</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>#Eliminare dal sistema un plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/remove_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;remove_plugin&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>if plugin and elimina_plugin(plugin.name):</pre>
<pre class="line current"><span class="ws">        </span>plugin.delete()</pre>
<pre class="line after"><span class="ws">        </span>return &#34;200&#34;</pre>
<pre class="line after"><span class="ws">    </span>return &#34;500&#34;</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per ottenere la lista dei messaggi di log</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;PlugTable&#39; object has no attribute &#39;delete&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 207, in modifyPlugin
    plugin.delete()
AttributeError: &#39;PlugTable&#39; object has no attribute &#39;delete&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 207, in modifyPlugin
    plugin.delete()
AttributeError: 'PlugTable' object has no attribute 'delete'


-->

2025-04-14 13:40:58,695 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;PlugTable&#39; object has no attribute &#39;delete&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "JZ2lPMJR1VsRiugro47N";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;PlugTable&#39; object has no attribute &#39;delete&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-134467441495168">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-134467431671824">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-134467431671936">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-134467431672048">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-134467431672160">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-134467431672272">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-134467431672384">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">207</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>#Eliminare dal sistema un plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/remove_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;remove_plugin&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>if plugin and elimina_plugin(plugin.name):</pre>
<pre class="line current"><span class="ws">        </span>plugin.delete()</pre>
<pre class="line after"><span class="ws">        </span>return &#34;200&#34;</pre>
<pre class="line after"><span class="ws">    </span>return &#34;500&#34;</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per ottenere la lista dei messaggi di log</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;PlugTable&#39; object has no attribute &#39;delete&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 207, in modifyPlugin
    plugin.delete()
AttributeError: &#39;PlugTable&#39; object has no attribute &#39;delete&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 207, in modifyPlugin
    plugin.delete()
AttributeError: 'PlugTable' object has no attribute 'delete'


-->

2025-04-14 13:41:42,641 - INFO - Application started.
2025-04-14 13:41:42,641 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:41:42,641 - INFO - Attempting to log in user: test
2025-04-14 13:41:42,644 - DEBUG - Loading KWallet
2025-04-14 13:41:42,644 - DEBUG - Loading SecretService
2025-04-14 13:41:42,653 - DEBUG - Loading Windows
2025-04-14 13:41:42,653 - DEBUG - Loading chainer
2025-04-14 13:41:42,653 - DEBUG - Loading libsecret
2025-04-14 13:41:42,653 - DEBUG - Loading macOS
2025-04-14 13:41:42,698 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:41:42,699 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:41:42,704 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:41:42,714 - DEBUG - Received response
2025-04-14 13:41:42,727 - INFO - User test logged in successfully.
2025-04-14 13:41:42,727 - INFO - Starting polling for notifications.
2025-04-14 13:41:42,727 - DEBUG - Polling for notifications...
2025-04-14 13:41:42,737 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634503 with data: None
2025-04-14 13:41:42,738 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:41:42,752 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634503 HTTP/1.1" 200 20
2025-04-14 13:41:42,752 - DEBUG - Received response: {
  "update": -18
}

2025-04-14 13:41:42,891 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:41:42,892 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:41:42,908 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:41:42,909 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:41:43,794 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:41:43,795 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:41:43,811 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:41:43,811 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:41:44,459 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/9 with data: None
2025-04-14 13:41:44,460 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:41:44,475 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/9 HTTP/1.1" 200 3
2025-04-14 13:41:44,475 - DEBUG - Received response: 200
2025-04-14 13:41:47,757 - DEBUG - Polling for notifications...
2025-04-14 13:41:47,769 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634503 with data: None
2025-04-14 13:41:47,770 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:41:47,784 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634503 HTTP/1.1" 200 20
2025-04-14 13:41:47,784 - DEBUG - Received response: {
  "update": -18
}

2025-04-14 13:42:02,664 - INFO - Application started.
2025-04-14 13:42:02,664 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:42:02,664 - INFO - Attempting to log in user: test
2025-04-14 13:42:02,667 - DEBUG - Loading KWallet
2025-04-14 13:42:02,668 - DEBUG - Loading SecretService
2025-04-14 13:42:02,676 - DEBUG - Loading Windows
2025-04-14 13:42:02,677 - DEBUG - Loading chainer
2025-04-14 13:42:02,677 - DEBUG - Loading libsecret
2025-04-14 13:42:02,677 - DEBUG - Loading macOS
2025-04-14 13:42:02,722 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:42:02,723 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:42:02,727 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:42:02,737 - DEBUG - Received response
2025-04-14 13:42:02,750 - INFO - User test logged in successfully.
2025-04-14 13:42:02,750 - INFO - Starting polling for notifications.
2025-04-14 13:42:02,750 - DEBUG - Polling for notifications...
2025-04-14 13:42:02,760 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634523 with data: None
2025-04-14 13:42:02,761 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:42:02,774 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634523 HTTP/1.1" 200 20
2025-04-14 13:42:02,775 - DEBUG - Received response: {
  "update": -38
}

2025-04-14 13:42:02,914 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:42:02,915 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:42:02,929 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:42:02,930 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:42:03,837 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:42:03,838 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:42:03,853 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:42:03,853 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:42:07,780 - DEBUG - Polling for notifications...
2025-04-14 13:42:07,793 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634523 with data: None
2025-04-14 13:42:07,794 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:42:07,807 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634523 HTTP/1.1" 200 20
2025-04-14 13:42:07,808 - DEBUG - Received response: {
  "update": -38
}

2025-04-14 13:42:12,813 - DEBUG - Polling for notifications...
2025-04-14 13:42:12,825 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634523 with data: None
2025-04-14 13:42:12,826 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:42:12,840 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634523 HTTP/1.1" 200 20
2025-04-14 13:42:12,841 - DEBUG - Received response: {
  "update": -38
}

2025-04-14 13:42:17,866 - DEBUG - Polling for notifications...
2025-04-14 13:42:17,879 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634523 with data: None
2025-04-14 13:42:17,880 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:42:17,894 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634523 HTTP/1.1" 200 20
2025-04-14 13:42:17,894 - DEBUG - Received response: {
  "update": -38
}

2025-04-14 13:42:22,918 - DEBUG - Polling for notifications...
2025-04-14 13:42:22,930 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634523 with data: None
2025-04-14 13:42:22,931 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:42:22,944 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634523 HTTP/1.1" 200 20
2025-04-14 13:42:22,945 - DEBUG - Received response: {
  "update": -38
}

2025-04-14 13:42:27,958 - DEBUG - Polling for notifications...
2025-04-14 13:42:27,970 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634523 with data: None
2025-04-14 13:42:27,971 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:42:27,985 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634523 HTTP/1.1" 200 20
2025-04-14 13:42:27,985 - DEBUG - Received response: {
  "update": -38
}

2025-04-14 13:42:33,011 - DEBUG - Polling for notifications...
2025-04-14 13:42:33,023 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634523 with data: None
2025-04-14 13:42:33,024 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:42:33,038 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634523 HTTP/1.1" 200 20
2025-04-14 13:42:33,039 - DEBUG - Received response: {
  "update": -38
}

2025-04-14 13:43:08,768 - INFO - Application started.
2025-04-14 13:43:08,768 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:43:08,768 - INFO - Attempting to log in user: test
2025-04-14 13:43:08,771 - DEBUG - Loading KWallet
2025-04-14 13:43:08,772 - DEBUG - Loading SecretService
2025-04-14 13:43:08,780 - DEBUG - Loading Windows
2025-04-14 13:43:08,781 - DEBUG - Loading chainer
2025-04-14 13:43:08,781 - DEBUG - Loading libsecret
2025-04-14 13:43:08,781 - DEBUG - Loading macOS
2025-04-14 13:43:08,825 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:43:08,827 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:08,830 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:43:08,840 - DEBUG - Received response
2025-04-14 13:43:08,853 - INFO - User test logged in successfully.
2025-04-14 13:43:08,854 - INFO - Starting polling for notifications.
2025-04-14 13:43:08,854 - DEBUG - Polling for notifications...
2025-04-14 13:43:08,864 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634589 with data: None
2025-04-14 13:43:08,865 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:08,879 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634589 HTTP/1.1" 200 21
2025-04-14 13:43:08,879 - DEBUG - Received response: {
  "update": -104
}

2025-04-14 13:43:09,014 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:43:09,014 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:09,029 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:43:09,029 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:43:10,470 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:43:10,470 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:10,485 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:43:10,485 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:43:12,750 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-14 13:43:12,751 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:12,766 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 44
2025-04-14 13:43:12,766 - DEBUG - Received response: {
  "description": "ciao",
  "params": ""
}

2025-04-14 13:43:13,884 - DEBUG - Polling for notifications...
2025-04-14 13:43:13,896 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634589 with data: None
2025-04-14 13:43:13,897 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:13,911 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634589 HTTP/1.1" 200 21
2025-04-14 13:43:13,911 - DEBUG - Received response: {
  "update": -104
}

2025-04-14 13:43:18,916 - DEBUG - Polling for notifications...
2025-04-14 13:43:18,927 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634589 with data: None
2025-04-14 13:43:18,928 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:18,942 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634589 HTTP/1.1" 200 21
2025-04-14 13:43:18,943 - DEBUG - Received response: {
  "update": -104
}

2025-04-14 13:43:20,053 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/10 with data: {'name': 'hello.sh', 'description': ''}
2025-04-14 13:43:20,054 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:20,061 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/10 HTTP/1.1" 500 12480
2025-04-14 13:43:20,071 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "IPozzWE7NdvhahXSuFAo";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-136297612397584">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-136297594251280">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-136297594251392">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-136297594251504">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-136297594251616">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-136297594251728">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 13:43:20,072 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "IPozzWE7NdvhahXSuFAo";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-136297612397584">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-136297594251280">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-136297594251392">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-136297594251504">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-136297594251616">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-136297594251728">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 13:43:20,090 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:43:20,091 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:20,105 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:43:20,105 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:43:21,470 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:43:21,471 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:21,486 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:43:21,487 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:43:22,019 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-14 13:43:22,020 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:22,034 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 44
2025-04-14 13:43:22,035 - DEBUG - Received response: {
  "description": "ciao",
  "params": ""
}

2025-04-14 13:43:23,948 - DEBUG - Polling for notifications...
2025-04-14 13:43:23,960 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634600 with data: None
2025-04-14 13:43:23,961 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:23,975 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634600 HTTP/1.1" 200 21
2025-04-14 13:43:23,975 - DEBUG - Received response: {
  "update": -115
}

2025-04-14 13:43:24,060 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:43:24,061 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:24,076 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:43:24,076 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:43:25,540 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-14 13:43:25,541 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:25,556 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 44
2025-04-14 13:43:25,556 - DEBUG - Received response: {
  "description": "ciao",
  "params": ""
}

2025-04-14 13:43:28,981 - DEBUG - Polling for notifications...
2025-04-14 13:43:28,993 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634600 with data: None
2025-04-14 13:43:28,994 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:29,008 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634600 HTTP/1.1" 200 21
2025-04-14 13:43:29,009 - DEBUG - Received response: {
  "update": -115
}

2025-04-14 13:43:31,168 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/10 with data: {'name': 'a.sh', 'description': ''}
2025-04-14 13:43:31,168 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:31,174 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/10 HTTP/1.1" 500 12480
2025-04-14 13:43:31,184 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "IPozzWE7NdvhahXSuFAo";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-136297594254080">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-136297594253184">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-136297594252848">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-136297594253968">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-136297594254416">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-136297594253856">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 13:43:31,185 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "IPozzWE7NdvhahXSuFAo";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-136297594254080">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-136297594253184">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-136297594252848">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-136297594253968">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-136297594254416">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-136297594253856">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 13:43:31,204 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:43:31,204 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:31,219 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:43:31,219 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:43:34,014 - DEBUG - Polling for notifications...
2025-04-14 13:43:34,026 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634611 with data: None
2025-04-14 13:43:34,027 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:34,041 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634611 HTTP/1.1" 200 21
2025-04-14 13:43:34,041 - DEBUG - Received response: {
  "update": -126
}

2025-04-14 13:43:39,046 - DEBUG - Polling for notifications...
2025-04-14 13:43:39,059 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634611 with data: None
2025-04-14 13:43:39,059 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:39,073 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634611 HTTP/1.1" 200 21
2025-04-14 13:43:39,074 - DEBUG - Received response: {
  "update": -126
}

2025-04-14 13:43:44,079 - DEBUG - Polling for notifications...
2025-04-14 13:43:44,091 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634611 with data: None
2025-04-14 13:43:44,092 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:44,105 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634611 HTTP/1.1" 200 21
2025-04-14 13:43:44,106 - DEBUG - Received response: {
  "update": -126
}

2025-04-14 13:43:49,111 - DEBUG - Polling for notifications...
2025-04-14 13:43:49,124 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634611 with data: None
2025-04-14 13:43:49,124 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:49,138 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634611 HTTP/1.1" 200 21
2025-04-14 13:43:49,139 - DEBUG - Received response: {
  "update": -126
}

2025-04-14 13:43:54,144 - DEBUG - Polling for notifications...
2025-04-14 13:43:54,157 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634611 with data: None
2025-04-14 13:43:54,157 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:54,171 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634611 HTTP/1.1" 200 21
2025-04-14 13:43:54,172 - DEBUG - Received response: {
  "update": -126
}

2025-04-14 13:43:59,177 - DEBUG - Polling for notifications...
2025-04-14 13:43:59,190 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634611 with data: None
2025-04-14 13:43:59,190 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:43:59,204 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634611 HTTP/1.1" 200 21
2025-04-14 13:43:59,205 - DEBUG - Received response: {
  "update": -126
}

2025-04-14 13:44:01,046 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:44:01,047 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:01,062 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:44:01,062 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:44:01,990 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/9 with data: None
2025-04-14 13:44:01,991 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:02,005 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/9 HTTP/1.1" 200 3
2025-04-14 13:44:02,006 - DEBUG - Received response: 200
2025-04-14 13:44:16,880 - INFO - Application started.
2025-04-14 13:44:16,880 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:44:16,880 - INFO - Attempting to log in user: test
2025-04-14 13:44:16,883 - DEBUG - Loading KWallet
2025-04-14 13:44:16,884 - DEBUG - Loading SecretService
2025-04-14 13:44:16,892 - DEBUG - Loading Windows
2025-04-14 13:44:16,893 - DEBUG - Loading chainer
2025-04-14 13:44:16,893 - DEBUG - Loading libsecret
2025-04-14 13:44:16,893 - DEBUG - Loading macOS
2025-04-14 13:44:16,937 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:44:16,939 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:16,942 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:44:16,952 - DEBUG - Received response
2025-04-14 13:44:16,965 - INFO - User test logged in successfully.
2025-04-14 13:44:16,966 - INFO - Starting polling for notifications.
2025-04-14 13:44:16,966 - DEBUG - Polling for notifications...
2025-04-14 13:44:16,976 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634657 with data: None
2025-04-14 13:44:16,976 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:16,990 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634657 HTTP/1.1" 200 21
2025-04-14 13:44:16,990 - DEBUG - Received response: {
  "update": -172
}

2025-04-14 13:44:17,123 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:44:17,124 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:17,139 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 462
2025-04-14 13:44:17,139 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "hello.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:44:18,251 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/9 with data: None
2025-04-14 13:44:18,252 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:18,267 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/9 HTTP/1.1" 200 40
2025-04-14 13:44:18,267 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:44:21,996 - DEBUG - Polling for notifications...
2025-04-14 13:44:22,008 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634657 with data: None
2025-04-14 13:44:22,009 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:22,022 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634657 HTTP/1.1" 200 21
2025-04-14 13:44:22,023 - DEBUG - Received response: {
  "update": -172
}

2025-04-14 13:44:22,097 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/9 with data: {'name': 'a.sh', 'description': ''}
2025-04-14 13:44:22,098 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:22,108 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/9 HTTP/1.1" 500 12480
2025-04-14 13:44:22,118 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "IPozzWE7NdvhahXSuFAo";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-136297594253632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-136297594254864">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-136297594253408">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-136297594255200">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-136297594254640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-136297594253744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 13:44:22,118 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "IPozzWE7NdvhahXSuFAo";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-136297594253632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-136297594254864">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-136297594253408">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-136297594255200">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-136297594254640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-136297594253744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 13:44:22,139 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:44:22,140 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:22,154 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 458
2025-04-14 13:44:22,155 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "a.sh"
  },
  {
    "id": 10,
    "name": "hello.py"
  }
]

2025-04-14 13:44:27,028 - DEBUG - Polling for notifications...
2025-04-14 13:44:27,040 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634662 with data: None
2025-04-14 13:44:27,041 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:27,055 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634662 HTTP/1.1" 200 21
2025-04-14 13:44:27,056 - DEBUG - Received response: {
  "update": -177
}

2025-04-14 13:44:27,108 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/10 with data: None
2025-04-14 13:44:27,109 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:27,124 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/10 HTTP/1.1" 200 44
2025-04-14 13:44:27,124 - DEBUG - Received response: {
  "description": "ciao",
  "params": ""
}

2025-04-14 13:44:32,061 - DEBUG - Polling for notifications...
2025-04-14 13:44:32,074 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634662 with data: None
2025-04-14 13:44:32,074 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:32,088 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634662 HTTP/1.1" 200 21
2025-04-14 13:44:32,089 - DEBUG - Received response: {
  "update": -177
}

2025-04-14 13:44:32,311 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/10 with data: {'name': 'ciao.sh', 'description': ''}
2025-04-14 13:44:32,312 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:32,346 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/10 HTTP/1.1" 500 12480
2025-04-14 13:44:32,356 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "IPozzWE7NdvhahXSuFAo";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-136297594255760">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-136297594256656">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-136297594256320">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-136297594255872">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-136297594255536">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-136297594256208">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 13:44:32,356 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "IPozzWE7NdvhahXSuFAo";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-136297594255760">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-136297594256656">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-136297594256320">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-136297594255872">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-136297594255536">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-136297594256208">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 13:44:32,378 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:44:32,378 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:32,393 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 457
2025-04-14 13:44:32,393 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  },
  {
    "id": 4,
    "name": "hello.sh"
  },
  {
    "id": 5,
    "name": "hello.sh"
  },
  {
    "id": 6,
    "name": "hello.sh"
  },
  {
    "id": 7,
    "name": "hello.sh"
  },
  {
    "id": 8,
    "name": "hello.sh"
  },
  {
    "id": 9,
    "name": "a.sh"
  },
  {
    "id": 10,
    "name": "ciao.sh"
  }
]

2025-04-14 13:44:37,093 - DEBUG - Polling for notifications...
2025-04-14 13:44:37,105 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634672 with data: None
2025-04-14 13:44:37,106 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:44:37,120 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634672 HTTP/1.1" 200 21
2025-04-14 13:44:37,120 - DEBUG - Received response: {
  "update": -187
}

2025-04-14 13:45:41,526 - INFO - Application started.
2025-04-14 13:45:41,526 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:45:41,526 - INFO - Attempting to log in user: test
2025-04-14 13:45:41,529 - DEBUG - Loading KWallet
2025-04-14 13:45:41,529 - DEBUG - Loading SecretService
2025-04-14 13:45:41,538 - DEBUG - Loading Windows
2025-04-14 13:45:41,538 - DEBUG - Loading chainer
2025-04-14 13:45:41,538 - DEBUG - Loading libsecret
2025-04-14 13:45:41,539 - DEBUG - Loading macOS
2025-04-14 13:45:41,582 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:45:41,584 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:45:41,584 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /login (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7ddd9659b520>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-04-14 13:48:42,029 - INFO - Application started.
2025-04-14 13:48:42,029 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:48:42,029 - INFO - Attempting to log in user: test
2025-04-14 13:48:42,032 - DEBUG - Loading KWallet
2025-04-14 13:48:42,032 - DEBUG - Loading SecretService
2025-04-14 13:48:42,041 - DEBUG - Loading Windows
2025-04-14 13:48:42,041 - DEBUG - Loading chainer
2025-04-14 13:48:42,041 - DEBUG - Loading libsecret
2025-04-14 13:48:42,042 - DEBUG - Loading macOS
2025-04-14 13:48:42,086 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:48:42,087 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:48:42,091 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:48:42,101 - DEBUG - Received response
2025-04-14 13:48:42,115 - INFO - User test logged in successfully.
2025-04-14 13:48:42,115 - INFO - Starting polling for notifications.
2025-04-14 13:48:42,115 - DEBUG - Polling for notifications...
2025-04-14 13:48:42,125 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634922 with data: None
2025-04-14 13:48:42,126 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:48:42,139 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634922 HTTP/1.1" 200 19
2025-04-14 13:48:42,140 - DEBUG - Received response: {
  "update": -9
}

2025-04-14 13:48:42,276 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:48:42,276 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:48:42,294 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 43280
2025-04-14 13:48:42,294 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "XMwRAKp1vlF7MZt7APJJ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140393789039984">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-140393789040096">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-140393809561632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140393808062144">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140393808062256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140393808062368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140393808062480">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140393808062592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140393808062704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140393808150928">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">108</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per i dettagli del plugin</pre></div>
</div>

<li><div class="frame" id="frame-140393808155408">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2704</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-140393808392960">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2858</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140393808393072">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-140393789972080">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-140393789972192">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py"</cite>,
      line <em class="line">306</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-140393790192688">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140393790516000">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140393788828336">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-140393788828448">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-140393788828560">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140393788828672">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-140393788828784">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-140393788828896">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 108, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2704, in all
    return self._iter().all()  # type: ignore
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py&#34;, line 306, in orm_execute_statement
    result = conn.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 108, in plug_table
    pluginT = PlugTable.query.all()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2704, in all
    return self._iter().all()  # type: ignore
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-04-14 13:48:42,295 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "XMwRAKp1vlF7MZt7APJJ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140393789039984">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-140393789040096">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-140393809561632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140393808062144">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140393808062256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140393808062368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140393808062480">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140393808062592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140393808062704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140393808150928">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">108</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per i dettagli del plugin</pre></div>
</div>

<li><div class="frame" id="frame-140393808155408">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2704</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-140393808392960">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2858</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140393808393072">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-140393789972080">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-140393789972192">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py"</cite>,
      line <em class="line">306</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-140393790192688">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140393790516000">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140393788828336">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-140393788828448">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-140393788828560">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140393788828672">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-140393788828784">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-140393788828896">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 108, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2704, in all
    return self._iter().all()  # type: ignore
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py&#34;, line 306, in orm_execute_statement
    result = conn.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 108, in plug_table
    pluginT = PlugTable.query.all()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2704, in all
    return self._iter().all()  # type: ignore
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-04-14 13:49:37,416 - INFO - Application started.
2025-04-14 13:49:37,417 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:49:37,417 - INFO - Attempting to log in user: test
2025-04-14 13:49:37,419 - DEBUG - Loading KWallet
2025-04-14 13:49:37,420 - DEBUG - Loading SecretService
2025-04-14 13:49:37,428 - DEBUG - Loading Windows
2025-04-14 13:49:37,428 - DEBUG - Loading chainer
2025-04-14 13:49:37,429 - DEBUG - Loading libsecret
2025-04-14 13:49:37,429 - DEBUG - Loading macOS
2025-04-14 13:49:37,472 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:49:37,473 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:49:37,477 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:49:37,488 - DEBUG - Received response
2025-04-14 13:49:37,500 - INFO - User test logged in successfully.
2025-04-14 13:49:37,501 - INFO - Starting polling for notifications.
2025-04-14 13:49:37,501 - DEBUG - Polling for notifications...
2025-04-14 13:49:37,510 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634977 with data: None
2025-04-14 13:49:37,511 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:49:37,525 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634977 HTTP/1.1" 200 20
2025-04-14 13:49:37,525 - DEBUG - Received response: {
  "update": -12
}

2025-04-14 13:49:37,667 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:49:37,668 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:49:37,684 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 13:49:37,685 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 13:49:37,685 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 13:49:42,529 - DEBUG - Polling for notifications...
2025-04-14 13:49:42,541 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634977 with data: None
2025-04-14 13:49:42,542 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:49:42,556 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634977 HTTP/1.1" 200 20
2025-04-14 13:49:42,556 - DEBUG - Received response: {
  "update": -12
}

2025-04-14 13:49:47,562 - DEBUG - Polling for notifications...
2025-04-14 13:49:47,574 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634977 with data: None
2025-04-14 13:49:47,574 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:49:47,588 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634977 HTTP/1.1" 200 20
2025-04-14 13:49:47,589 - DEBUG - Received response: {
  "update": -12
}

2025-04-14 13:49:52,594 - DEBUG - Polling for notifications...
2025-04-14 13:49:52,606 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634977 with data: None
2025-04-14 13:49:52,607 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:49:52,621 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634977 HTTP/1.1" 200 20
2025-04-14 13:49:52,622 - DEBUG - Received response: {
  "update": -12
}

2025-04-14 13:49:57,626 - DEBUG - Polling for notifications...
2025-04-14 13:49:57,638 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634977 with data: None
2025-04-14 13:49:57,639 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:49:57,653 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634977 HTTP/1.1" 200 20
2025-04-14 13:49:57,653 - DEBUG - Received response: {
  "update": -12
}

2025-04-14 13:50:02,678 - DEBUG - Polling for notifications...
2025-04-14 13:50:02,691 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634977 with data: None
2025-04-14 13:50:02,692 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:02,705 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634977 HTTP/1.1" 200 20
2025-04-14 13:50:02,706 - DEBUG - Received response: {
  "update": -12
}

2025-04-14 13:50:04,698 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file.py'}
2025-04-14 13:50:04,699 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:04,706 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 500 18786
2025-04-14 13:50:04,716 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;tempfile&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "uQdKf2XwR9NFnCKN7ZpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;tempfile&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-125447972391280">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-125447954097856">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-125447954097968">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-125447954098080">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-125447954098192">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-125447954098304">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-125447954098416">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-125447954186640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">154</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Get the JSON data from the request</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>if not data or &#39;name&#39; not in data:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#34;error&#34;: &#34;Invalid record&#34;}), 404</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])</pre>
<pre class="line after"><span class="ws">    </span>if created:</pre>
<pre class="line after"><span class="ws">        </span># Create a new plugin instance</pre>
<pre class="line after"><span class="ws">        </span>new_plugin = PlugTable(</pre>
<pre class="line after"><span class="ws">            </span>name=data[&#39;name&#39;],</pre>
<pre class="line after"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre></div>
</div>

<li><div class="frame" id="frame-125447954191120">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">162</em>,
      in <code class="function">creaPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.sh&#39;):</pre>
<pre class="line before"><span class="ws">        </span>return creaPluginSh(nome_file, contenuto)</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.py&#39;):</pre>
<pre class="line current"><span class="ws">        </span>return creaPluginPy(nome_file, contenuto)</pre>
<pre class="line after"><span class="ws">    </span>print(&#34;Il tipo di file non e&#39; supportato&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param, type):</pre></div>
</div>

<li><div class="frame" id="frame-125447954194256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">106</em>,
      in <code class="function">creaPluginPy</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Add required import</pre>
<pre class="line before"><span class="ws">    </span>full_content = f&#34;from core.interfaccia_plugin import Interfaccia_Plugin\n\n{contenuto}&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Use temporary directory for validation</pre>
<pre class="line current"><span class="ws">    </span>with tempfile.TemporaryDirectory() as temp_dir:</pre>
<pre class="line after"><span class="ws">        </span>temp_file = Path(temp_dir) / nome_file</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span># Write to temporary file</pre>
<pre class="line after"><span class="ws">            </span>temp_file.write_text(full_content, encoding=&#34;utf-8&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;tempfile&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 154, in new_plugin
    created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 162, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 106, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name &#39;tempfile&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 154, in new_plugin
    created = creaPlugin(data['name'], data['content'])
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 162, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 106, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name 'tempfile' is not defined


-->

2025-04-14 13:50:04,717 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;tempfile&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "uQdKf2XwR9NFnCKN7ZpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;tempfile&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-125447972391280">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-125447954097856">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-125447954097968">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-125447954098080">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-125447954098192">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-125447954098304">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-125447954098416">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-125447954186640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">154</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Get the JSON data from the request</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>if not data or &#39;name&#39; not in data:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#34;error&#34;: &#34;Invalid record&#34;}), 404</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])</pre>
<pre class="line after"><span class="ws">    </span>if created:</pre>
<pre class="line after"><span class="ws">        </span># Create a new plugin instance</pre>
<pre class="line after"><span class="ws">        </span>new_plugin = PlugTable(</pre>
<pre class="line after"><span class="ws">            </span>name=data[&#39;name&#39;],</pre>
<pre class="line after"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre></div>
</div>

<li><div class="frame" id="frame-125447954191120">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">162</em>,
      in <code class="function">creaPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.sh&#39;):</pre>
<pre class="line before"><span class="ws">        </span>return creaPluginSh(nome_file, contenuto)</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.py&#39;):</pre>
<pre class="line current"><span class="ws">        </span>return creaPluginPy(nome_file, contenuto)</pre>
<pre class="line after"><span class="ws">    </span>print(&#34;Il tipo di file non e&#39; supportato&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param, type):</pre></div>
</div>

<li><div class="frame" id="frame-125447954194256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">106</em>,
      in <code class="function">creaPluginPy</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Add required import</pre>
<pre class="line before"><span class="ws">    </span>full_content = f&#34;from core.interfaccia_plugin import Interfaccia_Plugin\n\n{contenuto}&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Use temporary directory for validation</pre>
<pre class="line current"><span class="ws">    </span>with tempfile.TemporaryDirectory() as temp_dir:</pre>
<pre class="line after"><span class="ws">        </span>temp_file = Path(temp_dir) / nome_file</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span># Write to temporary file</pre>
<pre class="line after"><span class="ws">            </span>temp_file.write_text(full_content, encoding=&#34;utf-8&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;tempfile&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 154, in new_plugin
    created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 162, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 106, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name &#39;tempfile&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 154, in new_plugin
    created = creaPlugin(data['name'], data['content'])
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 162, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 106, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name 'tempfile' is not defined


-->

2025-04-14 13:50:04,727 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:50:04,728 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:04,742 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 13:50:04,742 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 13:50:04,742 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 13:50:04,754 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:50:04,754 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:04,768 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 13:50:04,768 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 13:50:04,768 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 13:50:04,778 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:50:04,778 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:04,792 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 13:50:04,793 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 13:50:04,793 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 13:50:07,711 - DEBUG - Polling for notifications...
2025-04-14 13:50:07,724 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744634977 with data: None
2025-04-14 13:50:07,724 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:07,738 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744634977 HTTP/1.1" 200 20
2025-04-14 13:50:07,739 - DEBUG - Received response: {
  "update": -12
}

2025-04-14 13:50:24,502 - INFO - Application started.
2025-04-14 13:50:24,502 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:50:24,502 - INFO - Attempting to log in user: test
2025-04-14 13:50:24,505 - DEBUG - Loading KWallet
2025-04-14 13:50:24,505 - DEBUG - Loading SecretService
2025-04-14 13:50:24,514 - DEBUG - Loading Windows
2025-04-14 13:50:24,514 - DEBUG - Loading chainer
2025-04-14 13:50:24,514 - DEBUG - Loading libsecret
2025-04-14 13:50:24,514 - DEBUG - Loading macOS
2025-04-14 13:50:24,558 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:50:24,560 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:24,563 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:50:24,573 - DEBUG - Received response
2025-04-14 13:50:24,586 - INFO - User test logged in successfully.
2025-04-14 13:50:24,586 - INFO - Starting polling for notifications.
2025-04-14 13:50:24,586 - DEBUG - Polling for notifications...
2025-04-14 13:50:24,596 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635025 with data: None
2025-04-14 13:50:24,597 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:24,611 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635025 HTTP/1.1" 200 20
2025-04-14 13:50:24,611 - DEBUG - Received response: {
  "update": -60
}

2025-04-14 13:50:24,751 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:50:24,751 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:24,766 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 13:50:24,766 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 13:50:24,766 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 13:50:29,616 - DEBUG - Polling for notifications...
2025-04-14 13:50:29,628 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635025 with data: None
2025-04-14 13:50:29,628 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:29,642 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635025 HTTP/1.1" 200 20
2025-04-14 13:50:29,642 - DEBUG - Received response: {
  "update": -60
}

2025-04-14 13:50:30,429 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file.py'}
2025-04-14 13:50:30,430 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:30,436 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 500 18786
2025-04-14 13:50:30,446 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;tempfile&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "uQdKf2XwR9NFnCKN7ZpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;tempfile&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-125447954196272">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-125447954195824">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-125447954195936">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-125447954195712">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-125447954196832">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-125447954196720">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-125447954195376">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-125447954196048">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">154</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Get the JSON data from the request</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>if not data or &#39;name&#39; not in data:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#34;error&#34;: &#34;Invalid record&#34;}), 404</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])</pre>
<pre class="line after"><span class="ws">    </span>if created:</pre>
<pre class="line after"><span class="ws">        </span># Create a new plugin instance</pre>
<pre class="line after"><span class="ws">        </span>new_plugin = PlugTable(</pre>
<pre class="line after"><span class="ws">            </span>name=data[&#39;name&#39;],</pre>
<pre class="line after"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre></div>
</div>

<li><div class="frame" id="frame-125447954196944">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">162</em>,
      in <code class="function">creaPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.sh&#39;):</pre>
<pre class="line before"><span class="ws">        </span>return creaPluginSh(nome_file, contenuto)</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.py&#39;):</pre>
<pre class="line current"><span class="ws">        </span>return creaPluginPy(nome_file, contenuto)</pre>
<pre class="line after"><span class="ws">    </span>print(&#34;Il tipo di file non e&#39; supportato&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param, type):</pre></div>
</div>

<li><div class="frame" id="frame-125447954196608">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">106</em>,
      in <code class="function">creaPluginPy</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Add required import</pre>
<pre class="line before"><span class="ws">    </span>full_content = f&#34;from core.interfaccia_plugin import Interfaccia_Plugin\n\n{contenuto}&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Use temporary directory for validation</pre>
<pre class="line current"><span class="ws">    </span>with tempfile.TemporaryDirectory() as temp_dir:</pre>
<pre class="line after"><span class="ws">        </span>temp_file = Path(temp_dir) / nome_file</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span># Write to temporary file</pre>
<pre class="line after"><span class="ws">            </span>temp_file.write_text(full_content, encoding=&#34;utf-8&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;tempfile&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 154, in new_plugin
    created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 162, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 106, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name &#39;tempfile&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 154, in new_plugin
    created = creaPlugin(data['name'], data['content'])
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 162, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 106, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name 'tempfile' is not defined


-->

2025-04-14 13:50:30,447 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;tempfile&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "uQdKf2XwR9NFnCKN7ZpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;tempfile&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-125447954196272">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-125447954195824">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-125447954195936">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-125447954195712">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-125447954196832">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-125447954196720">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-125447954195376">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-125447954196048">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">154</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Get the JSON data from the request</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>if not data or &#39;name&#39; not in data:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#34;error&#34;: &#34;Invalid record&#34;}), 404</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])</pre>
<pre class="line after"><span class="ws">    </span>if created:</pre>
<pre class="line after"><span class="ws">        </span># Create a new plugin instance</pre>
<pre class="line after"><span class="ws">        </span>new_plugin = PlugTable(</pre>
<pre class="line after"><span class="ws">            </span>name=data[&#39;name&#39;],</pre>
<pre class="line after"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre></div>
</div>

<li><div class="frame" id="frame-125447954196944">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">162</em>,
      in <code class="function">creaPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.sh&#39;):</pre>
<pre class="line before"><span class="ws">        </span>return creaPluginSh(nome_file, contenuto)</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.py&#39;):</pre>
<pre class="line current"><span class="ws">        </span>return creaPluginPy(nome_file, contenuto)</pre>
<pre class="line after"><span class="ws">    </span>print(&#34;Il tipo di file non e&#39; supportato&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param, type):</pre></div>
</div>

<li><div class="frame" id="frame-125447954196608">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">106</em>,
      in <code class="function">creaPluginPy</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Add required import</pre>
<pre class="line before"><span class="ws">    </span>full_content = f&#34;from core.interfaccia_plugin import Interfaccia_Plugin\n\n{contenuto}&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Use temporary directory for validation</pre>
<pre class="line current"><span class="ws">    </span>with tempfile.TemporaryDirectory() as temp_dir:</pre>
<pre class="line after"><span class="ws">        </span>temp_file = Path(temp_dir) / nome_file</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span># Write to temporary file</pre>
<pre class="line after"><span class="ws">            </span>temp_file.write_text(full_content, encoding=&#34;utf-8&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;tempfile&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 154, in new_plugin
    created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 162, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 106, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name &#39;tempfile&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 154, in new_plugin
    created = creaPlugin(data['name'], data['content'])
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 162, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 106, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name 'tempfile' is not defined


-->

2025-04-14 13:50:30,457 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:50:30,457 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:30,471 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 13:50:30,472 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 13:50:30,472 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 13:50:30,482 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:50:30,483 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:30,497 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 13:50:30,497 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 13:50:30,497 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 13:50:30,507 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:50:30,508 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:30,521 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 13:50:30,522 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 13:50:30,522 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 13:50:34,648 - DEBUG - Polling for notifications...
2025-04-14 13:50:34,661 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635025 with data: None
2025-04-14 13:50:34,662 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:50:34,676 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635025 HTTP/1.1" 200 20
2025-04-14 13:50:34,677 - DEBUG - Received response: {
  "update": -60
}

2025-04-14 13:54:33,588 - INFO - Application started.
2025-04-14 13:54:33,588 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:54:33,588 - INFO - Attempting to log in user: test
2025-04-14 13:54:33,591 - DEBUG - Loading KWallet
2025-04-14 13:54:33,591 - DEBUG - Loading SecretService
2025-04-14 13:54:33,600 - DEBUG - Loading Windows
2025-04-14 13:54:33,601 - DEBUG - Loading chainer
2025-04-14 13:54:33,601 - DEBUG - Loading libsecret
2025-04-14 13:54:33,601 - DEBUG - Loading macOS
2025-04-14 13:54:33,645 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:54:33,646 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:54:33,650 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:54:33,660 - DEBUG - Received response
2025-04-14 13:54:33,674 - INFO - User test logged in successfully.
2025-04-14 13:54:33,674 - INFO - Starting polling for notifications.
2025-04-14 13:54:33,674 - DEBUG - Polling for notifications...
2025-04-14 13:54:33,684 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635274 with data: None
2025-04-14 13:54:33,685 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:54:33,698 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635274 HTTP/1.1" 200 20
2025-04-14 13:54:33,699 - DEBUG - Received response: {
  "update": -12
}

2025-04-14 13:54:33,837 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:54:33,838 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:54:33,854 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 13:54:33,855 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 13:54:33,855 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 13:54:38,704 - DEBUG - Polling for notifications...
2025-04-14 13:54:38,717 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635274 with data: None
2025-04-14 13:54:38,718 - ERROR - Error during request: Could not find a suitable TLS CA certificate bundle, invalid path: ./certificates/server.crt
2025-04-14 13:54:39,681 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file.py'}
2025-04-14 13:54:39,682 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:54:39,690 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-14 13:54:39,700 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 13:54:39,700 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 13:54:39,710 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:54:39,711 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:54:39,725 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 13:54:39,725 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 13:54:39,738 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:54:39,739 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:54:39,753 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 13:54:39,753 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 13:54:39,767 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:54:39,767 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:54:39,781 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 13:54:39,782 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 13:54:40,963 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 13:54:40,963 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:54:40,979 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 13:54:40,979 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:54:42,056 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 13:54:42,057 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:54:42,066 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 109
2025-04-14 13:54:42,107 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 13:54:42 GMT",
  "log": "Io sono stato caricato",
  "status": "finished"
}

2025-04-14 13:56:01,619 - INFO - Application started.
2025-04-14 13:56:01,619 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:56:01,619 - INFO - Attempting to log in user: test
2025-04-14 13:56:01,622 - DEBUG - Loading KWallet
2025-04-14 13:56:01,623 - DEBUG - Loading SecretService
2025-04-14 13:56:01,631 - DEBUG - Loading Windows
2025-04-14 13:56:01,632 - DEBUG - Loading chainer
2025-04-14 13:56:01,632 - DEBUG - Loading libsecret
2025-04-14 13:56:01,632 - DEBUG - Loading macOS
2025-04-14 13:56:01,677 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:56:01,678 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:01,682 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:56:01,692 - DEBUG - Received response
2025-04-14 13:56:01,705 - INFO - User test logged in successfully.
2025-04-14 13:56:01,705 - INFO - Starting polling for notifications.
2025-04-14 13:56:01,705 - DEBUG - Polling for notifications...
2025-04-14 13:56:01,715 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635362 with data: None
2025-04-14 13:56:01,716 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:01,730 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635362 HTTP/1.1" 200 20
2025-04-14 13:56:01,730 - DEBUG - Received response: {
  "update": -44
}

2025-04-14 13:56:01,872 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:56:01,873 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:01,889 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 13:56:01,890 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 13:56:06,734 - DEBUG - Polling for notifications...
2025-04-14 13:56:06,747 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635362 with data: None
2025-04-14 13:56:06,748 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:06,762 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635362 HTTP/1.1" 200 20
2025-04-14 13:56:06,762 - DEBUG - Received response: {
  "update": -44
}

2025-04-14 13:56:07,833 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '', 'name': 'file.py'}
2025-04-14 13:56:07,834 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:07,842 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-14 13:56:07,852 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 13:56:07,853 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 13:56:07,863 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:56:07,864 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:07,878 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 91
2025-04-14 13:56:07,879 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  },
  {
    "id": 2,
    "name": "file.py"
  }
]

2025-04-14 13:56:07,895 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:56:07,896 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:07,910 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 91
2025-04-14 13:56:07,910 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  },
  {
    "id": 2,
    "name": "file.py"
  }
]

2025-04-14 13:56:07,926 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:56:07,926 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:07,941 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 91
2025-04-14 13:56:07,941 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  },
  {
    "id": 2,
    "name": "file.py"
  }
]

2025-04-14 13:56:10,879 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 13:56:10,880 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:10,896 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-14 13:56:10,896 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:56:11,059 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 13:56:11,060 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:11,075 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-14 13:56:11,075 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:56:11,768 - DEBUG - Polling for notifications...
2025-04-14 13:56:11,780 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635368 with data: None
2025-04-14 13:56:11,781 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:11,795 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635368 HTTP/1.1" 200 18
2025-04-14 13:56:11,795 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 13:56:11,828 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 13:56:11,829 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:11,844 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-14 13:56:11,844 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:56:12,462 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 13:56:12,463 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:12,472 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 109
2025-04-14 13:56:12,513 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 13:56:12 GMT",
  "log": "Io sono stato caricato",
  "status": "finished"
}

2025-04-14 13:56:13,838 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 13:56:13,839 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:13,854 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-14 13:56:13,854 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 13:56:14,544 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 13:56:14,545 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:14,552 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 109
2025-04-14 13:56:14,593 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 13:56:14 GMT",
  "log": "Io sono stato caricato",
  "status": "finished"
}

2025-04-14 13:56:16,800 - DEBUG - Polling for notifications...
2025-04-14 13:56:16,812 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635368 with data: None
2025-04-14 13:56:16,813 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:56:16,827 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635368 HTTP/1.1" 200 18
2025-04-14 13:56:16,827 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 13:57:28,964 - INFO - Application started.
2025-04-14 13:57:28,964 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:57:28,965 - INFO - Attempting to log in user: test
2025-04-14 13:57:28,968 - DEBUG - Loading KWallet
2025-04-14 13:57:28,968 - DEBUG - Loading SecretService
2025-04-14 13:57:28,976 - DEBUG - Loading Windows
2025-04-14 13:57:28,976 - DEBUG - Loading chainer
2025-04-14 13:57:28,977 - DEBUG - Loading libsecret
2025-04-14 13:57:28,977 - DEBUG - Loading macOS
2025-04-14 13:57:29,021 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:57:29,022 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:57:29,026 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:57:29,037 - DEBUG - Received response
2025-04-14 13:57:29,050 - INFO - User test logged in successfully.
2025-04-14 13:57:29,050 - INFO - Starting polling for notifications.
2025-04-14 13:57:29,050 - DEBUG - Polling for notifications...
2025-04-14 13:57:29,060 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635449 with data: None
2025-04-14 13:57:29,061 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:57:29,075 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635449 HTTP/1.1" 200 20
2025-04-14 13:57:29,075 - DEBUG - Received response: {
  "update": -11
}

2025-04-14 13:57:29,216 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:57:29,217 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:57:29,230 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 43280
2025-04-14 13:57:29,231 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "A73CcOF4QMn6LpCOTnKt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124859139794512">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859139794624">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-124859160333776">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124859158816672">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124859158816784">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124859158816896">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124859158817008">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124859158817120">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124859158817232">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859158905456">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">108</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per i dettagli del plugin</pre></div>
</div>

<li><div class="frame" id="frame-124859158909936">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2704</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-124859159147488">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2858</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859159147600">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-124859140710224">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-124859140710336">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py"</cite>,
      line <em class="line">306</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-124859140947216">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859141270528">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859139582864">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-124859139582976">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-124859139583088">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859139583200">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-124859139583312">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859139583424">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 108, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2704, in all
    return self._iter().all()  # type: ignore
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py&#34;, line 306, in orm_execute_statement
    result = conn.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 108, in plug_table
    pluginT = PlugTable.query.all()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2704, in all
    return self._iter().all()  # type: ignore
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-04-14 13:57:29,231 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "A73CcOF4QMn6LpCOTnKt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124859139794512">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859139794624">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-124859160333776">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124859158816672">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124859158816784">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124859158816896">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124859158817008">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124859158817120">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124859158817232">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859158905456">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">108</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per i dettagli del plugin</pre></div>
</div>

<li><div class="frame" id="frame-124859158909936">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2704</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-124859159147488">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2858</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859159147600">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-124859140710224">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-124859140710336">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py"</cite>,
      line <em class="line">306</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-124859140947216">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859141270528">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859139582864">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-124859139582976">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-124859139583088">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859139583200">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-124859139583312">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859139583424">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 108, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2704, in all
    return self._iter().all()  # type: ignore
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py&#34;, line 306, in orm_execute_statement
    result = conn.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 108, in plug_table
    pluginT = PlugTable.query.all()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2704, in all
    return self._iter().all()  # type: ignore
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-04-14 13:57:34,080 - DEBUG - Polling for notifications...
2025-04-14 13:57:34,092 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635449 with data: None
2025-04-14 13:57:34,093 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:57:34,106 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635449 HTTP/1.1" 200 20
2025-04-14 13:57:34,107 - DEBUG - Received response: {
  "update": -11
}

2025-04-14 13:57:37,812 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '', 'name': 'file.py'}
2025-04-14 13:57:37,812 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:57:37,827 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 500 57961
2025-04-14 13:57:37,837 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description) VALUES (?, ?, ?)]
[parameters: (&#39;file.py&#39;, &#39;&#39;, &#39;&#39;)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "A73CcOF4QMn6LpCOTnKt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description) VALUES (?, ?, ?)]
[parameters: (&#39;file.py&#39;, &#39;&#39;, &#39;&#39;)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124859138451696">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138451808">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-124859139795632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124859139796976">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124859139795744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124859139796528">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124859139796640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124859139796192">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124859139797088">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859139797424">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">164</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre>
<pre class="line before"><span class="ws">            </span>description=&#39;&#39;  # DEBUG</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span># Add the new plugin to the database</pre>
<pre class="line before"><span class="ws">        </span>db.session.add(new_plugin)</pre>
<pre class="line current"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>last_update = round(time.time())</pre>
<pre class="line after"><span class="ws">        </span>print(&#34;Updated time: &#34;+str(last_update))</pre>
<pre class="line after"><span class="ws">        </span># Return a success response</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Plugin uploaded successfully&#34;}), 201</pre>
<pre class="line after"><span class="ws">    </span>else:</pre></div>
</div>

<li><div class="frame" id="frame-124859139797200">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-124859140110288">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-124859140110400">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-124859140110512">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-124859140180000">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-124859140180112">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-124859140180224">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-124859140180336">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-124859140180448">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-124859140180560">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-124859140180672">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859140273456">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859140273568">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859140404640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859140404752">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py"</cite>,
      line <em class="line">93</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>mapper,</pre>
<pre class="line before"><span class="ws">            </span>table,</pre>
<pre class="line before"><span class="ws">            </span>update,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_insert_statements(</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>insert,</pre></div>
</div>

<li><div class="frame" id="frame-124859138450688">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py"</cite>,
      line <em class="line">1233</em>,
      in <code class="function">_emit_insert_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>statement.values(value_params),</pre>
<pre class="line before"><span class="ws">                            </span>params,</pre>
<pre class="line before"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line before"><span class="ws">                        </span>)</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line current"><span class="ws">                        </span>result = connection.execute(</pre>
<pre class="line after"><span class="ws">                            </span>statement,</pre>
<pre class="line after"><span class="ws">                            </span>params,</pre>
<pre class="line after"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">                        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138450800">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138450912">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138451024">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-124859138451136">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-124859138451248">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138451360">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-124859138451472">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138451584">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description) VALUES (?, ?, ?)]
[parameters: (&#39;file.py&#39;, &#39;&#39;, &#39;&#39;)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 164, in new_plugin
    db.session.commit()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj
    _emit_insert_statements(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1233, in _emit_insert_statements
    result = connection.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description) VALUES (?, ?, ?)]
[parameters: (&#39;file.py&#39;, &#39;&#39;, &#39;&#39;)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 164, in new_plugin
    db.session.commit()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/scoping.py", line 599, in commit
    return self._proxied.commit()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 4353, in flush
    self._flush(objects)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 4488, in _flush
    with util.safe_reraise():
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 4449, in _flush
    flush_context.execute()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py", line 466, in execute
    rec.execute(self)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: INSERT INTO "plugTable" (name, params, description) VALUES (?, ?, ?)]
[parameters: ('file.py', '', '')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-04-14 13:57:37,839 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description) VALUES (?, ?, ?)]
[parameters: (&#39;file.py&#39;, &#39;&#39;, &#39;&#39;)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "A73CcOF4QMn6LpCOTnKt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description) VALUES (?, ?, ?)]
[parameters: (&#39;file.py&#39;, &#39;&#39;, &#39;&#39;)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124859138451696">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138451808">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-124859139795632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124859139796976">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124859139795744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124859139796528">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124859139796640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124859139796192">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124859139797088">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859139797424">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">164</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre>
<pre class="line before"><span class="ws">            </span>description=&#39;&#39;  # DEBUG</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span># Add the new plugin to the database</pre>
<pre class="line before"><span class="ws">        </span>db.session.add(new_plugin)</pre>
<pre class="line current"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>last_update = round(time.time())</pre>
<pre class="line after"><span class="ws">        </span>print(&#34;Updated time: &#34;+str(last_update))</pre>
<pre class="line after"><span class="ws">        </span># Return a success response</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Plugin uploaded successfully&#34;}), 201</pre>
<pre class="line after"><span class="ws">    </span>else:</pre></div>
</div>

<li><div class="frame" id="frame-124859139797200">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-124859140110288">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-124859140110400">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-124859140110512">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-124859140180000">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-124859140180112">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-124859140180224">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-124859140180336">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-124859140180448">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-124859140180560">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-124859140180672">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859140273456">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859140273568">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859140404640">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859140404752">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py"</cite>,
      line <em class="line">93</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>mapper,</pre>
<pre class="line before"><span class="ws">            </span>table,</pre>
<pre class="line before"><span class="ws">            </span>update,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_insert_statements(</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>insert,</pre></div>
</div>

<li><div class="frame" id="frame-124859138450688">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py"</cite>,
      line <em class="line">1233</em>,
      in <code class="function">_emit_insert_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>statement.values(value_params),</pre>
<pre class="line before"><span class="ws">                            </span>params,</pre>
<pre class="line before"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line before"><span class="ws">                        </span>)</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line current"><span class="ws">                        </span>result = connection.execute(</pre>
<pre class="line after"><span class="ws">                            </span>statement,</pre>
<pre class="line after"><span class="ws">                            </span>params,</pre>
<pre class="line after"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">                        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138450800">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138450912">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138451024">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-124859138451136">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-124859138451248">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138451360">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-124859138451472">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138451584">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description) VALUES (?, ?, ?)]
[parameters: (&#39;file.py&#39;, &#39;&#39;, &#39;&#39;)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 164, in new_plugin
    db.session.commit()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj
    _emit_insert_statements(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1233, in _emit_insert_statements
    result = connection.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description) VALUES (?, ?, ?)]
[parameters: (&#39;file.py&#39;, &#39;&#39;, &#39;&#39;)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 164, in new_plugin
    db.session.commit()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/scoping.py", line 599, in commit
    return self._proxied.commit()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 4353, in flush
    self._flush(objects)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 4488, in _flush
    with util.safe_reraise():
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 4449, in _flush
    flush_context.execute()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py", line 466, in execute
    rec.execute(self)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: INSERT INTO "plugTable" (name, params, description) VALUES (?, ?, ?)]
[parameters: ('file.py', '', '')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-04-14 13:57:37,852 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:57:37,853 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:57:37,860 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 43280
2025-04-14 13:57:37,860 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "A73CcOF4QMn6LpCOTnKt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124859138454384">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138454496">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-124859138452144">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124859138452368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124859138452256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124859138451920">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124859138452480">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124859138452592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124859138452704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138452816">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">108</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per i dettagli del plugin</pre></div>
</div>

<li><div class="frame" id="frame-124859138452928">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2704</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-124859138453040">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2858</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138453152">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-124859138453264">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-124859138453376">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py"</cite>,
      line <em class="line">306</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-124859138453488">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138453600">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138453712">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-124859138453824">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-124859138453936">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138454048">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-124859138454160">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138454272">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 108, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2704, in all
    return self._iter().all()  # type: ignore
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py&#34;, line 306, in orm_execute_statement
    result = conn.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 108, in plug_table
    pluginT = PlugTable.query.all()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2704, in all
    return self._iter().all()  # type: ignore
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-04-14 13:57:37,861 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "A73CcOF4QMn6LpCOTnKt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124859138454384">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138454496">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-124859138452144">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124859138452368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124859138452256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124859138451920">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124859138452480">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124859138452592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124859138452704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138452816">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">108</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per i dettagli del plugin</pre></div>
</div>

<li><div class="frame" id="frame-124859138452928">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2704</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-124859138453040">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2858</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138453152">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-124859138453264">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-124859138453376">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py"</cite>,
      line <em class="line">306</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-124859138453488">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138453600">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138453712">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-124859138453824">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-124859138453936">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138454048">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-124859138454160">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138454272">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 108, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2704, in all
    return self._iter().all()  # type: ignore
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py&#34;, line 306, in orm_execute_statement
    result = conn.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 108, in plug_table
    pluginT = PlugTable.query.all()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2704, in all
    return self._iter().all()  # type: ignore
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-04-14 13:57:37,871 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:57:37,871 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:57:37,878 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 43280
2025-04-14 13:57:37,879 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "A73CcOF4QMn6LpCOTnKt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124859138457072">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138457184">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-124859138455056">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124859138452032">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124859138454608">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124859138454944">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124859138455168">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124859138455280">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124859138455392">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138455504">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">108</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per i dettagli del plugin</pre></div>
</div>

<li><div class="frame" id="frame-124859138455616">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2704</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-124859138455728">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2858</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138455840">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-124859138455952">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-124859138456064">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py"</cite>,
      line <em class="line">306</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-124859138456176">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138456288">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138456400">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-124859138456512">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-124859138456624">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138456736">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-124859138456848">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138456960">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 108, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2704, in all
    return self._iter().all()  # type: ignore
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py&#34;, line 306, in orm_execute_statement
    result = conn.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 108, in plug_table
    pluginT = PlugTable.query.all()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2704, in all
    return self._iter().all()  # type: ignore
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-04-14 13:57:37,879 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "A73CcOF4QMn6LpCOTnKt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124859138457072">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138457184">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-124859138455056">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124859138452032">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124859138454608">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124859138454944">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124859138455168">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124859138455280">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124859138455392">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138455504">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">108</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per i dettagli del plugin</pre></div>
</div>

<li><div class="frame" id="frame-124859138455616">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2704</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-124859138455728">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2858</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138455840">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-124859138455952">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-124859138456064">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py"</cite>,
      line <em class="line">306</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-124859138456176">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138456288">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138456400">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-124859138456512">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-124859138456624">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138456736">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-124859138456848">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138456960">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 108, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2704, in all
    return self._iter().all()  # type: ignore
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py&#34;, line 306, in orm_execute_statement
    result = conn.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 108, in plug_table
    pluginT = PlugTable.query.all()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2704, in all
    return self._iter().all()  # type: ignore
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-04-14 13:57:37,889 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:57:37,890 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:57:37,897 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 43280
2025-04-14 13:57:37,897 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "A73CcOF4QMn6LpCOTnKt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124859138574592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138574704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-124859138454720">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124859138572352">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124859138572464">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124859138572576">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124859138572688">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124859138572800">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124859138572912">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138573024">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">108</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per i dettagli del plugin</pre></div>
</div>

<li><div class="frame" id="frame-124859138573136">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2704</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-124859138573248">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2858</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138573360">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-124859138573472">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-124859138573584">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py"</cite>,
      line <em class="line">306</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-124859138573696">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138573808">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138573920">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-124859138574032">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-124859138574144">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138574256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-124859138574368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138574480">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 108, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2704, in all
    return self._iter().all()  # type: ignore
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py&#34;, line 306, in orm_execute_statement
    result = conn.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 108, in plug_table
    pluginT = PlugTable.query.all()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2704, in all
    return self._iter().all()  # type: ignore
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-04-14 13:57:37,898 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "A73CcOF4QMn6LpCOTnKt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124859138574592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138574704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-124859138454720">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124859138572352">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124859138572464">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124859138572576">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124859138572688">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124859138572800">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124859138572912">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138573024">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">108</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per i dettagli del plugin</pre></div>
</div>

<li><div class="frame" id="frame-124859138573136">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2704</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-124859138573248">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2858</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138573360">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-124859138573472">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-124859138573584">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py"</cite>,
      line <em class="line">306</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-124859138573696">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138573808">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py"</cite>,
      line <em class="line">523</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138573920">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-124859138574032">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-124859138574144">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124859138574256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-124859138574368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-124859138574480">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 108, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2704, in all
    return self._iter().all()  # type: ignore
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py&#34;, line 306, in orm_execute_statement
    result = conn.execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1416, in execute
    return meth(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such table: plugTable

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 108, in plug_table
    pluginT = PlugTable.query.all()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2704, in all
    return self._iter().all()  # type: ignore
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: plugTable
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-04-14 13:57:39,112 - DEBUG - Polling for notifications...
2025-04-14 13:57:39,124 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635449 with data: None
2025-04-14 13:57:39,125 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:57:39,139 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635449 HTTP/1.1" 200 20
2025-04-14 13:57:39,139 - DEBUG - Received response: {
  "update": -11
}

2025-04-14 13:57:44,145 - DEBUG - Polling for notifications...
2025-04-14 13:57:44,157 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635449 with data: None
2025-04-14 13:57:44,158 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:57:44,172 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635449 HTTP/1.1" 200 20
2025-04-14 13:57:44,173 - DEBUG - Received response: {
  "update": -11
}

2025-04-14 13:57:49,177 - DEBUG - Polling for notifications...
2025-04-14 13:57:49,190 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635449 with data: None
2025-04-14 13:57:49,190 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:57:49,204 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635449 HTTP/1.1" 200 20
2025-04-14 13:57:49,204 - DEBUG - Received response: {
  "update": -11
}

2025-04-14 13:57:54,209 - DEBUG - Polling for notifications...
2025-04-14 13:57:54,220 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635449 with data: None
2025-04-14 13:57:54,221 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:57:54,221 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /notification/1744635449 (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x74f7de30ead0>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-04-14 13:58:13,344 - INFO - Application started.
2025-04-14 13:58:13,344 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:58:13,344 - INFO - Attempting to log in user: test
2025-04-14 13:58:13,347 - DEBUG - Loading KWallet
2025-04-14 13:58:13,348 - DEBUG - Loading SecretService
2025-04-14 13:58:13,357 - DEBUG - Loading Windows
2025-04-14 13:58:13,357 - DEBUG - Loading chainer
2025-04-14 13:58:13,357 - DEBUG - Loading libsecret
2025-04-14 13:58:13,357 - DEBUG - Loading macOS
2025-04-14 13:58:13,402 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:58:13,403 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:13,407 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:58:13,417 - DEBUG - Received response
2025-04-14 13:58:13,431 - INFO - User test logged in successfully.
2025-04-14 13:58:13,431 - INFO - Starting polling for notifications.
2025-04-14 13:58:13,431 - DEBUG - Polling for notifications...
2025-04-14 13:58:13,441 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635493 with data: None
2025-04-14 13:58:13,442 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:13,455 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635493 HTTP/1.1" 200 20
2025-04-14 13:58:13,456 - DEBUG - Received response: {
  "update": -11
}

2025-04-14 13:58:13,586 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:58:13,587 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:13,603 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 13:58:13,603 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 13:58:13,604 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 13:58:18,461 - DEBUG - Polling for notifications...
2025-04-14 13:58:18,474 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635493 with data: None
2025-04-14 13:58:18,475 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:18,489 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635493 HTTP/1.1" 200 20
2025-04-14 13:58:18,489 - DEBUG - Received response: {
  "update": -11
}

2025-04-14 13:58:18,830 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '', 'name': 'file.py'}
2025-04-14 13:58:18,831 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:18,838 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-14 13:58:18,848 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 13:58:18,848 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 13:58:18,859 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:58:18,859 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:18,873 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 13:58:18,874 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 13:58:18,889 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:58:18,890 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:18,904 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 13:58:18,904 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 13:58:18,918 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:58:18,918 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:18,933 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 13:58:18,933 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 13:58:22,248 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '', 'name': 'file.py'}
2025-04-14 13:58:22,249 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:22,256 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-14 13:58:22,266 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 13:58:22,266 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 13:58:22,276 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:58:22,277 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:22,291 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 91
2025-04-14 13:58:22,291 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  },
  {
    "id": 2,
    "name": "file.py"
  }
]

2025-04-14 13:58:22,308 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:58:22,309 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:22,323 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 91
2025-04-14 13:58:22,323 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  },
  {
    "id": 2,
    "name": "file.py"
  }
]

2025-04-14 13:58:22,339 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:58:22,340 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:22,354 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 91
2025-04-14 13:58:22,354 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  },
  {
    "id": 2,
    "name": "file.py"
  }
]

2025-04-14 13:58:23,494 - DEBUG - Polling for notifications...
2025-04-14 13:58:23,507 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635502 with data: None
2025-04-14 13:58:23,507 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:23,521 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635502 HTTP/1.1" 200 18
2025-04-14 13:58:23,522 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 13:58:45,684 - INFO - Application started.
2025-04-14 13:58:45,684 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 13:58:45,685 - INFO - Attempting to log in user: test
2025-04-14 13:58:45,688 - DEBUG - Loading KWallet
2025-04-14 13:58:45,688 - DEBUG - Loading SecretService
2025-04-14 13:58:45,697 - DEBUG - Loading Windows
2025-04-14 13:58:45,697 - DEBUG - Loading chainer
2025-04-14 13:58:45,697 - DEBUG - Loading libsecret
2025-04-14 13:58:45,698 - DEBUG - Loading macOS
2025-04-14 13:58:45,743 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 13:58:45,744 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:45,758 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 13:58:45,759 - DEBUG - Received response
2025-04-14 13:58:45,772 - INFO - User test logged in successfully.
2025-04-14 13:58:45,772 - INFO - Starting polling for notifications.
2025-04-14 13:58:45,772 - DEBUG - Polling for notifications...
2025-04-14 13:58:45,782 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744635526 with data: None
2025-04-14 13:58:45,783 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:45,797 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744635526 HTTP/1.1" 200 19
2025-04-14 13:58:45,798 - DEBUG - Received response: {
  "update": -7
}

2025-04-14 13:58:45,933 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 13:58:45,934 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 13:58:45,950 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 13:58:45,951 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 13:58:45,951 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 14:19:58,296 - INFO - Application started.
2025-04-14 14:19:58,296 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:19:58,296 - INFO - Attempting to log in user: test
2025-04-14 14:19:58,299 - DEBUG - Loading KWallet
2025-04-14 14:19:58,299 - DEBUG - Loading SecretService
2025-04-14 14:19:58,307 - DEBUG - Loading Windows
2025-04-14 14:19:58,308 - DEBUG - Loading chainer
2025-04-14 14:19:58,308 - DEBUG - Loading libsecret
2025-04-14 14:19:58,308 - DEBUG - Loading macOS
2025-04-14 14:19:58,352 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:19:58,353 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:19:58,357 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 14:19:58,368 - DEBUG - Received response
2025-04-14 14:19:58,385 - INFO - User test logged in successfully.
2025-04-14 14:19:58,385 - INFO - Starting polling for notifications.
2025-04-14 14:19:58,385 - DEBUG - Polling for notifications...
2025-04-14 14:19:58,395 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744636798 with data: None
2025-04-14 14:19:58,396 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:19:58,410 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744636798 HTTP/1.1" 200 19
2025-04-14 14:19:58,410 - DEBUG - Received response: {
  "update": -7
}

2025-04-14 14:19:58,546 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:19:58,546 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:19:58,563 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 14:19:58,563 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 14:19:58,563 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 14:20:03,416 - DEBUG - Polling for notifications...
2025-04-14 14:20:03,428 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744636798 with data: None
2025-04-14 14:20:03,429 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:03,443 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744636798 HTTP/1.1" 200 19
2025-04-14 14:20:03,444 - DEBUG - Received response: {
  "update": -7
}

2025-04-14 14:20:04,666 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '', 'name': 'file.py'}
2025-04-14 14:20:04,667 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:04,674 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-14 14:20:04,684 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:20:04,684 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:20:04,694 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:20:04,695 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:04,709 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 14:20:04,710 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 14:20:04,723 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:20:04,723 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:04,737 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 14:20:04,738 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 14:20:04,751 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:20:04,752 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:04,766 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 14:20:04,766 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 14:20:05,767 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:20:05,767 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:05,783 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:20:05,783 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:20:06,461 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:20:06,462 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:06,473 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 109
2025-04-14 14:20:06,514 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 14:20:06 GMT",
  "log": "Io sono stato caricato",
  "status": "finished"
}

2025-04-14 14:20:08,449 - DEBUG - Polling for notifications...
2025-04-14 14:20:08,461 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744636805 with data: None
2025-04-14 14:20:08,462 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:08,476 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744636805 HTTP/1.1" 200 18
2025-04-14 14:20:08,476 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 14:20:11,337 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'ciao.py', 'description': ''}
2025-04-14 14:20:11,338 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:11,348 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 12480
2025-04-14 14:20:11,359 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Czww5b3kilzSRWxHfBsd";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-133393066348544">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-133393065127248">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-133393065127360">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-133393065127472">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-133393065127584">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-133393065127696">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 14:20:11,359 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Czww5b3kilzSRWxHfBsd";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-133393066348544">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-133393065127248">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-133393065127360">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-133393065127472">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-133393065127584">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-133393065127696">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 14:20:11,375 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:20:11,376 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:11,390 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 14:20:11,390 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "ciao.py"
  }
]

2025-04-14 14:20:12,770 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:20:12,770 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:12,785 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:20:12,785 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:20:13,481 - DEBUG - Polling for notifications...
2025-04-14 14:20:13,493 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744636811 with data: None
2025-04-14 14:20:13,494 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:13,508 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744636811 HTTP/1.1" 200 19
2025-04-14 14:20:13,509 - DEBUG - Received response: {
  "update": -6
}

2025-04-14 14:20:14,392 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:20:14,393 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:14,401 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 109
2025-04-14 14:20:14,441 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 14:20:14 GMT",
  "log": "Io sono stato caricato",
  "status": "finished"
}

2025-04-14 14:20:15,929 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/1 with data: None
2025-04-14 14:20:15,930 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:15,946 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/1 HTTP/1.1" 200 3
2025-04-14 14:20:15,946 - DEBUG - Received response: 200
2025-04-14 14:20:18,513 - DEBUG - Polling for notifications...
2025-04-14 14:20:18,526 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744636811 with data: None
2025-04-14 14:20:18,527 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:18,541 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744636811 HTTP/1.1" 200 19
2025-04-14 14:20:18,541 - DEBUG - Received response: {
  "update": -6
}

2025-04-14 14:20:23,545 - DEBUG - Polling for notifications...
2025-04-14 14:20:23,558 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744636811 with data: None
2025-04-14 14:20:23,558 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:23,572 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744636811 HTTP/1.1" 200 19
2025-04-14 14:20:23,573 - DEBUG - Received response: {
  "update": -6
}

2025-04-14 14:20:28,577 - DEBUG - Polling for notifications...
2025-04-14 14:20:28,589 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744636811 with data: None
2025-04-14 14:20:28,590 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:28,604 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744636811 HTTP/1.1" 200 19
2025-04-14 14:20:28,604 - DEBUG - Received response: {
  "update": -6
}

2025-04-14 14:20:29,570 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'a.py', 'description': ''}
2025-04-14 14:20:29,570 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:29,576 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 12480
2025-04-14 14:20:29,587 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Czww5b3kilzSRWxHfBsd";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-133393065129824">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-133393065129264">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-133393065130048">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-133393065129600">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-133393065129712">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-133393065128816">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 14:20:29,587 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Czww5b3kilzSRWxHfBsd";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-133393065129824">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-133393065129264">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-133393065130048">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-133393065129600">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-133393065129712">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-133393065128816">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 14:20:29,601 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:20:29,602 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:29,616 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 14:20:29,616 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "ciao.py"
  }
]

2025-04-14 14:20:31,652 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:20:31,653 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:31,667 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:20:31,668 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:20:33,610 - DEBUG - Polling for notifications...
2025-04-14 14:20:33,622 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744636830 with data: None
2025-04-14 14:20:33,622 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:33,636 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744636830 HTTP/1.1" 200 20
2025-04-14 14:20:33,637 - DEBUG - Received response: {
  "update": -25
}

2025-04-14 14:20:35,299 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:20:35,300 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:35,314 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:20:35,315 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:20:35,748 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:20:35,749 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:35,764 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:20:35,764 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:20:35,910 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:20:35,911 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:35,926 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:20:35,926 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:20:36,747 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/1 with data: None
2025-04-14 14:20:36,748 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:20:36,762 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/1 HTTP/1.1" 200 3
2025-04-14 14:20:36,763 - DEBUG - Received response: 500
2025-04-14 14:23:20,780 - INFO - Application started.
2025-04-14 14:23:20,780 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:23:20,780 - INFO - Attempting to log in user: test
2025-04-14 14:23:20,783 - DEBUG - Loading KWallet
2025-04-14 14:23:20,783 - DEBUG - Loading SecretService
2025-04-14 14:23:20,792 - DEBUG - Loading Windows
2025-04-14 14:23:20,792 - DEBUG - Loading chainer
2025-04-14 14:23:20,793 - DEBUG - Loading libsecret
2025-04-14 14:23:20,793 - DEBUG - Loading macOS
2025-04-14 14:23:20,838 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:23:20,839 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:20,843 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 14:23:20,853 - DEBUG - Received response
2025-04-14 14:23:20,867 - INFO - User test logged in successfully.
2025-04-14 14:23:20,867 - INFO - Starting polling for notifications.
2025-04-14 14:23:20,867 - DEBUG - Polling for notifications...
2025-04-14 14:23:20,877 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637001 with data: None
2025-04-14 14:23:20,877 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:20,891 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637001 HTTP/1.1" 200 20
2025-04-14 14:23:20,892 - DEBUG - Received response: {
  "update": -10
}

2025-04-14 14:23:21,031 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:23:21,032 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:21,048 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 14:23:21,048 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 14:23:21,048 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 14:23:25,897 - DEBUG - Polling for notifications...
2025-04-14 14:23:25,909 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637001 with data: None
2025-04-14 14:23:25,910 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:25,924 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637001 HTTP/1.1" 200 20
2025-04-14 14:23:25,924 - DEBUG - Received response: {
  "update": -10
}

2025-04-14 14:23:28,230 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '', 'name': 'file.py'}
2025-04-14 14:23:28,231 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:28,239 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-14 14:23:28,249 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:23:28,249 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:23:28,259 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:23:28,260 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:28,274 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 14:23:28,274 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 14:23:28,288 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:23:28,289 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:28,303 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 14:23:28,303 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 14:23:28,316 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:23:28,317 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:28,331 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 47
2025-04-14 14:23:28,332 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file.py"
  }
]

2025-04-14 14:23:29,091 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:23:29,091 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:29,107 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:23:29,107 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:23:29,261 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:23:29,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:29,276 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:23:29,277 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:23:29,880 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:23:29,881 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:29,891 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 198
2025-04-14 14:23:29,932 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 14:23:29 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python file.py: module 'plugins.file' has no attribute 'Plugin'",
  "status": "failed"
}

2025-04-14 14:23:30,930 - DEBUG - Polling for notifications...
2025-04-14 14:23:30,942 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637008 with data: None
2025-04-14 14:23:30,943 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:30,957 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637008 HTTP/1.1" 200 18
2025-04-14 14:23:30,957 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 14:23:34,598 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:23:34,599 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:34,614 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:23:34,614 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:23:35,425 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:23:35,426 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:35,433 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 198
2025-04-14 14:23:35,474 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 14:23:35 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python file.py: module 'plugins.file' has no attribute 'Plugin'",
  "status": "failed"
}

2025-04-14 14:23:35,963 - DEBUG - Polling for notifications...
2025-04-14 14:23:35,976 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637008 with data: None
2025-04-14 14:23:35,977 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:35,991 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637008 HTTP/1.1" 200 18
2025-04-14 14:23:35,991 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 14:23:36,657 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/1 with data: None
2025-04-14 14:23:36,657 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:36,675 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/1 HTTP/1.1" 500 14047
2025-04-14 14:23:36,675 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: type object &#39;PlugTable&#39; has no attribute &#39;delete&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "KPCz7Lzppqtgt2xaSyWe";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: type object &#39;PlugTable&#39; has no attribute &#39;delete&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-134812943122944">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-134812941855520">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-134812941855632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-134812941855744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-134812941855856">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-134812941855968">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-134812941856080">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">207</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>#Eliminare dal sistema un plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/remove_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;remove_plugin&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>if plugin and elimina_plugin(plugin.name):</pre>
<pre class="line current"><span class="ws">        </span>PlugTable.delete().where(PlugTable.c.id == id)</pre>
<pre class="line after"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>return &#34;200&#34;</pre>
<pre class="line after"><span class="ws">    </span>return &#34;500&#34;</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>AttributeError: type object &#39;PlugTable&#39; has no attribute &#39;delete&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 207, in modifyPlugin
    PlugTable.delete().where(PlugTable.c.id == id)
AttributeError: type object &#39;PlugTable&#39; has no attribute &#39;delete&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 207, in modifyPlugin
    PlugTable.delete().where(PlugTable.c.id == id)
AttributeError: type object 'PlugTable' has no attribute 'delete'


-->

2025-04-14 14:23:36,676 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: type object &#39;PlugTable&#39; has no attribute &#39;delete&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "KPCz7Lzppqtgt2xaSyWe";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: type object &#39;PlugTable&#39; has no attribute &#39;delete&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-134812943122944">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-134812941855520">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-134812941855632">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-134812941855744">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-134812941855856">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-134812941855968">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-134812941856080">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">207</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>#Eliminare dal sistema un plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/remove_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;remove_plugin&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>if plugin and elimina_plugin(plugin.name):</pre>
<pre class="line current"><span class="ws">        </span>PlugTable.delete().where(PlugTable.c.id == id)</pre>
<pre class="line after"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>return &#34;200&#34;</pre>
<pre class="line after"><span class="ws">    </span>return &#34;500&#34;</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>AttributeError: type object &#39;PlugTable&#39; has no attribute &#39;delete&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 207, in modifyPlugin
    PlugTable.delete().where(PlugTable.c.id == id)
AttributeError: type object &#39;PlugTable&#39; has no attribute &#39;delete&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 207, in modifyPlugin
    PlugTable.delete().where(PlugTable.c.id == id)
AttributeError: type object 'PlugTable' has no attribute 'delete'


-->

2025-04-14 14:23:39,001 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:23:39,002 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:39,017 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:23:39,017 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:23:40,025 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/1 with data: None
2025-04-14 14:23:40,025 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:40,040 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/1 HTTP/1.1" 200 3
2025-04-14 14:23:40,040 - DEBUG - Received response: 500
2025-04-14 14:23:40,996 - DEBUG - Polling for notifications...
2025-04-14 14:23:41,009 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637008 with data: None
2025-04-14 14:23:41,009 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:23:41,024 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637008 HTTP/1.1" 200 18
2025-04-14 14:23:41,024 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 14:24:42,926 - INFO - Application started.
2025-04-14 14:24:42,927 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:24:42,927 - INFO - Attempting to log in user: test
2025-04-14 14:24:42,930 - DEBUG - Loading KWallet
2025-04-14 14:24:42,930 - DEBUG - Loading SecretService
2025-04-14 14:24:42,939 - DEBUG - Loading Windows
2025-04-14 14:24:42,939 - DEBUG - Loading chainer
2025-04-14 14:24:42,939 - DEBUG - Loading libsecret
2025-04-14 14:24:42,939 - DEBUG - Loading macOS
2025-04-14 14:24:42,983 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:24:42,984 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:42,988 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 14:24:42,999 - DEBUG - Received response
2025-04-14 14:24:43,012 - INFO - User test logged in successfully.
2025-04-14 14:24:43,012 - INFO - Starting polling for notifications.
2025-04-14 14:24:43,012 - DEBUG - Polling for notifications...
2025-04-14 14:24:43,022 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637083 with data: None
2025-04-14 14:24:43,022 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:43,037 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637083 HTTP/1.1" 200 19
2025-04-14 14:24:43,037 - DEBUG - Received response: {
  "update": -8
}

2025-04-14 14:24:43,180 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:24:43,180 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:43,197 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 14:24:43,197 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 14:24:43,197 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 14:24:48,043 - DEBUG - Polling for notifications...
2025-04-14 14:24:48,055 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637083 with data: None
2025-04-14 14:24:48,056 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:48,070 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637083 HTTP/1.1" 200 19
2025-04-14 14:24:48,070 - DEBUG - Received response: {
  "update": -8
}

2025-04-14 14:24:48,432 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file1.py'}
2025-04-14 14:24:48,433 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:48,481 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-14 14:24:48,491 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:24:48,491 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:24:48,502 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:24:48,503 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:48,517 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:24:48,518 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file1.py"
  }
]

2025-04-14 14:24:48,532 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:24:48,532 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:48,546 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:24:48,547 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file1.py"
  }
]

2025-04-14 14:24:48,560 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:24:48,561 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:48,575 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:24:48,575 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "file1.py"
  }
]

2025-04-14 14:24:50,820 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:24:50,821 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:50,837 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:24:50,837 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:24:51,434 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:24:51,435 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:51,444 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 109
2025-04-14 14:24:51,485 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 14:24:51 GMT",
  "log": "Io sono stato caricato",
  "status": "finished"
}

2025-04-14 14:24:52,723 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/1 with data: None
2025-04-14 14:24:52,724 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:52,743 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/1 HTTP/1.1" 200 3
2025-04-14 14:24:52,743 - DEBUG - Received response: 200
2025-04-14 14:24:53,076 - DEBUG - Polling for notifications...
2025-04-14 14:24:53,088 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637089 with data: None
2025-04-14 14:24:53,088 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:53,102 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637089 HTTP/1.1" 200 19
2025-04-14 14:24:53,103 - DEBUG - Received response: {
  "update": -1
}

2025-04-14 14:24:57,329 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/1 with data: None
2025-04-14 14:24:57,330 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:57,345 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/1 HTTP/1.1" 200 3
2025-04-14 14:24:57,345 - DEBUG - Received response: 500
2025-04-14 14:24:58,108 - DEBUG - Polling for notifications...
2025-04-14 14:24:58,120 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637089 with data: None
2025-04-14 14:24:58,121 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:58,135 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637089 HTTP/1.1" 200 19
2025-04-14 14:24:58,136 - DEBUG - Received response: {
  "update": -1
}

2025-04-14 14:24:59,453 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': '', 'description': ''}
2025-04-14 14:24:59,454 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:59,461 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 12480
2025-04-14 14:24:59,471 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "fwoTozuLLbpoOzNnp6zp";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-131216439644384">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-131216438438800">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-131216438438912">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-131216438439024">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-131216438439136">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-131216438439248">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 14:24:59,471 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "fwoTozuLLbpoOzNnp6zp";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-131216439644384">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-131216438438800">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-131216438438912">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-131216438439024">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">920</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line current"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre>
<pre class="line after"><span class="ws">        </span>from_error_handler: bool = False,</pre></div>
</div>

<li><div class="frame" id="frame-131216438439136">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">939</em>,
      in <code class="function">finalize_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>with the `from_error_handler` flag.  If enabled, failures in</pre>
<pre class="line before"><span class="ws">        </span>response processing will be logged and otherwise ignored.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:internal:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>response = self.make_response(rv)</pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span>response = self.process_response(response)</pre>
<pre class="line after"><span class="ws">            </span>request_finished.send(</pre>
<pre class="line after"><span class="ws">                </span>self, _async_wrapper=self.ensure_sync, response=response</pre>
<pre class="line after"><span class="ws">            </span>)</pre></div>
</div>

<li><div class="frame" id="frame-131216438439248">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1212</em>,
      in <code class="function">make_response</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#34; (body, status), or (body, headers).&#34;</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># the body must not be None</pre>
<pre class="line before"><span class="ws">        </span>if rv is None:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(</pre>
<pre class="line after"><span class="ws">                </span>f&#34;The view function for {request.endpoint!r} did not&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; return a valid response. The function either returned&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#34; None or ended without a return statement.&#34;</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 939, in finalize_request
    response = self.make_response(rv)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1212, in make_response
    raise TypeError(
TypeError: The view function for &#39;edit_plugin&#39; did not return a valid response. The function either returned None or ended without a return statement.
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 920, in full_dispatch_request
    return self.finalize_request(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 939, in finalize_request
    response = self.make_response(rv)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1212, in make_response
    raise TypeError(
TypeError: The view function for 'edit_plugin' did not return a valid response. The function either returned None or ended without a return statement.


-->

2025-04-14 14:24:59,484 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:24:59,485 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:24:59,499 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 14:24:59,500 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 14:24:59,500 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 14:25:03,141 - DEBUG - Polling for notifications...
2025-04-14 14:25:03,154 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637089 with data: None
2025-04-14 14:25:03,154 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:03,168 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637089 HTTP/1.1" 200 19
2025-04-14 14:25:03,169 - DEBUG - Received response: {
  "update": -1
}

2025-04-14 14:25:04,650 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    local msg=$(get_param)\n    echo "Hello, World! $msg"\n}\n\n', 'name': 'hello.sh'}
2025-04-14 14:25:04,651 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:04,658 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-14 14:25:04,668 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:25:04,668 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:25:04,678 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:25:04,678 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:04,692 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:25:04,693 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  }
]

2025-04-14 14:25:04,705 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:25:04,706 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:04,720 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:25:04,721 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  }
]

2025-04-14 14:25:04,733 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:25:04,734 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:04,748 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:25:04,748 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  }
]

2025-04-14 14:25:05,782 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:25:05,783 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:05,797 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:25:05,797 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:25:06,653 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/1 with data: None
2025-04-14 14:25:06,654 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:06,672 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/1 HTTP/1.1" 200 3
2025-04-14 14:25:06,673 - DEBUG - Received response: 200
2025-04-14 14:25:08,174 - DEBUG - Polling for notifications...
2025-04-14 14:25:08,187 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637105 with data: None
2025-04-14 14:25:08,187 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:08,201 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637105 HTTP/1.1" 200 18
2025-04-14 14:25:08,202 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 14:25:26,863 - INFO - Application started.
2025-04-14 14:25:26,863 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:25:26,863 - INFO - Attempting to log in user: test
2025-04-14 14:25:26,866 - DEBUG - Loading KWallet
2025-04-14 14:25:26,866 - DEBUG - Loading SecretService
2025-04-14 14:25:26,875 - DEBUG - Loading Windows
2025-04-14 14:25:26,875 - DEBUG - Loading chainer
2025-04-14 14:25:26,875 - DEBUG - Loading libsecret
2025-04-14 14:25:26,876 - DEBUG - Loading macOS
2025-04-14 14:25:26,920 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:25:26,921 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:26,925 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 14:25:26,935 - DEBUG - Received response
2025-04-14 14:25:26,949 - INFO - User test logged in successfully.
2025-04-14 14:25:26,949 - INFO - Starting polling for notifications.
2025-04-14 14:25:26,949 - DEBUG - Polling for notifications...
2025-04-14 14:25:26,958 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637127 with data: None
2025-04-14 14:25:26,959 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:26,974 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637127 HTTP/1.1" 200 19
2025-04-14 14:25:26,974 - DEBUG - Received response: {
  "update": -8
}

2025-04-14 14:25:27,100 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:25:27,101 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:27,117 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 40
2025-04-14 14:25:27,117 - DEBUG - Received response: error 404, no such plugin has been found
2025-04-14 14:25:27,118 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-14 14:25:31,978 - DEBUG - Polling for notifications...
2025-04-14 14:25:31,991 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637127 with data: None
2025-04-14 14:25:31,991 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:32,005 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637127 HTTP/1.1" 200 19
2025-04-14 14:25:32,006 - DEBUG - Received response: {
  "update": -8
}

2025-04-14 14:25:33,274 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    local msg=$(get_param)\n    echo "Hello, World! $msg"\n}\n\n', 'name': 'hello.sh'}
2025-04-14 14:25:33,275 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:33,283 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-14 14:25:33,293 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:25:33,293 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:25:33,303 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:25:33,304 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:33,317 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:25:33,318 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  }
]

2025-04-14 14:25:33,331 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:25:33,332 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:33,346 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:25:33,347 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  }
]

2025-04-14 14:25:33,360 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:25:33,360 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:33,374 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:25:33,374 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  }
]

2025-04-14 14:25:34,075 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:25:34,076 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:34,092 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:25:34,093 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:25:34,815 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:25:34,815 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:34,827 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 87
2025-04-14 14:25:34,868 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 14:25:34 GMT",
  "log": "",
  "status": "finished"
}

2025-04-14 14:25:37,011 - DEBUG - Polling for notifications...
2025-04-14 14:25:37,023 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637133 with data: None
2025-04-14 14:25:37,023 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:37,038 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637133 HTTP/1.1" 200 18
2025-04-14 14:25:37,038 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 14:25:39,558 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:25:39,559 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:39,574 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:25:39,574 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:25:40,237 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:25:40,237 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:40,248 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 87
2025-04-14 14:25:40,288 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 14:25:40 GMT",
  "log": "",
  "status": "finished"
}

2025-04-14 14:25:42,043 - DEBUG - Polling for notifications...
2025-04-14 14:25:42,056 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637133 with data: None
2025-04-14 14:25:42,056 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:42,070 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637133 HTTP/1.1" 200 18
2025-04-14 14:25:42,071 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 14:25:47,076 - DEBUG - Polling for notifications...
2025-04-14 14:25:47,088 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637133 with data: None
2025-04-14 14:25:47,089 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:47,103 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637133 HTTP/1.1" 200 18
2025-04-14 14:25:47,103 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 14:25:50,732 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file1.py'}
2025-04-14 14:25:50,733 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:50,740 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-14 14:25:50,750 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:25:50,750 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:25:50,760 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:25:50,760 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:50,775 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 93
2025-04-14 14:25:50,775 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  },
  {
    "id": 2,
    "name": "file1.py"
  }
]

2025-04-14 14:25:50,792 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:25:50,792 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:50,807 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 93
2025-04-14 14:25:50,807 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  },
  {
    "id": 2,
    "name": "file1.py"
  }
]

2025-04-14 14:25:50,822 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:25:50,823 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:50,837 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 93
2025-04-14 14:25:50,838 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  },
  {
    "id": 2,
    "name": "file1.py"
  }
]

2025-04-14 14:25:51,315 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:25:51,315 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:51,330 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-14 14:25:51,330 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:25:51,846 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:25:51,847 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:51,856 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 109
2025-04-14 14:25:51,897 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 14:25:51 GMT",
  "log": "Io sono stato caricato",
  "status": "finished"
}

2025-04-14 14:25:52,109 - DEBUG - Polling for notifications...
2025-04-14 14:25:52,121 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637151 with data: None
2025-04-14 14:25:52,122 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:25:52,135 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637151 HTTP/1.1" 200 18
2025-04-14 14:25:52,136 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 14:26:01,400 - INFO - Application started.
2025-04-14 14:26:01,400 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:26:01,400 - INFO - Attempting to log in user: test
2025-04-14 14:26:01,403 - DEBUG - Loading KWallet
2025-04-14 14:26:01,404 - DEBUG - Loading SecretService
2025-04-14 14:26:01,412 - DEBUG - Loading Windows
2025-04-14 14:26:01,413 - DEBUG - Loading chainer
2025-04-14 14:26:01,413 - DEBUG - Loading libsecret
2025-04-14 14:26:01,413 - DEBUG - Loading macOS
2025-04-14 14:26:01,457 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:26:01,458 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:26:01,462 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 14:26:01,472 - DEBUG - Received response
2025-04-14 14:26:01,486 - INFO - User test logged in successfully.
2025-04-14 14:26:01,486 - INFO - Starting polling for notifications.
2025-04-14 14:26:01,486 - DEBUG - Polling for notifications...
2025-04-14 14:26:01,497 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637161 with data: None
2025-04-14 14:26:01,498 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:26:01,511 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637161 HTTP/1.1" 200 20
2025-04-14 14:26:01,512 - DEBUG - Received response: {
  "update": -10
}

2025-04-14 14:26:01,654 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:26:01,654 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:26:01,668 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 93
2025-04-14 14:26:01,669 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  },
  {
    "id": 2,
    "name": "file1.py"
  }
]

2025-04-14 14:26:02,830 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:26:02,831 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:26:02,846 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-14 14:26:02,846 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:26:04,093 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/2 with data: None
2025-04-14 14:26:04,093 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:26:04,112 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/2 HTTP/1.1" 200 3
2025-04-14 14:26:04,113 - DEBUG - Received response: 200
2025-04-14 14:26:12,140 - INFO - Application started.
2025-04-14 14:26:12,140 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:26:12,140 - INFO - Attempting to log in user: test
2025-04-14 14:26:12,143 - DEBUG - Loading KWallet
2025-04-14 14:26:12,144 - DEBUG - Loading SecretService
2025-04-14 14:26:12,153 - DEBUG - Loading Windows
2025-04-14 14:26:12,153 - DEBUG - Loading chainer
2025-04-14 14:26:12,153 - DEBUG - Loading libsecret
2025-04-14 14:26:12,154 - DEBUG - Loading macOS
2025-04-14 14:26:12,197 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:26:12,198 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:26:12,202 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 14:26:12,212 - DEBUG - Received response
2025-04-14 14:26:12,226 - INFO - User test logged in successfully.
2025-04-14 14:26:12,226 - INFO - Starting polling for notifications.
2025-04-14 14:26:12,227 - DEBUG - Polling for notifications...
2025-04-14 14:26:12,236 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637172 with data: None
2025-04-14 14:26:12,237 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:26:12,250 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637172 HTTP/1.1" 200 20
2025-04-14 14:26:12,251 - DEBUG - Received response: {
  "update": -21
}

2025-04-14 14:26:12,389 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:26:12,390 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:26:12,404 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:26:12,404 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  }
]

2025-04-14 14:26:13,364 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:26:13,365 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:26:13,380 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:26:13,380 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:27:19,857 - INFO - Application started.
2025-04-14 14:27:19,857 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:27:19,857 - INFO - Attempting to log in user: test
2025-04-14 14:27:19,860 - DEBUG - Loading KWallet
2025-04-14 14:27:19,860 - DEBUG - Loading SecretService
2025-04-14 14:27:19,869 - DEBUG - Loading Windows
2025-04-14 14:27:19,869 - DEBUG - Loading chainer
2025-04-14 14:27:19,869 - DEBUG - Loading libsecret
2025-04-14 14:27:19,870 - DEBUG - Loading macOS
2025-04-14 14:27:19,914 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:27:19,915 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:19,918 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-14 14:27:19,929 - DEBUG - Received response
2025-04-14 14:27:19,941 - INFO - User test logged in successfully.
2025-04-14 14:27:19,941 - INFO - Starting polling for notifications.
2025-04-14 14:27:19,942 - DEBUG - Polling for notifications...
2025-04-14 14:27:19,952 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637240 with data: None
2025-04-14 14:27:19,953 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:19,967 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637240 HTTP/1.1" 200 20
2025-04-14 14:27:19,967 - DEBUG - Received response: {
  "update": -89
}

2025-04-14 14:27:20,103 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:27:20,104 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:20,118 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:27:20,118 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  }
]

2025-04-14 14:27:20,980 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:27:20,981 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:20,996 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:27:20,996 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:27:21,689 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:27:21,690 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:21,700 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 87
2025-04-14 14:27:21,741 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 14:27:21 GMT",
  "log": "",
  "status": "finished"
}

2025-04-14 14:27:24,973 - DEBUG - Polling for notifications...
2025-04-14 14:27:24,984 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637240 with data: None
2025-04-14 14:27:24,985 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:25,000 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637240 HTTP/1.1" 200 20
2025-04-14 14:27:25,000 - DEBUG - Received response: {
  "update": -89
}

2025-04-14 14:27:26,984 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    local msg=$(get_param)\n    echo "Hello, World! $msg"\n}\n\n', 'name': 'hello.sh'}
2025-04-14 14:27:26,984 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:26,988 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-04-14 14:27:26,998 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-04-14 14:27:26,998 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-04-14 14:27:27,008 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:27:27,009 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:27,023 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:27:27,023 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  }
]

2025-04-14 14:27:27,038 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:27:27,039 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:27,053 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:27:27,053 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  }
]

2025-04-14 14:27:27,066 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:27:27,067 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:27,081 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:27:27,081 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  }
]

2025-04-14 14:27:28,290 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:27:28,291 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:28,305 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:27:28,306 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:27:28,455 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:27:28,455 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:28,470 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:27:28,471 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:27:30,006 - DEBUG - Polling for notifications...
2025-04-14 14:27:30,018 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637247 with data: None
2025-04-14 14:27:30,019 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:30,033 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637247 HTTP/1.1" 200 20
2025-04-14 14:27:30,033 - DEBUG - Received response: {
  "update": -96
}

2025-04-14 14:27:30,085 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:27:30,086 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:30,101 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-14 14:27:30,101 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:27:30,837 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:27:30,838 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:30,848 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 87
2025-04-14 14:27:30,889 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 14:27:30 GMT",
  "log": "",
  "status": "finished"
}

2025-04-14 14:27:33,384 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '', 'name': 'file.py'}
2025-04-14 14:27:33,385 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:33,392 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-14 14:27:33,402 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:27:33,402 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:27:33,412 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:27:33,413 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:33,427 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 92
2025-04-14 14:27:33,427 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  },
  {
    "id": 2,
    "name": "file.py"
  }
]

2025-04-14 14:27:33,444 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:27:33,444 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:33,458 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 92
2025-04-14 14:27:33,459 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  },
  {
    "id": 2,
    "name": "file.py"
  }
]

2025-04-14 14:27:33,475 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:27:33,476 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:33,490 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 92
2025-04-14 14:27:33,490 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  },
  {
    "id": 2,
    "name": "file.py"
  }
]

2025-04-14 14:27:33,844 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:27:33,845 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:33,859 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-14 14:27:33,860 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:27:34,446 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:27:34,447 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:34,455 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 198
2025-04-14 14:27:34,496 - DEBUG - Received response: {
  "datetime": "Mon, 14 Apr 2025 14:27:34 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python file.py: module 'plugins.file' has no attribute 'Plugin'",
  "status": "failed"
}

2025-04-14 14:27:35,039 - DEBUG - Polling for notifications...
2025-04-14 14:27:35,052 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637253 with data: None
2025-04-14 14:27:35,053 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:35,066 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637253 HTTP/1.1" 200 18
2025-04-14 14:27:35,067 - DEBUG - Received response: {
  "update": 0
}

2025-04-14 14:27:35,753 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:27:35,753 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:35,768 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-14 14:27:35,768 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:27:36,450 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/2 with data: None
2025-04-14 14:27:36,451 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:36,469 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/2 HTTP/1.1" 200 3
2025-04-14 14:27:36,469 - DEBUG - Received response: 200
2025-04-14 14:27:36,480 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:27:36,480 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:36,494 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 48
2025-04-14 14:27:36,495 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  }
]

2025-04-14 14:27:38,905 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file1.py'}
2025-04-14 14:27:38,906 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:38,914 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 48
2025-04-14 14:27:38,924 - DEBUG - Received response: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:27:38,924 - ERROR - Error 201: {
  "message": "Plugin uploaded successfully"
}

2025-04-14 14:27:38,934 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:27:38,934 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:38,948 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 93
2025-04-14 14:27:38,949 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  },
  {
    "id": 2,
    "name": "file1.py"
  }
]

2025-04-14 14:27:38,965 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:27:38,965 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:38,979 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 93
2025-04-14 14:27:38,980 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  },
  {
    "id": 2,
    "name": "file1.py"
  }
]

2025-04-14 14:27:38,995 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:27:38,996 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:39,010 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 93
2025-04-14 14:27:39,011 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "hello.sh"
  },
  {
    "id": 2,
    "name": "file1.py"
  }
]

2025-04-14 14:27:39,321 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:27:39,321 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:39,336 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-14 14:27:39,337 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-14 14:27:39,886 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:27:39,886 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:39,891 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 422 45
2025-04-14 14:27:39,931 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-04-14 14:27:39,932 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-04-14 14:27:40,071 - DEBUG - Polling for notifications...
2025-04-14 14:27:40,082 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637259 with data: None
2025-04-14 14:27:40,083 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:40,096 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637259 HTTP/1.1" 422 45
2025-04-14 14:27:40,097 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-04-14 14:27:40,097 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-04-14 14:27:40,985 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:27:40,986 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:40,990 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 422 45
2025-04-14 14:27:41,031 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-04-14 14:27:41,031 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-04-14 14:27:42,234 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:27:42,235 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:42,249 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 422 45
2025-04-14 14:27:42,249 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-04-14 14:27:42,249 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-04-14 14:27:43,373 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:27:43,374 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:27:43,378 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 422 45
2025-04-14 14:27:43,419 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-04-14 14:27:43,419 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-04-14 14:28:27,472 - INFO - Application started.
2025-04-14 14:28:27,473 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:28:27,473 - INFO - Attempting to log in user: test
2025-04-14 14:28:27,475 - DEBUG - Loading KWallet
2025-04-14 14:28:27,476 - DEBUG - Loading SecretService
2025-04-14 14:28:27,485 - DEBUG - Loading Windows
2025-04-14 14:28:27,485 - DEBUG - Loading chainer
2025-04-14 14:28:27,485 - DEBUG - Loading libsecret
2025-04-14 14:28:27,486 - DEBUG - Loading macOS
2025-04-14 14:28:27,530 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:28:27,531 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:27,535 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 349
2025-04-14 14:28:27,545 - DEBUG - Received response
2025-04-14 14:28:27,558 - INFO - User test logged in successfully.
2025-04-14 14:28:27,559 - INFO - Starting polling for notifications.
2025-04-14 14:28:27,559 - DEBUG - Polling for notifications...
2025-04-14 14:28:27,568 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637307 with data: None
2025-04-14 14:28:27,569 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:27,584 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637307 HTTP/1.1" 200 14
2025-04-14 14:28:27,584 - DEBUG - Received response: {"update":-9}

2025-04-14 14:28:27,714 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:28:27,715 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:27,731 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 56
2025-04-14 14:28:27,732 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"}]

2025-04-14 14:28:28,877 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:28:28,878 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:28,894 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:28:28,894 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:28:29,846 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:28:29,847 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:29,856 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:28:29,897 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:28:29 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:28:32,589 - DEBUG - Polling for notifications...
2025-04-14 14:28:32,601 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637308 with data: None
2025-04-14 14:28:32,602 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:32,616 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637308 HTTP/1.1" 200 15
2025-04-14 14:28:32,616 - DEBUG - Received response: {"update":-10}

2025-04-14 14:28:33,590 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:28:33,590 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:33,605 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:28:33,605 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:28:37,622 - DEBUG - Polling for notifications...
2025-04-14 14:28:37,635 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637308 with data: None
2025-04-14 14:28:37,635 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:37,649 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637308 HTTP/1.1" 200 15
2025-04-14 14:28:37,650 - DEBUG - Received response: {"update":-10}

2025-04-14 14:28:37,863 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '', 'name': 'file.py'}
2025-04-14 14:28:37,864 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:37,872 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 43
2025-04-14 14:28:37,882 - DEBUG - Received response: {"message":"Plugin uploaded successfully"}

2025-04-14 14:28:37,882 - ERROR - Error 201: {"message":"Plugin uploaded successfully"}

2025-04-14 14:28:37,892 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:28:37,893 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:37,907 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 82
2025-04-14 14:28:37,908 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"},{"id":3,"name":"file.py"}]

2025-04-14 14:28:37,928 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:28:37,928 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:37,942 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 82
2025-04-14 14:28:37,943 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"},{"id":3,"name":"file.py"}]

2025-04-14 14:28:37,961 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:28:37,961 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:37,975 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 82
2025-04-14 14:28:37,976 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"},{"id":3,"name":"file.py"}]

2025-04-14 14:28:38,568 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-14 14:28:38,569 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:38,583 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 31
2025-04-14 14:28:38,584 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:28:39,121 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-14 14:28:39,122 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:39,130 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 185
2025-04-14 14:28:39,171 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:28:39 GMT","log":"Errore nell'importazione ed esecuzione del modulo Python file.py: module 'plugins.file' has no attribute 'Plugin'","status":"failed"}

2025-04-14 14:28:40,441 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-14 14:28:40,442 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:40,457 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 31
2025-04-14 14:28:40,458 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:28:41,880 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/3 with data: None
2025-04-14 14:28:41,881 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:41,900 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/3 HTTP/1.1" 200 3
2025-04-14 14:28:41,900 - DEBUG - Received response: 200
2025-04-14 14:28:41,910 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:28:41,911 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:41,925 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 56
2025-04-14 14:28:41,925 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"}]

2025-04-14 14:28:42,609 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:28:42,610 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:42,625 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:28:42,625 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:28:42,655 - DEBUG - Polling for notifications...
2025-04-14 14:28:42,667 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637322 with data: None
2025-04-14 14:28:42,667 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:42,681 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637322 HTTP/1.1" 200 14
2025-04-14 14:28:42,682 - DEBUG - Received response: {"update":-4}

2025-04-14 14:28:43,226 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:28:43,227 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:43,235 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:28:43,276 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:28:43 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:28:44,784 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:28:44,785 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:44,800 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:28:44,800 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:28:45,340 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:28:45,341 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:45,351 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:28:45,392 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:28:45 GMT","log":"","status":"finished"}

2025-04-14 14:28:46,339 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:28:46,340 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:46,355 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:28:46,355 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:28:47,686 - DEBUG - Polling for notifications...
2025-04-14 14:28:47,699 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637322 with data: None
2025-04-14 14:28:47,700 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:47,713 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637322 HTTP/1.1" 200 14
2025-04-14 14:28:47,714 - DEBUG - Received response: {"update":-4}

2025-04-14 14:28:52,719 - DEBUG - Polling for notifications...
2025-04-14 14:28:52,732 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637322 with data: None
2025-04-14 14:28:52,732 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:52,746 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637322 HTTP/1.1" 200 14
2025-04-14 14:28:52,747 - DEBUG - Received response: {"update":-4}

2025-04-14 14:28:56,577 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/2 with data: {'name': 'file.py', 'description': 'descrizione descrittosa'}
2025-04-14 14:28:56,578 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:56,591 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/2 HTTP/1.1" 500 265
2025-04-14 14:28:56,601 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:28:56,601 - ERROR - Error 500: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:28:56,618 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:28:56,618 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:56,632 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 55
2025-04-14 14:28:56,633 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file.py"}]

2025-04-14 14:28:57,304 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:28:57,304 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:57,319 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:28:57,319 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:28:57,751 - DEBUG - Polling for notifications...
2025-04-14 14:28:57,761 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637337 with data: None
2025-04-14 14:28:57,762 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:57,775 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637337 HTTP/1.1" 200 15
2025-04-14 14:28:57,776 - DEBUG - Received response: {"update":-19}

2025-04-14 14:28:57,966 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:28:57,967 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:28:57,975 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 185
2025-04-14 14:28:58,016 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:28:57 GMT","log":"Errore nell'importazione ed esecuzione del modulo Python file.py: module 'plugins.file' has no attribute 'Plugin'","status":"failed"}

2025-04-14 14:29:02,781 - DEBUG - Polling for notifications...
2025-04-14 14:29:02,793 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637337 with data: None
2025-04-14 14:29:02,794 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:02,809 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637337 HTTP/1.1" 200 15
2025-04-14 14:29:02,809 - DEBUG - Received response: {"update":-19}

2025-04-14 14:29:06,986 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:29:06,987 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:07,001 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:29:07,002 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:29:07,681 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:29:07,681 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:07,691 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:29:07,732 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:29:07 GMT","log":"","status":"finished"}

2025-04-14 14:29:07,814 - DEBUG - Polling for notifications...
2025-04-14 14:29:07,827 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637337 with data: None
2025-04-14 14:29:07,828 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:07,842 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637337 HTTP/1.1" 200 15
2025-04-14 14:29:07,842 - DEBUG - Received response: {"update":-19}

2025-04-14 14:29:09,067 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:29:09,068 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:09,083 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:29:09,083 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:29:12,848 - DEBUG - Polling for notifications...
2025-04-14 14:29:12,860 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637337 with data: None
2025-04-14 14:29:12,861 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:12,875 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637337 HTTP/1.1" 200 15
2025-04-14 14:29:12,876 - DEBUG - Received response: {"update":-19}

2025-04-14 14:29:15,601 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/2 with data: {'name': 'file1.py', 'description': ''}
2025-04-14 14:29:15,602 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:15,610 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/2 HTTP/1.1" 500 265
2025-04-14 14:29:15,620 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:29:15,620 - ERROR - Error 500: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:29:15,635 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:29:15,636 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:15,650 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 56
2025-04-14 14:29:15,650 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"}]

2025-04-14 14:29:16,469 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:29:16,470 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:16,485 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:29:16,485 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:29:17,012 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:29:17,012 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:17,020 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:29:17,061 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:29:17 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:29:17,881 - DEBUG - Polling for notifications...
2025-04-14 14:29:17,893 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637356 with data: None
2025-04-14 14:29:17,894 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:17,908 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637356 HTTP/1.1" 200 15
2025-04-14 14:29:17,908 - DEBUG - Received response: {"update":-38}

2025-04-14 14:29:50,657 - INFO - Application started.
2025-04-14 14:29:50,657 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:29:50,657 - INFO - Attempting to log in user: test
2025-04-14 14:29:50,660 - DEBUG - Loading KWallet
2025-04-14 14:29:50,661 - DEBUG - Loading SecretService
2025-04-14 14:29:50,669 - DEBUG - Loading Windows
2025-04-14 14:29:50,670 - DEBUG - Loading chainer
2025-04-14 14:29:50,670 - DEBUG - Loading libsecret
2025-04-14 14:29:50,670 - DEBUG - Loading macOS
2025-04-14 14:29:50,715 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:29:50,716 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:50,719 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 349
2025-04-14 14:29:50,730 - DEBUG - Received response
2025-04-14 14:29:50,743 - INFO - User test logged in successfully.
2025-04-14 14:29:50,743 - INFO - Starting polling for notifications.
2025-04-14 14:29:50,743 - DEBUG - Polling for notifications...
2025-04-14 14:29:50,753 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637391 with data: None
2025-04-14 14:29:50,754 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:50,767 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637391 HTTP/1.1" 200 15
2025-04-14 14:29:50,768 - DEBUG - Received response: {"update":-73}

2025-04-14 14:29:50,904 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:29:50,904 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:50,919 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 56
2025-04-14 14:29:50,920 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"}]

2025-04-14 14:29:51,811 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:29:51,812 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:51,827 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:29:51,827 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:29:55,772 - DEBUG - Polling for notifications...
2025-04-14 14:29:55,785 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637391 with data: None
2025-04-14 14:29:55,786 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:55,799 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637391 HTTP/1.1" 200 15
2025-04-14 14:29:55,800 - DEBUG - Received response: {"update":-73}

2025-04-14 14:29:55,858 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/2 with data: {'name': 'file.py', 'description': ''}
2025-04-14 14:29:55,859 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:55,867 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/2 HTTP/1.1" 500 265
2025-04-14 14:29:55,877 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:29:55,878 - ERROR - Error 500: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:29:55,894 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:29:55,895 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:55,909 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 55
2025-04-14 14:29:55,909 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file.py"}]

2025-04-14 14:29:56,641 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:29:56,641 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:56,656 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:29:56,657 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:29:57,324 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:29:57,325 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:29:57,332 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 185
2025-04-14 14:29:57,372 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:29:57 GMT","log":"Errore nell'importazione ed esecuzione del modulo Python file.py: module 'plugins.file' has no attribute 'Plugin'","status":"failed"}

2025-04-14 14:30:00,805 - DEBUG - Polling for notifications...
2025-04-14 14:30:00,818 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637396 with data: None
2025-04-14 14:30:00,818 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:00,832 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637396 HTTP/1.1" 200 15
2025-04-14 14:30:00,833 - DEBUG - Received response: {"update":-78}

2025-04-14 14:30:05,837 - DEBUG - Polling for notifications...
2025-04-14 14:30:05,850 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637396 with data: None
2025-04-14 14:30:05,851 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:05,864 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637396 HTTP/1.1" 200 15
2025-04-14 14:30:05,865 - DEBUG - Received response: {"update":-78}

2025-04-14 14:30:06,393 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:30:06,394 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:06,409 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:30:06,409 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:30:07,331 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:30:07,332 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:07,340 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 185
2025-04-14 14:30:07,381 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:30:07 GMT","log":"Errore nell'importazione ed esecuzione del modulo Python file.py: module 'plugins.file' has no attribute 'Plugin'","status":"failed"}

2025-04-14 14:30:10,870 - DEBUG - Polling for notifications...
2025-04-14 14:30:10,883 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637396 with data: None
2025-04-14 14:30:10,883 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:10,897 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637396 HTTP/1.1" 200 15
2025-04-14 14:30:10,898 - DEBUG - Received response: {"update":-78}

2025-04-14 14:30:15,903 - DEBUG - Polling for notifications...
2025-04-14 14:30:15,915 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637396 with data: None
2025-04-14 14:30:15,916 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:15,930 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637396 HTTP/1.1" 200 15
2025-04-14 14:30:15,930 - DEBUG - Received response: {"update":-78}

2025-04-14 14:30:20,935 - DEBUG - Polling for notifications...
2025-04-14 14:30:20,947 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637396 with data: None
2025-04-14 14:30:20,948 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:20,962 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637396 HTTP/1.1" 200 15
2025-04-14 14:30:20,962 - DEBUG - Received response: {"update":-78}

2025-04-14 14:30:23,690 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:30:23,691 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:23,705 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:30:23,706 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:30:25,968 - DEBUG - Polling for notifications...
2025-04-14 14:30:25,980 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637396 with data: None
2025-04-14 14:30:25,981 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:25,995 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637396 HTTP/1.1" 200 15
2025-04-14 14:30:25,995 - DEBUG - Received response: {"update":-78}

2025-04-14 14:30:28,910 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/2 with data: {'name': 'file1.py', 'description': ''}
2025-04-14 14:30:28,911 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:28,919 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/2 HTTP/1.1" 500 265
2025-04-14 14:30:28,929 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:30:28,929 - ERROR - Error 500: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:30:28,944 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:30:28,944 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:28,958 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 56
2025-04-14 14:30:28,959 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"}]

2025-04-14 14:30:29,756 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:30:29,757 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:29,772 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:30:29,772 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:30:30,471 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:30:30,472 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:30,482 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:30:30,523 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:30:30 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:30:30,999 - DEBUG - Polling for notifications...
2025-04-14 14:30:31,011 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637429 with data: None
2025-04-14 14:30:31,012 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:31,026 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637429 HTTP/1.1" 200 16
2025-04-14 14:30:31,026 - DEBUG - Received response: {"update":-111}

2025-04-14 14:30:36,032 - DEBUG - Polling for notifications...
2025-04-14 14:30:36,044 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637429 with data: None
2025-04-14 14:30:36,044 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:36,058 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637429 HTTP/1.1" 200 16
2025-04-14 14:30:36,059 - DEBUG - Received response: {"update":-111}

2025-04-14 14:30:41,064 - DEBUG - Polling for notifications...
2025-04-14 14:30:41,076 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637429 with data: None
2025-04-14 14:30:41,077 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:41,091 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637429 HTTP/1.1" 200 16
2025-04-14 14:30:41,091 - DEBUG - Received response: {"update":-111}

2025-04-14 14:30:46,096 - DEBUG - Polling for notifications...
2025-04-14 14:30:46,108 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637429 with data: None
2025-04-14 14:30:46,109 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:46,123 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637429 HTTP/1.1" 200 16
2025-04-14 14:30:46,123 - DEBUG - Received response: {"update":-111}

2025-04-14 14:30:51,128 - DEBUG - Polling for notifications...
2025-04-14 14:30:51,140 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637429 with data: None
2025-04-14 14:30:51,141 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:51,155 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637429 HTTP/1.1" 200 16
2025-04-14 14:30:51,155 - DEBUG - Received response: {"update":-111}

2025-04-14 14:30:56,181 - DEBUG - Polling for notifications...
2025-04-14 14:30:56,193 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637429 with data: None
2025-04-14 14:30:56,194 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:30:56,207 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637429 HTTP/1.1" 200 16
2025-04-14 14:30:56,208 - DEBUG - Received response: {"update":-111}

2025-04-14 14:31:01,233 - DEBUG - Polling for notifications...
2025-04-14 14:31:01,246 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637429 with data: None
2025-04-14 14:31:01,246 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:01,260 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637429 HTTP/1.1" 200 16
2025-04-14 14:31:01,261 - DEBUG - Received response: {"update":-111}

2025-04-14 14:31:06,286 - DEBUG - Polling for notifications...
2025-04-14 14:31:06,298 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637429 with data: None
2025-04-14 14:31:06,299 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:06,313 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637429 HTTP/1.1" 200 16
2025-04-14 14:31:06,313 - DEBUG - Received response: {"update":-111}

2025-04-14 14:31:11,338 - DEBUG - Polling for notifications...
2025-04-14 14:31:11,351 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637429 with data: None
2025-04-14 14:31:11,351 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:11,365 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637429 HTTP/1.1" 200 16
2025-04-14 14:31:11,366 - DEBUG - Received response: {"update":-111}

2025-04-14 14:31:16,391 - DEBUG - Polling for notifications...
2025-04-14 14:31:16,403 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637429 with data: None
2025-04-14 14:31:16,404 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:16,418 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637429 HTTP/1.1" 200 16
2025-04-14 14:31:16,418 - DEBUG - Received response: {"update":-111}

2025-04-14 14:31:17,705 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:31:17,706 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:17,720 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:31:17,721 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:31:21,424 - DEBUG - Polling for notifications...
2025-04-14 14:31:21,436 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637429 with data: None
2025-04-14 14:31:21,437 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:21,451 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637429 HTTP/1.1" 200 16
2025-04-14 14:31:21,451 - DEBUG - Received response: {"update":-111}

2025-04-14 14:31:21,894 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/2 with data: {'name': 'file.py', 'description': ''}
2025-04-14 14:31:21,895 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:21,903 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/2 HTTP/1.1" 500 265
2025-04-14 14:31:21,913 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:31:21,913 - ERROR - Error 500: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:31:21,929 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:31:21,929 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:21,943 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 55
2025-04-14 14:31:21,944 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file.py"}]

2025-04-14 14:31:22,685 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:31:22,686 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:22,701 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:31:22,701 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:31:23,336 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:31:23,336 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:23,344 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 185
2025-04-14 14:31:23,384 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:31:23 GMT","log":"Errore nell'importazione ed esecuzione del modulo Python file.py: module 'plugins.file' has no attribute 'Plugin'","status":"failed"}

2025-04-14 14:31:26,457 - DEBUG - Polling for notifications...
2025-04-14 14:31:26,469 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:31:26,470 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:26,484 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:31:26,484 - DEBUG - Received response: {"update":-164}

2025-04-14 14:31:31,490 - DEBUG - Polling for notifications...
2025-04-14 14:31:31,503 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:31:31,504 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:31,518 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:31:31,518 - DEBUG - Received response: {"update":-164}

2025-04-14 14:31:36,524 - DEBUG - Polling for notifications...
2025-04-14 14:31:36,536 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:31:36,537 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:36,550 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:31:36,551 - DEBUG - Received response: {"update":-164}

2025-04-14 14:31:41,556 - DEBUG - Polling for notifications...
2025-04-14 14:31:41,569 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:31:41,569 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:41,583 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:31:41,584 - DEBUG - Received response: {"update":-164}

2025-04-14 14:31:46,589 - DEBUG - Polling for notifications...
2025-04-14 14:31:46,601 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:31:46,602 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:46,616 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:31:46,616 - DEBUG - Received response: {"update":-164}

2025-04-14 14:31:51,642 - DEBUG - Polling for notifications...
2025-04-14 14:31:51,655 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:31:51,656 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:51,669 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:31:51,670 - DEBUG - Received response: {"update":-164}

2025-04-14 14:31:55,759 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:31:55,759 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:55,774 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:31:55,774 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:31:56,577 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:31:56,578 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:56,586 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 185
2025-04-14 14:31:56,627 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:31:56 GMT","log":"Errore nell'importazione ed esecuzione del modulo Python file.py: module 'plugins.file' has no attribute 'Plugin'","status":"failed"}

2025-04-14 14:31:56,694 - DEBUG - Polling for notifications...
2025-04-14 14:31:56,706 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:31:56,707 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:31:56,721 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:31:56,721 - DEBUG - Received response: {"update":-164}

2025-04-14 14:32:01,726 - DEBUG - Polling for notifications...
2025-04-14 14:32:01,739 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:32:01,739 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:32:01,753 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:32:01,754 - DEBUG - Received response: {"update":-164}

2025-04-14 14:32:06,779 - DEBUG - Polling for notifications...
2025-04-14 14:32:06,791 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:32:06,792 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:32:06,806 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:32:06,806 - DEBUG - Received response: {"update":-164}

2025-04-14 14:32:11,832 - DEBUG - Polling for notifications...
2025-04-14 14:32:11,845 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:32:11,845 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:32:11,859 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:32:11,860 - DEBUG - Received response: {"update":-164}

2025-04-14 14:32:16,885 - DEBUG - Polling for notifications...
2025-04-14 14:32:16,898 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:32:16,898 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:32:16,912 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:32:16,913 - DEBUG - Received response: {"update":-164}

2025-04-14 14:32:21,937 - DEBUG - Polling for notifications...
2025-04-14 14:32:21,950 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:32:21,951 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:32:21,964 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:32:21,965 - DEBUG - Received response: {"update":-164}

2025-04-14 14:32:26,990 - DEBUG - Polling for notifications...
2025-04-14 14:32:27,002 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:32:27,003 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:32:27,017 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:32:27,017 - DEBUG - Received response: {"update":-164}

2025-04-14 14:32:32,043 - DEBUG - Polling for notifications...
2025-04-14 14:32:32,055 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:32:32,056 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:32:32,070 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:32:32,070 - DEBUG - Received response: {"update":-164}

2025-04-14 14:32:37,095 - DEBUG - Polling for notifications...
2025-04-14 14:32:37,108 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:32:37,108 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:32:37,122 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:32:37,123 - DEBUG - Received response: {"update":-164}

2025-04-14 14:32:42,147 - DEBUG - Polling for notifications...
2025-04-14 14:32:42,158 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:32:42,159 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:32:42,173 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:32:42,174 - DEBUG - Received response: {"update":-164}

2025-04-14 14:32:47,187 - DEBUG - Polling for notifications...
2025-04-14 14:32:47,199 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:32:47,200 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:32:47,213 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:32:47,214 - DEBUG - Received response: {"update":-164}

2025-04-14 14:32:52,239 - DEBUG - Polling for notifications...
2025-04-14 14:32:52,251 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:32:52,252 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:32:52,266 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:32:52,266 - DEBUG - Received response: {"update":-164}

2025-04-14 14:32:57,280 - DEBUG - Polling for notifications...
2025-04-14 14:32:57,292 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:32:57,293 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:32:57,307 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:32:57,307 - DEBUG - Received response: {"update":-164}

2025-04-14 14:33:02,319 - DEBUG - Polling for notifications...
2025-04-14 14:33:02,332 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:33:02,333 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:02,346 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:33:02,347 - DEBUG - Received response: {"update":-164}

2025-04-14 14:33:03,658 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:33:03,659 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:03,674 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:33:03,674 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:33:07,352 - DEBUG - Polling for notifications...
2025-04-14 14:33:07,365 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637482 with data: None
2025-04-14 14:33:07,374 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:07,387 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637482 HTTP/1.1" 200 16
2025-04-14 14:33:07,388 - DEBUG - Received response: {"update":-164}

2025-04-14 14:33:08,533 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/2 with data: {'name': 'file1.py', 'description': ''}
2025-04-14 14:33:08,534 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:08,542 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/2 HTTP/1.1" 500 265
2025-04-14 14:33:08,552 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:33:08,552 - ERROR - Error 500: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:33:08,568 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:33:08,568 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:08,582 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 56
2025-04-14 14:33:08,583 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"}]

2025-04-14 14:33:12,392 - DEBUG - Polling for notifications...
2025-04-14 14:33:12,404 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637589 with data: None
2025-04-14 14:33:12,405 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:12,418 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637589 HTTP/1.1" 200 16
2025-04-14 14:33:12,419 - DEBUG - Received response: {"update":-271}

2025-04-14 14:33:12,919 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '', 'name': 'file.py'}
2025-04-14 14:33:12,919 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:12,927 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 43
2025-04-14 14:33:12,937 - DEBUG - Received response: {"message":"Plugin uploaded successfully"}

2025-04-14 14:33:12,937 - ERROR - Error 201: {"message":"Plugin uploaded successfully"}

2025-04-14 14:33:12,947 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:33:12,948 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:12,962 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 82
2025-04-14 14:33:12,962 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"},{"id":3,"name":"file.py"}]

2025-04-14 14:33:12,982 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:33:12,982 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:12,996 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 82
2025-04-14 14:33:12,997 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"},{"id":3,"name":"file.py"}]

2025-04-14 14:33:13,014 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:33:13,014 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:13,029 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 82
2025-04-14 14:33:13,029 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"},{"id":3,"name":"file.py"}]

2025-04-14 14:33:13,568 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-14 14:33:13,568 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:13,582 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 31
2025-04-14 14:33:13,583 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:33:14,988 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-14 14:33:14,988 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:14,997 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 185
2025-04-14 14:33:15,038 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:33:14 GMT","log":"Errore nell'importazione ed esecuzione del modulo Python file.py: module 'plugins.file' has no attribute 'Plugin'","status":"failed"}

2025-04-14 14:33:17,424 - DEBUG - Polling for notifications...
2025-04-14 14:33:17,437 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637593 with data: None
2025-04-14 14:33:17,437 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:17,451 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637593 HTTP/1.1" 200 13
2025-04-14 14:33:17,451 - DEBUG - Received response: {"update":0}

2025-04-14 14:33:18,103 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-14 14:33:18,104 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:18,118 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 31
2025-04-14 14:33:18,119 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:33:18,841 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/3 with data: None
2025-04-14 14:33:18,841 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:18,859 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/3 HTTP/1.1" 200 3
2025-04-14 14:33:18,859 - DEBUG - Received response: 200
2025-04-14 14:33:18,869 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:33:18,870 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:18,884 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 56
2025-04-14 14:33:18,884 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"}]

2025-04-14 14:33:19,594 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:33:19,594 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:19,609 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 54
2025-04-14 14:33:19,610 - DEBUG - Received response: {"description":"descrizione descrittosa","params":""}

2025-04-14 14:33:20,587 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/2 with data: None
2025-04-14 14:33:20,588 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:20,606 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/2 HTTP/1.1" 200 3
2025-04-14 14:33:20,606 - DEBUG - Received response: 200
2025-04-14 14:33:20,616 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:33:20,617 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:20,631 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 29
2025-04-14 14:33:20,631 - DEBUG - Received response: [{"id":1,"name":"hello.sh"}]

2025-04-14 14:33:22,456 - DEBUG - Polling for notifications...
2025-04-14 14:33:22,468 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637601 with data: None
2025-04-14 14:33:22,469 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:22,483 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637601 HTTP/1.1" 200 14
2025-04-14 14:33:22,484 - DEBUG - Received response: {"update":-8}

2025-04-14 14:33:22,817 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file1.py'}
2025-04-14 14:33:22,818 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:22,825 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 43
2025-04-14 14:33:22,835 - DEBUG - Received response: {"message":"Plugin uploaded successfully"}

2025-04-14 14:33:22,835 - ERROR - Error 201: {"message":"Plugin uploaded successfully"}

2025-04-14 14:33:22,845 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:33:22,846 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:22,860 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 56
2025-04-14 14:33:22,860 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"}]

2025-04-14 14:33:22,877 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:33:22,877 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:22,891 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 56
2025-04-14 14:33:22,892 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"}]

2025-04-14 14:33:22,907 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:33:22,908 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:22,922 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 56
2025-04-14 14:33:22,922 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"file1.py"}]

2025-04-14 14:33:23,301 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:33:23,302 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:23,317 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:33:23,317 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:33:24,038 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:33:24,039 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:24,047 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:33:24,087 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:33:24 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:33:25,317 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:33:25,318 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:25,333 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:33:25,333 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:33:27,489 - DEBUG - Polling for notifications...
2025-04-14 14:33:27,502 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637603 with data: None
2025-04-14 14:33:27,502 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:27,516 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637603 HTTP/1.1" 200 13
2025-04-14 14:33:27,517 - DEBUG - Received response: {"update":0}

2025-04-14 14:33:32,522 - DEBUG - Polling for notifications...
2025-04-14 14:33:32,535 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637603 with data: None
2025-04-14 14:33:32,535 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:32,550 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637603 HTTP/1.1" 200 13
2025-04-14 14:33:32,550 - DEBUG - Received response: {"update":0}

2025-04-14 14:33:33,031 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/2 with data: {'name': 'ciaoBella.py', 'description': ''}
2025-04-14 14:33:33,031 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:33,039 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/2 HTTP/1.1" 500 265
2025-04-14 14:33:33,049 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:33:33,050 - ERROR - Error 500: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:33:33,063 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:33:33,064 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:33,078 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 60
2025-04-14 14:33:33,078 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"ciaoBella.py"}]

2025-04-14 14:33:33,739 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:33:33,740 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:33,754 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:33:33,754 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:33:37,005 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:33:37,006 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:37,015 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:33:37,056 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:33:37 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:33:37,555 - DEBUG - Polling for notifications...
2025-04-14 14:33:37,568 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637613 with data: None
2025-04-14 14:33:37,569 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:37,582 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637613 HTTP/1.1" 200 15
2025-04-14 14:33:37,583 - DEBUG - Received response: {"update":-10}

2025-04-14 14:33:39,483 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:33:39,484 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:39,498 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:33:39,499 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:33:42,586 - DEBUG - Polling for notifications...
2025-04-14 14:33:42,599 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637613 with data: None
2025-04-14 14:33:42,600 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:42,614 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637613 HTTP/1.1" 200 15
2025-04-14 14:33:42,614 - DEBUG - Received response: {"update":-10}

2025-04-14 14:33:45,364 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/2 with data: {'name': 'ioSono.py', 'description': ''}
2025-04-14 14:33:45,365 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:45,373 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/2 HTTP/1.1" 500 265
2025-04-14 14:33:45,383 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:33:45,383 - ERROR - Error 500: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:33:45,398 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:33:45,399 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:45,413 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 57
2025-04-14 14:33:45,414 - DEBUG - Received response: [{"id":1,"name":"hello.sh"},{"id":2,"name":"ioSono.py"}]

2025-04-14 14:33:47,588 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:33:47,588 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:47,603 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:33:47,603 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:33:47,619 - DEBUG - Polling for notifications...
2025-04-14 14:33:47,631 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637625 with data: None
2025-04-14 14:33:47,632 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:47,645 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637625 HTTP/1.1" 200 15
2025-04-14 14:33:47,646 - DEBUG - Received response: {"update":-22}

2025-04-14 14:33:48,161 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:33:48,162 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:48,170 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:33:48,211 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:33:48 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:33:50,788 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:33:50,789 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:50,804 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:33:50,804 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:33:52,651 - DEBUG - Polling for notifications...
2025-04-14 14:33:52,663 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637625 with data: None
2025-04-14 14:33:52,664 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:52,678 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637625 HTTP/1.1" 200 15
2025-04-14 14:33:52,678 - DEBUG - Received response: {"update":-22}

2025-04-14 14:33:57,034 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'filesh.sh', 'description': ''}
2025-04-14 14:33:57,035 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:57,043 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 265
2025-04-14 14:33:57,053 - DEBUG - Received response: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:33:57,053 - ERROR - Error 500: <!doctype html>
<html lang=en>
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>

2025-04-14 14:33:57,068 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:33:57,069 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:57,083 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 58
2025-04-14 14:33:57,084 - DEBUG - Received response: [{"id":1,"name":"filesh.sh"},{"id":2,"name":"ioSono.py"}]

2025-04-14 14:33:57,641 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:33:57,642 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:57,656 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:33:57,657 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:33:57,683 - DEBUG - Polling for notifications...
2025-04-14 14:33:57,695 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637637 with data: None
2025-04-14 14:33:57,695 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:57,709 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637637 HTTP/1.1" 200 15
2025-04-14 14:33:57,710 - DEBUG - Received response: {"update":-34}

2025-04-14 14:33:58,320 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:33:58,321 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:33:58,331 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:33:58,372 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:33:58 GMT","log":"","status":"finished"}

2025-04-14 14:34:00,067 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:34:00,068 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:34:00,082 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:34:00,083 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:34:00,835 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:34:00,836 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:34:00,870 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:34:00,911 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:34:00 GMT","log":"","status":"finished"}

2025-04-14 14:35:57,640 - INFO - Application started.
2025-04-14 14:35:57,640 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:35:57,640 - INFO - Attempting to log in user: test
2025-04-14 14:35:57,644 - DEBUG - Loading KWallet
2025-04-14 14:35:57,644 - DEBUG - Loading SecretService
2025-04-14 14:35:57,653 - DEBUG - Loading Windows
2025-04-14 14:35:57,653 - DEBUG - Loading chainer
2025-04-14 14:35:57,653 - DEBUG - Loading libsecret
2025-04-14 14:35:57,654 - DEBUG - Loading macOS
2025-04-14 14:35:57,699 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:35:57,700 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:35:57,704 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 349
2025-04-14 14:35:57,714 - DEBUG - Received response
2025-04-14 14:35:57,727 - INFO - User test logged in successfully.
2025-04-14 14:35:57,728 - INFO - Starting polling for notifications.
2025-04-14 14:35:57,728 - DEBUG - Polling for notifications...
2025-04-14 14:35:57,737 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637758 with data: None
2025-04-14 14:35:57,738 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:35:57,751 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637758 HTTP/1.1" 200 16
2025-04-14 14:35:57,752 - DEBUG - Received response: {"update":-155}

2025-04-14 14:35:57,892 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:35:57,893 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:35:57,907 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 58
2025-04-14 14:35:57,907 - DEBUG - Received response: [{"id":1,"name":"filesh.sh"},{"id":2,"name":"ioSono.py"}]

2025-04-14 14:35:58,890 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:35:58,891 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:35:58,906 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:35:58,907 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:35:59,913 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:35:59,914 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:35:59,924 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:35:59,965 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:35:59 GMT","log":"","status":"finished"}

2025-04-14 14:36:02,757 - DEBUG - Polling for notifications...
2025-04-14 14:36:02,770 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637758 with data: None
2025-04-14 14:36:02,771 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:36:02,784 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637758 HTTP/1.1" 200 16
2025-04-14 14:36:02,785 - DEBUG - Received response: {"update":-155}

2025-04-14 14:36:04,229 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:36:04,229 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:36:04,244 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:36:04,244 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:36:04,737 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:36:04,738 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:36:04,748 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:36:04,789 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:36:04 GMT","log":"","status":"finished"}

2025-04-14 14:37:04,398 - INFO - Application started.
2025-04-14 14:37:04,398 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:37:04,398 - INFO - Attempting to log in user: test
2025-04-14 14:37:04,401 - DEBUG - Loading KWallet
2025-04-14 14:37:04,401 - DEBUG - Loading SecretService
2025-04-14 14:37:04,410 - DEBUG - Loading Windows
2025-04-14 14:37:04,410 - DEBUG - Loading chainer
2025-04-14 14:37:04,410 - DEBUG - Loading libsecret
2025-04-14 14:37:04,411 - DEBUG - Loading macOS
2025-04-14 14:37:04,455 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:37:04,456 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:04,460 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 349
2025-04-14 14:37:04,470 - DEBUG - Received response
2025-04-14 14:37:04,484 - INFO - User test logged in successfully.
2025-04-14 14:37:04,484 - INFO - Starting polling for notifications.
2025-04-14 14:37:04,485 - DEBUG - Polling for notifications...
2025-04-14 14:37:04,495 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637824 with data: None
2025-04-14 14:37:04,496 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:04,509 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637824 HTTP/1.1" 200 16
2025-04-14 14:37:04,510 - DEBUG - Received response: {"update":-221}

2025-04-14 14:37:04,647 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:37:04,648 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:04,662 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 58
2025-04-14 14:37:04,662 - DEBUG - Received response: [{"id":1,"name":"filesh.sh"},{"id":2,"name":"ioSono.py"}]

2025-04-14 14:37:09,515 - DEBUG - Polling for notifications...
2025-04-14 14:37:09,527 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637825 with data: None
2025-04-14 14:37:09,528 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:09,542 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637825 HTTP/1.1" 200 16
2025-04-14 14:37:09,542 - DEBUG - Received response: {"update":-222}

2025-04-14 14:37:14,548 - DEBUG - Polling for notifications...
2025-04-14 14:37:14,560 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637825 with data: None
2025-04-14 14:37:14,561 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:14,574 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637825 HTTP/1.1" 200 16
2025-04-14 14:37:14,575 - DEBUG - Received response: {"update":-222}

2025-04-14 14:37:17,156 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:37:17,157 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:17,171 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:37:17,172 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:37:17,817 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:37:17,817 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:17,827 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:37:17,868 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:37:17 GMT","log":"","status":"finished"}

2025-04-14 14:37:19,580 - DEBUG - Polling for notifications...
2025-04-14 14:37:19,593 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637825 with data: None
2025-04-14 14:37:19,594 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:19,608 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637825 HTTP/1.1" 200 16
2025-04-14 14:37:19,608 - DEBUG - Received response: {"update":-222}

2025-04-14 14:37:20,660 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:37:20,661 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:20,675 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:37:20,676 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:37:21,243 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:37:21,244 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:21,259 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:37:21,259 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:37:22,253 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:37:22,254 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:22,261 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:37:22,301 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:37:22 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:37:33,427 - INFO - Application started.
2025-04-14 14:37:33,427 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:37:33,427 - INFO - Attempting to log in user: test
2025-04-14 14:37:33,431 - DEBUG - Loading KWallet
2025-04-14 14:37:33,432 - DEBUG - Loading SecretService
2025-04-14 14:37:33,441 - DEBUG - Loading Windows
2025-04-14 14:37:33,441 - DEBUG - Loading chainer
2025-04-14 14:37:33,442 - DEBUG - Loading libsecret
2025-04-14 14:37:33,442 - DEBUG - Loading macOS
2025-04-14 14:37:33,487 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:37:33,488 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:33,492 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 349
2025-04-14 14:37:33,502 - DEBUG - Received response
2025-04-14 14:37:33,515 - INFO - User test logged in successfully.
2025-04-14 14:37:33,516 - INFO - Starting polling for notifications.
2025-04-14 14:37:33,516 - DEBUG - Polling for notifications...
2025-04-14 14:37:33,526 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637853 with data: None
2025-04-14 14:37:33,527 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:33,541 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637853 HTTP/1.1" 200 14
2025-04-14 14:37:33,541 - DEBUG - Received response: {"update":-8}

2025-04-14 14:37:33,689 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:37:33,690 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:33,706 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 58
2025-04-14 14:37:33,707 - DEBUG - Received response: [{"id":1,"name":"filesh.sh"},{"id":2,"name":"ioSono.py"}]

2025-04-14 14:37:34,759 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:37:34,760 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:34,776 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:37:34,777 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:37:35,049 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:37:35,050 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:35,065 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:37:35,065 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:37:35,561 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:37:35,561 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:35,573 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:37:35,614 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:37:35 GMT","log":"","status":"finished"}

2025-04-14 14:37:38,546 - DEBUG - Polling for notifications...
2025-04-14 14:37:38,559 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637854 with data: None
2025-04-14 14:37:38,559 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:38,573 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637854 HTTP/1.1" 200 14
2025-04-14 14:37:38,574 - DEBUG - Received response: {"update":-9}

2025-04-14 14:37:43,579 - DEBUG - Polling for notifications...
2025-04-14 14:37:43,592 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637854 with data: None
2025-04-14 14:37:43,593 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:43,607 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637854 HTTP/1.1" 200 14
2025-04-14 14:37:43,607 - DEBUG - Received response: {"update":-9}

2025-04-14 14:37:47,682 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:37:47,683 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:47,697 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:37:47,698 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:37:48,355 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:37:48,356 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:48,364 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:37:48,405 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:37:48 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:37:48,612 - DEBUG - Polling for notifications...
2025-04-14 14:37:48,624 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637854 with data: None
2025-04-14 14:37:48,625 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:37:48,639 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637854 HTTP/1.1" 200 14
2025-04-14 14:37:48,639 - DEBUG - Received response: {"update":-9}

2025-04-14 14:38:26,408 - INFO - Application started.
2025-04-14 14:38:26,408 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:38:26,408 - INFO - Attempting to log in user: test
2025-04-14 14:38:26,411 - DEBUG - Loading KWallet
2025-04-14 14:38:26,411 - DEBUG - Loading SecretService
2025-04-14 14:38:26,420 - DEBUG - Loading Windows
2025-04-14 14:38:26,420 - DEBUG - Loading chainer
2025-04-14 14:38:26,421 - DEBUG - Loading libsecret
2025-04-14 14:38:26,421 - DEBUG - Loading macOS
2025-04-14 14:38:26,466 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:38:26,467 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:26,471 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 349
2025-04-14 14:38:26,482 - DEBUG - Received response
2025-04-14 14:38:26,495 - INFO - User test logged in successfully.
2025-04-14 14:38:26,496 - INFO - Starting polling for notifications.
2025-04-14 14:38:26,496 - DEBUG - Polling for notifications...
2025-04-14 14:38:26,507 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637906 with data: None
2025-04-14 14:38:26,508 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:26,522 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637906 HTTP/1.1" 200 14
2025-04-14 14:38:26,522 - DEBUG - Received response: {"update":-7}

2025-04-14 14:38:26,651 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:38:26,652 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:26,668 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 58
2025-04-14 14:38:26,669 - DEBUG - Received response: [{"id":1,"name":"filesh.sh"},{"id":2,"name":"ioSono.py"}]

2025-04-14 14:38:28,074 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:38:28,075 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:28,091 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:38:28,091 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:38:28,763 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:38:28,764 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:28,775 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:38:28,815 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:38:28 GMT","log":"","status":"finished"}

2025-04-14 14:38:31,526 - DEBUG - Polling for notifications...
2025-04-14 14:38:31,538 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637907 with data: None
2025-04-14 14:38:31,539 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:31,553 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637907 HTTP/1.1" 200 14
2025-04-14 14:38:31,553 - DEBUG - Received response: {"update":-8}

2025-04-14 14:38:36,093 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:38:36,094 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:36,109 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:38:36,109 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:38:36,558 - DEBUG - Polling for notifications...
2025-04-14 14:38:36,570 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637907 with data: None
2025-04-14 14:38:36,571 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:36,584 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637907 HTTP/1.1" 200 14
2025-04-14 14:38:36,585 - DEBUG - Received response: {"update":-8}

2025-04-14 14:38:36,837 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:38:36,838 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:36,852 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:38:36,853 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:38:37,430 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:38:37,431 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:37,440 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:38:37,481 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:38:37 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:38:39,397 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:38:39,397 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:39,412 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:38:39,413 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:38:40,126 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:38:40,127 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:40,137 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:38:40,178 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:38:40 GMT","log":"","status":"finished"}

2025-04-14 14:38:41,590 - DEBUG - Polling for notifications...
2025-04-14 14:38:41,602 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637907 with data: None
2025-04-14 14:38:41,603 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:38:41,617 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637907 HTTP/1.1" 200 14
2025-04-14 14:38:41,617 - DEBUG - Received response: {"update":-8}

2025-04-14 14:39:00,424 - INFO - Application started.
2025-04-14 14:39:00,424 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:39:00,424 - INFO - Attempting to log in user: test
2025-04-14 14:39:00,427 - DEBUG - Loading KWallet
2025-04-14 14:39:00,428 - DEBUG - Loading SecretService
2025-04-14 14:39:00,436 - DEBUG - Loading Windows
2025-04-14 14:39:00,437 - DEBUG - Loading chainer
2025-04-14 14:39:00,437 - DEBUG - Loading libsecret
2025-04-14 14:39:00,437 - DEBUG - Loading macOS
2025-04-14 14:39:00,482 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:39:00,484 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:00,487 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 349
2025-04-14 14:39:00,498 - DEBUG - Received response
2025-04-14 14:39:00,511 - INFO - User test logged in successfully.
2025-04-14 14:39:00,511 - INFO - Starting polling for notifications.
2025-04-14 14:39:00,511 - DEBUG - Polling for notifications...
2025-04-14 14:39:00,521 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637940 with data: None
2025-04-14 14:39:00,521 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:00,535 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637940 HTTP/1.1" 200 14
2025-04-14 14:39:00,536 - DEBUG - Received response: {"update":-7}

2025-04-14 14:39:00,676 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:39:00,677 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:00,693 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 58
2025-04-14 14:39:00,694 - DEBUG - Received response: [{"id":1,"name":"filesh.sh"},{"id":2,"name":"ioSono.py"}]

2025-04-14 14:39:02,858 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:39:02,858 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:02,874 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:39:02,874 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:39:03,539 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:39:03,540 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:03,552 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:39:03,592 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:39:03 GMT","log":"","status":"finished"}

2025-04-14 14:39:05,541 - DEBUG - Polling for notifications...
2025-04-14 14:39:05,554 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637941 with data: None
2025-04-14 14:39:05,555 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:05,568 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637941 HTTP/1.1" 200 14
2025-04-14 14:39:05,569 - DEBUG - Received response: {"update":-8}

2025-04-14 14:39:48,918 - INFO - Application started.
2025-04-14 14:39:48,918 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:39:48,918 - INFO - Attempting to log in user: test
2025-04-14 14:39:48,921 - DEBUG - Loading KWallet
2025-04-14 14:39:48,921 - DEBUG - Loading SecretService
2025-04-14 14:39:48,930 - DEBUG - Loading Windows
2025-04-14 14:39:48,930 - DEBUG - Loading chainer
2025-04-14 14:39:48,930 - DEBUG - Loading libsecret
2025-04-14 14:39:48,930 - DEBUG - Loading macOS
2025-04-14 14:39:48,973 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:39:48,975 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:48,979 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 349
2025-04-14 14:39:48,989 - DEBUG - Received response
2025-04-14 14:39:49,002 - INFO - User test logged in successfully.
2025-04-14 14:39:49,002 - INFO - Starting polling for notifications.
2025-04-14 14:39:49,002 - DEBUG - Polling for notifications...
2025-04-14 14:39:49,012 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637989 with data: None
2025-04-14 14:39:49,012 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:49,026 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637989 HTTP/1.1" 200 14
2025-04-14 14:39:49,026 - DEBUG - Received response: {"update":-9}

2025-04-14 14:39:49,167 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:39:49,167 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:49,184 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 58
2025-04-14 14:39:49,184 - DEBUG - Received response: [{"id":1,"name":"filesh.sh"},{"id":2,"name":"ioSono.py"}]

2025-04-14 14:39:50,211 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:39:50,212 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:50,228 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:39:50,228 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:39:51,221 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:39:51,222 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:51,233 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:39:51,273 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:39:51 GMT","log":"","status":"finished"}

2025-04-14 14:39:53,363 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:39:53,364 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:53,379 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:39:53,379 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:39:54,032 - DEBUG - Polling for notifications...
2025-04-14 14:39:54,042 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:39:54,046 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:54,051 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637989 with data: None
2025-04-14 14:39:54,052 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:54,056 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:39:54,065 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637989 HTTP/1.1" 200 14
2025-04-14 14:39:54,065 - DEBUG - Received response: {"update":-9}

2025-04-14 14:39:54,097 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:39:54 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:39:56,309 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:39:56,309 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:56,324 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:39:56,324 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:39:56,906 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:39:56,906 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:56,916 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 74
2025-04-14 14:39:56,957 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:39:56 GMT","log":"","status":"finished"}

2025-04-14 14:39:59,070 - DEBUG - Polling for notifications...
2025-04-14 14:39:59,082 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744637989 with data: None
2025-04-14 14:39:59,083 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:39:59,097 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744637989 HTTP/1.1" 200 14
2025-04-14 14:39:59,097 - DEBUG - Received response: {"update":-9}

2025-04-14 14:40:58,040 - INFO - Application started.
2025-04-14 14:40:58,040 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:40:58,040 - INFO - Attempting to log in user: test
2025-04-14 14:40:58,043 - DEBUG - Loading KWallet
2025-04-14 14:40:58,043 - DEBUG - Loading SecretService
2025-04-14 14:40:58,051 - DEBUG - Loading Windows
2025-04-14 14:40:58,052 - DEBUG - Loading chainer
2025-04-14 14:40:58,052 - DEBUG - Loading libsecret
2025-04-14 14:40:58,052 - DEBUG - Loading macOS
2025-04-14 14:40:58,096 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:40:58,098 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:40:58,101 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 349
2025-04-14 14:40:58,111 - DEBUG - Received response
2025-04-14 14:40:58,125 - INFO - User test logged in successfully.
2025-04-14 14:40:58,125 - INFO - Starting polling for notifications.
2025-04-14 14:40:58,125 - DEBUG - Polling for notifications...
2025-04-14 14:40:58,135 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744638058 with data: None
2025-04-14 14:40:58,136 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:40:58,149 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744638058 HTTP/1.1" 200 15
2025-04-14 14:40:58,150 - DEBUG - Received response: {"update":-78}

2025-04-14 14:40:58,291 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:40:58,291 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:40:58,305 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 58
2025-04-14 14:40:58,306 - DEBUG - Received response: [{"id":1,"name":"filesh.sh"},{"id":2,"name":"ioSono.py"}]

2025-04-14 14:40:59,620 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:40:59,621 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:40:59,635 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:40:59,636 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:41:00,760 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:41:00,761 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:00,769 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:41:00,809 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:41:00 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:41:02,309 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:41:02,310 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:02,324 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:41:02,325 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:41:02,857 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:41:02,858 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:02,867 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 221
2025-04-14 14:41:02,908 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:41:02 GMT","log":"Errore nell'esecuzione del plugin Bash: Command '. /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/filesh.sh' returned non-zero exit status 2.","status":"finished"}

2025-04-14 14:41:03,154 - DEBUG - Polling for notifications...
2025-04-14 14:41:03,166 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744638058 with data: None
2025-04-14 14:41:03,167 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:03,181 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744638058 HTTP/1.1" 200 15
2025-04-14 14:41:03,181 - DEBUG - Received response: {"update":-78}

2025-04-14 14:41:18,193 - INFO - Application started.
2025-04-14 14:41:18,193 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:41:18,193 - INFO - Attempting to log in user: test
2025-04-14 14:41:18,196 - DEBUG - Loading KWallet
2025-04-14 14:41:18,196 - DEBUG - Loading SecretService
2025-04-14 14:41:18,205 - DEBUG - Loading Windows
2025-04-14 14:41:18,205 - DEBUG - Loading chainer
2025-04-14 14:41:18,205 - DEBUG - Loading libsecret
2025-04-14 14:41:18,205 - DEBUG - Loading macOS
2025-04-14 14:41:18,250 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:41:18,251 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:18,255 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 349
2025-04-14 14:41:18,265 - DEBUG - Received response
2025-04-14 14:41:18,279 - INFO - User test logged in successfully.
2025-04-14 14:41:18,279 - INFO - Starting polling for notifications.
2025-04-14 14:41:18,279 - DEBUG - Polling for notifications...
2025-04-14 14:41:18,290 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744638078 with data: None
2025-04-14 14:41:18,291 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:18,305 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744638078 HTTP/1.1" 200 14
2025-04-14 14:41:18,305 - DEBUG - Received response: {"update":-4}

2025-04-14 14:41:18,442 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:41:18,443 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:18,459 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 58
2025-04-14 14:41:18,460 - DEBUG - Received response: [{"id":1,"name":"filesh.sh"},{"id":2,"name":"ioSono.py"}]

2025-04-14 14:41:19,373 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:41:19,374 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:19,390 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:41:19,390 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:41:19,900 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-14 14:41:19,900 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:19,912 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 224
2025-04-14 14:41:19,953 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:41:19 GMT","log":"Errore nell'esecuzione del plugin Bash: Command 'bash /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/filesh.sh' returned non-zero exit status 2.","status":"finished"}

2025-04-14 14:41:23,311 - DEBUG - Polling for notifications...
2025-04-14 14:41:23,323 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744638078 with data: None
2025-04-14 14:41:23,323 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:23,337 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744638078 HTTP/1.1" 200 14
2025-04-14 14:41:23,338 - DEBUG - Received response: {"update":-4}

2025-04-14 14:41:26,223 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-14 14:41:26,223 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:26,238 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 31
2025-04-14 14:41:26,238 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:41:27,538 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/1 with data: None
2025-04-14 14:41:27,539 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:27,557 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/1 HTTP/1.1" 200 3
2025-04-14 14:41:27,558 - DEBUG - Received response: 200
2025-04-14 14:41:27,568 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:41:27,569 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:27,583 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 30
2025-04-14 14:41:27,583 - DEBUG - Received response: [{"id":2,"name":"ioSono.py"}]

2025-04-14 14:41:28,343 - DEBUG - Polling for notifications...
2025-04-14 14:41:28,355 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744638088 with data: None
2025-04-14 14:41:28,356 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:28,370 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744638088 HTTP/1.1" 200 15
2025-04-14 14:41:28,370 - DEBUG - Received response: {"update":-14}

2025-04-14 14:41:32,349 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    echo "Hello, World! $msg"\n}\n\nexecute()\n', 'name': 'hello.sh'}
2025-04-14 14:41:32,350 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:32,359 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 43
2025-04-14 14:41:32,369 - DEBUG - Received response: {"message":"Plugin uploaded successfully"}

2025-04-14 14:41:32,369 - ERROR - Error 201: {"message":"Plugin uploaded successfully"}

2025-04-14 14:41:32,379 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:41:32,380 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:32,394 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 57
2025-04-14 14:41:32,394 - DEBUG - Received response: [{"id":2,"name":"ioSono.py"},{"id":3,"name":"hello.sh"}]

2025-04-14 14:41:32,411 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:41:32,412 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:32,426 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 57
2025-04-14 14:41:32,426 - DEBUG - Received response: [{"id":2,"name":"ioSono.py"},{"id":3,"name":"hello.sh"}]

2025-04-14 14:41:32,442 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:41:32,442 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:32,456 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 57
2025-04-14 14:41:32,457 - DEBUG - Received response: [{"id":2,"name":"ioSono.py"},{"id":3,"name":"hello.sh"}]

2025-04-14 14:41:33,070 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-14 14:41:33,070 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:33,085 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 31
2025-04-14 14:41:33,085 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:41:33,375 - DEBUG - Polling for notifications...
2025-04-14 14:41:33,387 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744638092 with data: None
2025-04-14 14:41:33,388 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:33,402 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744638092 HTTP/1.1" 200 13
2025-04-14 14:41:33,402 - DEBUG - Received response: {"update":0}

2025-04-14 14:41:33,847 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-14 14:41:33,848 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:41:33,858 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 223
2025-04-14 14:41:33,899 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:41:33 GMT","log":"Errore nell'esecuzione del plugin Bash: Command 'bash /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.","status":"finished"}

2025-04-14 14:42:07,526 - INFO - Application started.
2025-04-14 14:42:07,526 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:42:07,526 - INFO - Attempting to log in user: test
2025-04-14 14:42:07,529 - DEBUG - Loading KWallet
2025-04-14 14:42:07,529 - DEBUG - Loading SecretService
2025-04-14 14:42:07,538 - DEBUG - Loading Windows
2025-04-14 14:42:07,538 - DEBUG - Loading chainer
2025-04-14 14:42:07,538 - DEBUG - Loading libsecret
2025-04-14 14:42:07,538 - DEBUG - Loading macOS
2025-04-14 14:42:07,582 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:42:07,584 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:07,588 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 349
2025-04-14 14:42:07,598 - DEBUG - Received response
2025-04-14 14:42:07,611 - INFO - User test logged in successfully.
2025-04-14 14:42:07,612 - INFO - Starting polling for notifications.
2025-04-14 14:42:07,612 - DEBUG - Polling for notifications...
2025-04-14 14:42:07,621 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744638128 with data: None
2025-04-14 14:42:07,622 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:07,636 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744638128 HTTP/1.1" 200 14
2025-04-14 14:42:07,636 - DEBUG - Received response: {"update":-8}

2025-04-14 14:42:07,771 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:42:07,772 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:07,788 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 57
2025-04-14 14:42:07,788 - DEBUG - Received response: [{"id":2,"name":"ioSono.py"},{"id":3,"name":"hello.sh"}]

2025-04-14 14:42:08,808 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:42:08,809 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:08,824 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:42:08,824 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:42:09,201 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-14 14:42:09,202 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:09,217 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 31
2025-04-14 14:42:09,217 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:42:09,779 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-14 14:42:09,779 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:09,791 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 223
2025-04-14 14:42:09,832 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:42:09 GMT","log":"Errore nell'esecuzione del plugin Bash: Command 'bash /home/bt/Documents/GitHub/PlugInk/ServerSide/plugins/hello.sh' returned non-zero exit status 2.","status":"finished"}

2025-04-14 14:42:12,638 - DEBUG - Polling for notifications...
2025-04-14 14:42:12,650 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744638128 with data: None
2025-04-14 14:42:12,651 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:12,665 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744638128 HTTP/1.1" 200 14
2025-04-14 14:42:12,665 - DEBUG - Received response: {"update":-8}

2025-04-14 14:42:15,370 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-14 14:42:15,371 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:15,387 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 31
2025-04-14 14:42:15,387 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:42:15,991 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-14 14:42:15,992 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:15,999 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 96
2025-04-14 14:42:16,040 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:42:15 GMT","log":"Io sono stato caricato","status":"finished"}

2025-04-14 14:42:17,670 - DEBUG - Polling for notifications...
2025-04-14 14:42:17,683 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744638128 with data: None
2025-04-14 14:42:17,684 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:17,697 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744638128 HTTP/1.1" 200 14
2025-04-14 14:42:17,698 - DEBUG - Received response: {"update":-8}

2025-04-14 14:42:45,450 - INFO - Application started.
2025-04-14 14:42:45,450 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-14 14:42:45,450 - INFO - Attempting to log in user: test
2025-04-14 14:42:45,453 - DEBUG - Loading KWallet
2025-04-14 14:42:45,454 - DEBUG - Loading SecretService
2025-04-14 14:42:45,462 - DEBUG - Loading Windows
2025-04-14 14:42:45,463 - DEBUG - Loading chainer
2025-04-14 14:42:45,463 - DEBUG - Loading libsecret
2025-04-14 14:42:45,463 - DEBUG - Loading macOS
2025-04-14 14:42:45,508 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-14 14:42:45,509 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:45,512 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 349
2025-04-14 14:42:45,522 - DEBUG - Received response
2025-04-14 14:42:45,536 - INFO - User test logged in successfully.
2025-04-14 14:42:45,536 - INFO - Starting polling for notifications.
2025-04-14 14:42:45,536 - DEBUG - Polling for notifications...
2025-04-14 14:42:45,547 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744638165 with data: None
2025-04-14 14:42:45,548 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:45,561 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744638165 HTTP/1.1" 200 15
2025-04-14 14:42:45,562 - DEBUG - Received response: {"update":-45}

2025-04-14 14:42:45,703 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:42:45,704 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:45,718 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 57
2025-04-14 14:42:45,718 - DEBUG - Received response: [{"id":2,"name":"ioSono.py"},{"id":3,"name":"hello.sh"}]

2025-04-14 14:42:46,924 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-14 14:42:46,925 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:46,939 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 31
2025-04-14 14:42:46,940 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:42:48,165 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-14 14:42:48,166 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:48,177 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 90
2025-04-14 14:42:48,218 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:42:48 GMT","log":"Hello, World! \n","status":"finished"}

2025-04-14 14:42:49,988 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-14 14:42:49,989 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:50,004 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 31
2025-04-14 14:42:50,005 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:42:50,567 - DEBUG - Polling for notifications...
2025-04-14 14:42:50,582 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744638166 with data: None
2025-04-14 14:42:50,583 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:50,588 - DEBUG - Sending GET request to https://127.0.0.1:5000/remove_plugin/3 with data: None
2025-04-14 14:42:50,588 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:50,599 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744638166 HTTP/1.1" 200 15
2025-04-14 14:42:50,599 - DEBUG - Received response: {"update":-46}

2025-04-14 14:42:50,606 - DEBUG - https://127.0.0.1:5000 "GET /remove_plugin/3 HTTP/1.1" 200 3
2025-04-14 14:42:50,606 - DEBUG - Received response: 200
2025-04-14 14:42:50,616 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:42:50,616 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:50,630 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 30
2025-04-14 14:42:50,631 - DEBUG - Received response: [{"id":2,"name":"ioSono.py"}]

2025-04-14 14:42:55,304 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': '#!/bin/bash\n\n# Declare a variable to hold the parameter\nmessage="Custom message"\n\n# Function to set the parameter\nset_param() {\n    message="$1"\n}\n\n# Function to get the parameter\nget_param() {\n    echo "$message"\n}\n\n# Function to execute the main action\nexecute() {\n    echo "Hello, World! $msg"\n}\n\nexecute\n', 'name': 'hello.sh'}
2025-04-14 14:42:55,304 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:55,312 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 201 43
2025-04-14 14:42:55,323 - DEBUG - Received response: {"message":"Plugin uploaded successfully"}

2025-04-14 14:42:55,323 - ERROR - Error 201: {"message":"Plugin uploaded successfully"}

2025-04-14 14:42:55,333 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:42:55,333 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:55,347 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 57
2025-04-14 14:42:55,348 - DEBUG - Received response: [{"id":2,"name":"ioSono.py"},{"id":3,"name":"hello.sh"}]

2025-04-14 14:42:55,364 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:42:55,364 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:55,378 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 57
2025-04-14 14:42:55,379 - DEBUG - Received response: [{"id":2,"name":"ioSono.py"},{"id":3,"name":"hello.sh"}]

2025-04-14 14:42:55,394 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-14 14:42:55,395 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:55,409 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 57
2025-04-14 14:42:55,409 - DEBUG - Received response: [{"id":2,"name":"ioSono.py"},{"id":3,"name":"hello.sh"}]

2025-04-14 14:42:55,605 - DEBUG - Polling for notifications...
2025-04-14 14:42:55,617 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744638175 with data: None
2025-04-14 14:42:55,618 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:55,631 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744638175 HTTP/1.1" 200 13
2025-04-14 14:42:55,632 - DEBUG - Received response: {"update":0}

2025-04-14 14:42:55,742 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-04-14 14:42:55,743 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:55,757 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 31
2025-04-14 14:42:55,758 - DEBUG - Received response: {"description":"","params":""}

2025-04-14 14:42:56,476 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-04-14 14:42:56,476 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-14 14:42:56,485 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 90
2025-04-14 14:42:56,527 - DEBUG - Received response: {"datetime":"Mon, 14 Apr 2025 14:42:56 GMT","log":"Hello, World! \n","status":"finished"}

