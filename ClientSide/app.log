
2025-02-13 12:01:28,444 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-13 12:01:28,445 - INFO - Attempting to log in user: test
2025-02-13 12:01:28,456 - DEBUG - Loading KWallet
2025-02-13 12:01:28,458 - DEBUG - Loading SecretService
2025-02-13 12:01:28,486 - DEBUG - Loading Windows
2025-02-13 12:01:28,488 - DEBUG - Loading chainer
2025-02-13 12:01:28,489 - DEBUG - Loading libsecret
2025-02-13 12:01:28,490 - DEBUG - Loading macOS
2025-02-13 12:01:28,627 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-13 12:01:28,631 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 12:01:28,641 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-13 12:01:28,651 - DEBUG - Received response
2025-02-13 12:01:28,705 - INFO - User test logged in successfully.
2025-02-13 12:01:28,706 - INFO - Starting polling for notifications.
2025-02-13 12:01:28,706 - DEBUG - Polling for notifications...
2025-02-13 12:01:28,747 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739444488 with data: None
2025-02-13 12:01:28,750 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 12:01:28,784 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739444488 HTTP/1.1" 200 21
2025-02-13 12:01:28,785 - DEBUG - Received response: {
  "update": -577
}

2025-02-13 12:01:28,786 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-13 12:01:28,788 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 12:01:28,809 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 677
2025-02-13 12:01:28,810 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "main.py"
  },
  {
    "id": 4,
    "name": "core.py"
  },
  {
    "id": 5,
    "name": "main_window.py"
  },
  {
    "id": 6,
    "name": "updater.py"
  },
  {
    "id": 7,
    "name": "plugin_loader.py"
  },
  {
    "id": 8,
    "name": "base.py"
  },
  {
    "id": 9,
    "name": "_termui_impl.py"
  },
  {
    "id": 10,
    "name": "decorators.py"
  },
  {
    "id": 11,
    "name": "script.py"
  },
  {
    "id": 12,
    "name": "script2.py"
  },
  {
    "id": 13,
    "name": "script3.py"
  },
  {
    "id": 14,
    "name": "script4.py"
  }
]

2025-02-13 12:01:31,100 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/12 with data: None
2025-02-13 12:01:31,101 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 12:01:31,122 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/12 HTTP/1.1" 200 40
2025-02-13 12:01:31,123 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-13 12:01:32,020 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/12 with data: {}
2025-02-13 12:01:32,023 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 12:01:32,038 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/12 HTTP/1.1" 200 85
2025-02-13 12:01:32,078 - DEBUG - Received response: {
  "datetime": "2025-02-13 12:01:32",
  "log": "Potassio",
  "status": "finished"
}

2025-02-13 12:01:33,791 - DEBUG - Polling for notifications...
2025-02-13 12:01:33,826 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739444489 with data: None
2025-02-13 12:01:33,829 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 12:01:33,848 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739444489 HTTP/1.1" 200 21
2025-02-13 12:01:33,849 - DEBUG - Received response: {
  "update": -578
}

2025-02-13 18:24:24,023 - INFO - Application started.
2025-02-13 18:24:24,027 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-13 18:24:24,027 - INFO - Attempting to log in user: test
2025-02-13 18:24:24,046 - DEBUG - Loading KWallet
2025-02-13 18:24:24,047 - DEBUG - Loading SecretService
2025-02-13 18:24:24,111 - DEBUG - Loading Windows
2025-02-13 18:24:24,113 - DEBUG - Loading chainer
2025-02-13 18:24:24,114 - DEBUG - Loading libsecret
2025-02-13 18:24:24,115 - DEBUG - Loading macOS
2025-02-13 18:24:24,283 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-13 18:24:24,287 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:24,309 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-13 18:24:24,310 - DEBUG - Received response
2025-02-13 18:24:24,352 - INFO - User test logged in successfully.
2025-02-13 18:24:24,353 - INFO - Starting polling for notifications.
2025-02-13 18:24:24,353 - DEBUG - Polling for notifications...
2025-02-13 18:24:24,390 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739467464 with data: None
2025-02-13 18:24:24,392 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:24,427 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739467464 HTTP/1.1" 200 20
2025-02-13 18:24:24,428 - DEBUG - Received response: {
  "update": -32
}

2025-02-13 18:24:24,429 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-13 18:24:24,431 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:24,458 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-13 18:24:24,459 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-13 18:24:27,324 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-13 18:24:27,326 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:27,349 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-13 18:24:27,350 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-13 18:24:28,439 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-13 18:24:28,440 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:28,488 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 15787
2025-02-13 18:24:28,489 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "i7Swaa2MNdZjOrz1Ckf4";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137722649151744">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137722638590896">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137722638591008">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137722638591120">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137722638591232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137722638591344">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137722638591456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137722638597616">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given


-->

2025-02-13 18:24:28,489 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "i7Swaa2MNdZjOrz1Ckf4";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137722649151744">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137722638590896">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137722638591008">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137722638591120">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137722638591232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137722638591344">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137722638591456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137722638597616">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given


-->

2025-02-13 18:24:29,434 - DEBUG - Polling for notifications...
2025-02-13 18:24:29,470 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739467464 with data: None
2025-02-13 18:24:29,471 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:29,491 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739467464 HTTP/1.1" 200 20
2025-02-13 18:24:29,492 - DEBUG - Received response: {
  "update": -32
}

2025-02-13 18:24:34,497 - DEBUG - Polling for notifications...
2025-02-13 18:24:34,534 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739467464 with data: None
2025-02-13 18:24:34,536 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:34,555 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739467464 HTTP/1.1" 200 20
2025-02-13 18:24:34,556 - DEBUG - Received response: {
  "update": -32
}

2025-02-13 18:24:35,783 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-13 18:24:35,785 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:35,806 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-13 18:24:35,807 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-13 18:24:36,857 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-13 18:24:36,859 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:36,874 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 500 15787
2025-02-13 18:24:36,914 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "i7Swaa2MNdZjOrz1Ckf4";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137722638668672">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137722638669456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137722638668784">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137722638668336">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137722638669344">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137722638669792">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137722638668896">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137722638669232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given


-->

2025-02-13 18:24:36,915 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "i7Swaa2MNdZjOrz1Ckf4";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137722638668672">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137722638669456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137722638668784">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137722638668336">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137722638669344">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137722638669792">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137722638668896">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137722638669232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given


-->

2025-02-13 18:24:39,561 - DEBUG - Polling for notifications...
2025-02-13 18:24:39,599 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739467464 with data: None
2025-02-13 18:24:39,600 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:39,619 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739467464 HTTP/1.1" 200 20
2025-02-13 18:24:39,620 - DEBUG - Received response: {
  "update": -32
}

2025-02-13 18:24:44,626 - DEBUG - Polling for notifications...
2025-02-13 18:24:44,662 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739467464 with data: None
2025-02-13 18:24:44,663 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-13 18:24:44,682 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739467464 HTTP/1.1" 200 20
2025-02-13 18:24:44,683 - DEBUG - Received response: {
  "update": -32
}

2025-02-14 08:08:50,157 - INFO - Application started.
2025-02-14 08:08:50,161 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:08:50,162 - INFO - Attempting to log in user: test
2025-02-14 08:08:50,174 - DEBUG - Loading KWallet
2025-02-14 08:08:50,176 - DEBUG - Loading SecretService
2025-02-14 08:08:50,226 - DEBUG - Loading Windows
2025-02-14 08:08:50,227 - DEBUG - Loading chainer
2025-02-14 08:08:50,228 - DEBUG - Loading libsecret
2025-02-14 08:08:50,229 - DEBUG - Loading macOS
2025-02-14 08:08:50,387 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:08:50,392 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:08:50,403 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:08:50,414 - DEBUG - Received response
2025-02-14 08:08:50,455 - INFO - User test logged in successfully.
2025-02-14 08:08:50,455 - INFO - Starting polling for notifications.
2025-02-14 08:08:50,456 - DEBUG - Polling for notifications...
2025-02-14 08:08:50,496 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739516930 with data: None
2025-02-14 08:08:50,499 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:08:50,534 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739516930 HTTP/1.1" 200 20
2025-02-14 08:08:50,535 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:08:50,536 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:08:50,538 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:08:50,566 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:08:50,567 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:08:52,350 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:08:52,351 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:08:52,376 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 08:08:52,376 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:08:53,535 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:08:53,537 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:08:53,559 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 15787
2025-02-14 08:08:53,600 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Z20za28vqbOkWXn1vsFJ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137215691049216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137215689597872">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137215689597984">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137215689598096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137215689598208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137215689598320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137215689598432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137215689604592">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given


-->

2025-02-14 08:08:53,601 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Z20za28vqbOkWXn1vsFJ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137215691049216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137215689597872">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137215689597984">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137215689598096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137215689598208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137215689598320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137215689598432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137215689604592">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
TypeError: avvia_plugin() takes 1 positional argument but 2 were given


-->

2025-02-14 08:08:55,541 - DEBUG - Polling for notifications...
2025-02-14 08:08:55,576 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739516931 with data: None
2025-02-14 08:08:55,577 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:08:55,596 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739516931 HTTP/1.1" 200 20
2025-02-14 08:08:55,597 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:15:13,052 - INFO - Application started.
2025-02-14 08:15:13,052 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:15:13,052 - INFO - Attempting to log in user: test
2025-02-14 08:15:13,061 - DEBUG - Loading KWallet
2025-02-14 08:15:13,063 - DEBUG - Loading SecretService
2025-02-14 08:15:13,087 - DEBUG - Loading Windows
2025-02-14 08:15:13,088 - DEBUG - Loading chainer
2025-02-14 08:15:13,089 - DEBUG - Loading libsecret
2025-02-14 08:15:13,090 - DEBUG - Loading macOS
2025-02-14 08:15:13,236 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:15:13,241 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:13,254 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:15:13,265 - DEBUG - Received response
2025-02-14 08:15:13,318 - INFO - User test logged in successfully.
2025-02-14 08:15:13,319 - INFO - Starting polling for notifications.
2025-02-14 08:15:13,319 - DEBUG - Polling for notifications...
2025-02-14 08:15:13,362 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:13,364 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:13,403 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517313 HTTP/1.1" 200 20
2025-02-14 08:15:13,405 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:15:13,406 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:15:13,409 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:13,438 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:15:13,439 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:15:15,103 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:15:15,105 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:15,128 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 08:15:15,129 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:15:16,199 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:15:16,201 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:16,248 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 19758
2025-02-14 08:15:16,249 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;nome_plugin&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "YZk0efmzLUFHgVO7WK5B";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;nome_plugin&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-123313041986656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">31</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>print(&#34;Errore: impossibile rinominare il nome del file&#34;)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line after"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-123313043344064">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-123313041909104">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-123313041909216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-123313041909328">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-123313041909440">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-123313041909552">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-123313041909664">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-123313041981504">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-123313041985648">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin, &#39;datetime&#39;: datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;nome_plugin&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 31, in avvia_plugin
    modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)
NameError: name &#39;nome_plugin&#39; is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin, &#39;datetime&#39;: datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
NameError: name &#39;nome_plugin&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 31, in avvia_plugin
    modulo = importlib.import_module('plugins.'+nome_plugin)
NameError: name 'nome_plugin' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin, 'datetime': datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
NameError: name 'nome_plugin' is not defined


-->

2025-02-14 08:15:16,250 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;nome_plugin&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "YZk0efmzLUFHgVO7WK5B";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;nome_plugin&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-123313041986656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">31</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>print(&#34;Errore: impossibile rinominare il nome del file&#34;)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line after"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-123313043344064">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-123313041909104">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-123313041909216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-123313041909328">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-123313041909440">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-123313041909552">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-123313041909664">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-123313041981504">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-123313041985648">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin, &#39;datetime&#39;: datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;nome_plugin&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 31, in avvia_plugin
    modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)
NameError: name &#39;nome_plugin&#39; is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin, &#39;datetime&#39;: datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
NameError: name &#39;nome_plugin&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 31, in avvia_plugin
    modulo = importlib.import_module('plugins.'+nome_plugin)
NameError: name 'nome_plugin' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin, 'datetime': datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
NameError: name 'nome_plugin' is not defined


-->

2025-02-14 08:15:18,411 - DEBUG - Polling for notifications...
2025-02-14 08:15:18,447 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:18,449 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:18,468 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517313 HTTP/1.1" 200 20
2025-02-14 08:15:18,469 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:15:23,475 - DEBUG - Polling for notifications...
2025-02-14 08:15:23,511 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:23,513 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:23,532 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517313 HTTP/1.1" 200 20
2025-02-14 08:15:23,533 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:15:28,539 - DEBUG - Polling for notifications...
2025-02-14 08:15:28,580 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:28,583 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:28,603 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517313 HTTP/1.1" 200 20
2025-02-14 08:15:28,603 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:15:33,607 - DEBUG - Polling for notifications...
2025-02-14 08:15:33,643 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:33,644 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:33,663 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517313 HTTP/1.1" 200 20
2025-02-14 08:15:33,664 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:15:38,669 - DEBUG - Polling for notifications...
2025-02-14 08:15:38,705 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:38,707 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:38,727 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517313 HTTP/1.1" 200 20
2025-02-14 08:15:38,728 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:15:43,754 - DEBUG - Polling for notifications...
2025-02-14 08:15:43,793 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517313 with data: None
2025-02-14 08:15:43,795 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:15:43,996 - ERROR - Error during request: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))
2025-02-14 08:16:16,434 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:16:16,436 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:16,459 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 422 45
2025-02-14 08:16:16,460 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:16:16,460 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:16:17,869 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:16:17,871 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:17,879 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 422 45
2025-02-14 08:16:17,920 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:16:17,920 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:16:32,133 - INFO - Application started.
2025-02-14 08:16:32,133 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:16:32,134 - INFO - Attempting to log in user: test
2025-02-14 08:16:32,144 - DEBUG - Loading KWallet
2025-02-14 08:16:32,145 - DEBUG - Loading SecretService
2025-02-14 08:16:32,172 - DEBUG - Loading Windows
2025-02-14 08:16:32,173 - DEBUG - Loading chainer
2025-02-14 08:16:32,174 - DEBUG - Loading libsecret
2025-02-14 08:16:32,175 - DEBUG - Loading macOS
2025-02-14 08:16:32,315 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:16:32,319 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:32,329 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:16:32,339 - DEBUG - Received response
2025-02-14 08:16:32,384 - INFO - User test logged in successfully.
2025-02-14 08:16:32,385 - INFO - Starting polling for notifications.
2025-02-14 08:16:32,385 - DEBUG - Polling for notifications...
2025-02-14 08:16:32,423 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517392 with data: None
2025-02-14 08:16:32,425 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:32,461 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517392 HTTP/1.1" 200 20
2025-02-14 08:16:32,462 - DEBUG - Received response: {
  "update": -16
}

2025-02-14 08:16:32,463 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:16:32,465 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:32,492 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:16:32,493 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:16:34,845 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:16:34,847 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:34,871 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 08:16:34,872 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:16:35,861 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:16:35,863 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:35,910 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 19697
2025-02-14 08:16:35,911 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;datetime&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "xevwUq3FXdwu0NEkcdMm";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;datetime&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-128806758159568">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-128806759549072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-128806758082016">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-128806758082128">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-128806758082240">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-128806758082352">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-128806758082464">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-128806758082576">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-128806758154416">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-128806758158560">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;datetime&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.pluginEs&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
NameError: name &#39;datetime&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.pluginEs' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
NameError: name 'datetime' is not defined


-->

2025-02-14 08:16:35,912 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;datetime&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "xevwUq3FXdwu0NEkcdMm";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;datetime&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-128806758159568">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-128806759549072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-128806758082016">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-128806758082128">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-128806758082240">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-128806758082352">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-128806758082464">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-128806758082576">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-128806758154416">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-128806758158560">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;datetime&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.pluginEs&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
NameError: name &#39;datetime&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.pluginEs' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
NameError: name 'datetime' is not defined


-->

2025-02-14 08:16:37,468 - DEBUG - Polling for notifications...
2025-02-14 08:16:37,504 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517392 with data: None
2025-02-14 08:16:37,506 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:16:37,527 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517392 HTTP/1.1" 200 20
2025-02-14 08:16:37,528 - DEBUG - Received response: {
  "update": -16
}

2025-02-14 08:17:01,506 - INFO - Application started.
2025-02-14 08:17:01,506 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:17:01,506 - INFO - Attempting to log in user: test
2025-02-14 08:17:01,515 - DEBUG - Loading KWallet
2025-02-14 08:17:01,517 - DEBUG - Loading SecretService
2025-02-14 08:17:01,540 - DEBUG - Loading Windows
2025-02-14 08:17:01,542 - DEBUG - Loading chainer
2025-02-14 08:17:01,543 - DEBUG - Loading libsecret
2025-02-14 08:17:01,544 - DEBUG - Loading macOS
2025-02-14 08:17:01,684 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:17:01,688 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:01,700 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:17:01,710 - DEBUG - Received response
2025-02-14 08:17:01,754 - INFO - User test logged in successfully.
2025-02-14 08:17:01,755 - INFO - Starting polling for notifications.
2025-02-14 08:17:01,755 - DEBUG - Polling for notifications...
2025-02-14 08:17:01,798 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517422 with data: None
2025-02-14 08:17:01,800 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:01,834 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517422 HTTP/1.1" 200 20
2025-02-14 08:17:01,835 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:17:01,836 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:17:01,838 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:01,865 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:17:01,866 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:17:03,541 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 08:17:03,543 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:03,566 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 08:17:03,567 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:17:04,825 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:17:04,827 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:04,851 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 19811
2025-02-14 08:17:04,891 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123073856">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056133540096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056122996304">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056122996416">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056122996528">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056122996640">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056122996752">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056122996864">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123068704">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123072848">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:04,892 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123073856">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056133540096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056122996304">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056122996416">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056122996528">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056122996640">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056122996752">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056122996864">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123068704">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123072848">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:05,791 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:17:05,793 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:05,840 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 19811
2025-02-14 08:17:05,841 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123076320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056123076208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056123076096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056123075872">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056123075536">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056123075648">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056123075312">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056123074976">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123073968">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123075984">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:05,842 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123076320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056123076208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056123076096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056123075872">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056123075536">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056123075648">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056123075312">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056123074976">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123073968">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123075984">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:06,819 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:17:06,821 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:06,839 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 19811
2025-02-14 08:17:06,840 - DEBUG - Polling for notifications...
2025-02-14 08:17:06,877 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517422 with data: None
2025-02-14 08:17:06,879 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:06,880 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123077552">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056123077440">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056123077328">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056123077104">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056123076768">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056123076880">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056123076544">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056123075088">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123075424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123077216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:06,881 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123077552">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056123077440">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056123077328">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056123077104">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056123076768">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056123076880">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056123076544">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056123075088">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123075424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123077216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:06,900 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517422 HTTP/1.1" 200 20
2025-02-14 08:17:06,900 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:17:09,503 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:17:09,505 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:09,522 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 19811
2025-02-14 08:17:09,562 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123078000">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056123077888">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056123076656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056123077664">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056123076432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056123078112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056123078448">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056123078672">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123077776">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123078224">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:09,563 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "W5kU8W9H6ZlTMRK8NdpY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-127056123078000">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def avvia_plugin(nome_plugin, vet_param): #funzione del diagramma richiesta per avviare il plugin</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line before"><span class="ws">        </span>modulo = importlib.import_module(&#39;plugins.&#39;+nome_plugin)</pre>
<pre class="line current"><span class="ws">        </span>modulo.set_param(vet_param)</pre>
<pre class="line after"><span class="ws">        </span>res = {}</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line after"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line after"><span class="ws">        </span>return res</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-127056123077888">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-127056123076656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-127056123077664">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-127056123076432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-127056123078112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-127056123078448">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-127056123078672">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123077776">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">180</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line current"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-127056123078224">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">avvia_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>res[&#39;log&#39;] = (modulo.execute())</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;status&#39;] = &#39;finished&#39;</pre>
<pre class="line before"><span class="ws">        </span>res[&#39;datetime&#39;] = datetime.now()</pre>
<pre class="line before"><span class="ws">        </span>return res</pre>
<pre class="line before"><span class="ws">    </span>except:</pre>
<pre class="line current"><span class="ws">        </span>return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>#aggiungo l&#39;estensione se il nome file non la ha</pre></div>
</div>
</ul>
  <blockquote>AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module &#39;plugins.newPlugin&#39; has no attribute &#39;set_param&#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 39, in avvia_plugin
    return {&#39;status&#39;:&#39;Error&#39;, &#39;log&#39;: &#39;Error during the execution of the plugin: &#39;+nome_plugin+ &#39; datetime: &#39;+ datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}
AttributeError: module &#39;datetime&#39; has no attribute &#39;now&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 32, in avvia_plugin
    modulo.set_param(vet_param)
AttributeError: module 'plugins.newPlugin' has no attribute 'set_param'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 180, in plug_table_details
    result = avvia_plugin(plugin.name[:-3],parametri)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 39, in avvia_plugin
    return {'status':'Error', 'log': 'Error during the execution of the plugin: '+nome_plugin+ ' datetime: '+ datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
AttributeError: module 'datetime' has no attribute 'now'


-->

2025-02-14 08:17:11,906 - DEBUG - Polling for notifications...
2025-02-14 08:17:11,944 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517422 with data: None
2025-02-14 08:17:11,945 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:11,965 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517422 HTTP/1.1" 200 20
2025-02-14 08:17:11,966 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:17:16,970 - DEBUG - Polling for notifications...
2025-02-14 08:17:17,007 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517422 with data: None
2025-02-14 08:17:17,009 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:17,029 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517422 HTTP/1.1" 200 20
2025-02-14 08:17:17,030 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:17:22,055 - DEBUG - Polling for notifications...
2025-02-14 08:17:22,101 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517422 with data: None
2025-02-14 08:17:22,103 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:22,339 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517422 HTTP/1.1" 422 45
2025-02-14 08:17:22,341 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:17:22,341 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:17:41,226 - INFO - Application started.
2025-02-14 08:17:41,226 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:17:41,226 - INFO - Attempting to log in user: test
2025-02-14 08:17:41,235 - DEBUG - Loading KWallet
2025-02-14 08:17:41,236 - DEBUG - Loading SecretService
2025-02-14 08:17:41,264 - DEBUG - Loading Windows
2025-02-14 08:17:41,266 - DEBUG - Loading chainer
2025-02-14 08:17:41,267 - DEBUG - Loading libsecret
2025-02-14 08:17:41,268 - DEBUG - Loading macOS
2025-02-14 08:17:41,408 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:17:41,412 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:41,426 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:17:41,436 - DEBUG - Received response
2025-02-14 08:17:41,484 - INFO - User test logged in successfully.
2025-02-14 08:17:41,484 - INFO - Starting polling for notifications.
2025-02-14 08:17:41,485 - DEBUG - Polling for notifications...
2025-02-14 08:17:41,523 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517461 with data: None
2025-02-14 08:17:41,526 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:41,559 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517461 HTTP/1.1" 200 20
2025-02-14 08:17:41,561 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:17:41,561 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:17:41,563 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:41,591 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:17:41,592 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:17:42,832 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:17:42,833 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:42,857 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 08:17:42,858 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:17:43,951 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:17:43,953 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:44,000 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17204
2025-02-14 08:17:44,001 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;datetime&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "mviurktM35L8IDtmOhGL";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;datetime&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139013449434384">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139013448000880">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139013448000992">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139013448001104">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-139013448001216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139013448001328">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139013448001440">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139013448073280">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-139013448077424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">211</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if log_entries is None or not log_entries:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404&#34;</pre>
<pre class="line before"><span class="ws">    </span>return jsonify([log_entries.logList()])</pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line current"><span class="ws">    </span>print(type(result[&#39;datetime&#39;]))</pre>
<pre class="line after"><span class="ws">    </span>print(type(datetime.datetime.fromisoformat(result[&#39;datetime&#39;])))</pre>
<pre class="line after"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line after"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;datetime&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 181, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 211, in logUpdate
    print(type(result[&#39;datetime&#39;]))
KeyError: &#39;datetime&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 181, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 211, in logUpdate
    print(type(result['datetime']))
KeyError: 'datetime'


-->

2025-02-14 08:17:44,001 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;datetime&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "mviurktM35L8IDtmOhGL";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;datetime&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139013449434384">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139013448000880">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139013448000992">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139013448001104">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-139013448001216">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139013448001328">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139013448001440">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139013448073280">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-139013448077424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">211</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if log_entries is None or not log_entries:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404&#34;</pre>
<pre class="line before"><span class="ws">    </span>return jsonify([log_entries.logList()])</pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line current"><span class="ws">    </span>print(type(result[&#39;datetime&#39;]))</pre>
<pre class="line after"><span class="ws">    </span>print(type(datetime.datetime.fromisoformat(result[&#39;datetime&#39;])))</pre>
<pre class="line after"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line after"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;datetime&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 181, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 211, in logUpdate
    print(type(result[&#39;datetime&#39;]))
KeyError: &#39;datetime&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 181, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 211, in logUpdate
    print(type(result['datetime']))
KeyError: 'datetime'


-->

2025-02-14 08:17:46,568 - DEBUG - Polling for notifications...
2025-02-14 08:17:46,605 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517462 with data: None
2025-02-14 08:17:46,607 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:46,626 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517462 HTTP/1.1" 200 20
2025-02-14 08:17:46,627 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:17:51,633 - DEBUG - Polling for notifications...
2025-02-14 08:17:51,670 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517462 with data: None
2025-02-14 08:17:51,672 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:17:51,691 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517462 HTTP/1.1" 200 20
2025-02-14 08:17:51,692 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 08:19:57,508 - INFO - Application started.
2025-02-14 08:19:57,508 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:19:57,508 - INFO - Attempting to log in user: test
2025-02-14 08:19:57,518 - DEBUG - Loading KWallet
2025-02-14 08:19:57,519 - DEBUG - Loading SecretService
2025-02-14 08:19:57,545 - DEBUG - Loading Windows
2025-02-14 08:19:57,547 - DEBUG - Loading chainer
2025-02-14 08:19:57,548 - DEBUG - Loading libsecret
2025-02-14 08:19:57,549 - DEBUG - Loading macOS
2025-02-14 08:19:57,690 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:19:57,694 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:19:57,707 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:19:57,717 - DEBUG - Received response
2025-02-14 08:19:57,765 - INFO - User test logged in successfully.
2025-02-14 08:19:57,766 - INFO - Starting polling for notifications.
2025-02-14 08:19:57,766 - DEBUG - Polling for notifications...
2025-02-14 08:19:57,804 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:19:57,806 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:19:57,827 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:19:57,831 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:19:57,863 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:19:57,866 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:19:57,894 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:19:57,895 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:19:59,264 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 08:19:59,266 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:19:59,290 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 08:19:59,291 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:20:00,332 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:20:00,334 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:00,381 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17204
2025-02-14 08:20:00,382 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;datetime&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Z7mXIe8Y6Gl86au5sLJ5";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;datetime&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-131798339520096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-131798328944096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-131798328944208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-131798328944320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-131798328944432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-131798328944544">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-131798328944656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-131798329016496">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-131798329020640">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">211</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if log_entries is None or not log_entries:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404&#34;</pre>
<pre class="line before"><span class="ws">    </span>return jsonify([log_entries.logList()])</pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line current"><span class="ws">    </span>print(type(result[&#39;datetime&#39;]))</pre>
<pre class="line after"><span class="ws">    </span>print(type(datetime.datetime.fromisoformat(result[&#39;datetime&#39;])))</pre>
<pre class="line after"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line after"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;datetime&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 181, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 211, in logUpdate
    print(type(result[&#39;datetime&#39;]))
KeyError: &#39;datetime&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 181, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 211, in logUpdate
    print(type(result['datetime']))
KeyError: 'datetime'


-->

2025-02-14 08:20:00,383 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;datetime&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Z7mXIe8Y6Gl86au5sLJ5";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;datetime&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-131798339520096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-131798328944096">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-131798328944208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-131798328944320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-131798328944432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-131798328944544">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-131798328944656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-131798329016496">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-131798329020640">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">211</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if log_entries is None or not log_entries:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404&#34;</pre>
<pre class="line before"><span class="ws">    </span>return jsonify([log_entries.logList()])</pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line current"><span class="ws">    </span>print(type(result[&#39;datetime&#39;]))</pre>
<pre class="line after"><span class="ws">    </span>print(type(datetime.datetime.fromisoformat(result[&#39;datetime&#39;])))</pre>
<pre class="line after"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line after"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;datetime&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 181, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 211, in logUpdate
    print(type(result[&#39;datetime&#39;]))
KeyError: &#39;datetime&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 181, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 211, in logUpdate
    print(type(result['datetime']))
KeyError: 'datetime'


-->

2025-02-14 08:20:02,845 - DEBUG - Polling for notifications...
2025-02-14 08:20:02,880 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:02,882 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:02,901 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:02,902 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:07,908 - DEBUG - Polling for notifications...
2025-02-14 08:20:07,944 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:07,946 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:07,965 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:07,966 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:12,972 - DEBUG - Polling for notifications...
2025-02-14 08:20:13,006 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:13,008 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:13,027 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:13,028 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:18,033 - DEBUG - Polling for notifications...
2025-02-14 08:20:18,070 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:18,071 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:18,091 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:18,092 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:23,098 - DEBUG - Polling for notifications...
2025-02-14 08:20:23,133 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:23,136 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:23,155 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:23,156 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:28,161 - DEBUG - Polling for notifications...
2025-02-14 08:20:28,197 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:28,199 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:28,218 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:28,219 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:33,225 - DEBUG - Polling for notifications...
2025-02-14 08:20:33,261 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:33,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:33,281 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:33,282 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:38,288 - DEBUG - Polling for notifications...
2025-02-14 08:20:38,324 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:38,326 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:38,344 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:38,345 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:43,351 - DEBUG - Polling for notifications...
2025-02-14 08:20:43,387 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:43,389 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:43,408 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:43,409 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:48,412 - DEBUG - Polling for notifications...
2025-02-14 08:20:48,447 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:48,449 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:48,469 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:48,470 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:53,475 - DEBUG - Polling for notifications...
2025-02-14 08:20:53,510 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:53,512 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:53,531 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:53,532 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:20:58,556 - DEBUG - Polling for notifications...
2025-02-14 08:20:58,596 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:20:58,599 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:20:58,620 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:20:58,621 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:21:03,646 - DEBUG - Polling for notifications...
2025-02-14 08:21:03,683 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:21:03,685 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:03,704 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:21:03,705 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:21:08,715 - DEBUG - Polling for notifications...
2025-02-14 08:21:08,751 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:21:08,753 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:08,772 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 200 19
2025-02-14 08:21:08,773 - DEBUG - Received response: {
  "update": -8
}

2025-02-14 08:21:13,395 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:21:13,397 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:13,419 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 422 45
2025-02-14 08:21:13,420 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:21:13,420 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:21:13,799 - DEBUG - Polling for notifications...
2025-02-14 08:21:13,836 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517598 with data: None
2025-02-14 08:21:13,837 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:13,856 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517598 HTTP/1.1" 422 45
2025-02-14 08:21:13,857 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:21:13,857 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:21:26,159 - INFO - Application started.
2025-02-14 08:21:26,159 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:21:26,159 - INFO - Attempting to log in user: test
2025-02-14 08:21:26,168 - DEBUG - Loading KWallet
2025-02-14 08:21:26,170 - DEBUG - Loading SecretService
2025-02-14 08:21:26,195 - DEBUG - Loading Windows
2025-02-14 08:21:26,196 - DEBUG - Loading chainer
2025-02-14 08:21:26,197 - DEBUG - Loading libsecret
2025-02-14 08:21:26,198 - DEBUG - Loading macOS
2025-02-14 08:21:26,332 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:21:26,336 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:26,345 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:21:26,356 - DEBUG - Received response
2025-02-14 08:21:26,401 - INFO - User test logged in successfully.
2025-02-14 08:21:26,401 - INFO - Starting polling for notifications.
2025-02-14 08:21:26,402 - DEBUG - Polling for notifications...
2025-02-14 08:21:26,438 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517686 with data: None
2025-02-14 08:21:26,440 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:26,475 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517686 HTTP/1.1" 200 20
2025-02-14 08:21:26,476 - DEBUG - Received response: {
  "update": -15
}

2025-02-14 08:21:26,477 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:21:26,479 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:26,506 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:21:26,507 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:21:27,788 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 08:21:27,790 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:27,813 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 08:21:27,814 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:21:28,932 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:21:28,934 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:28,981 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17175
2025-02-14 08:21:28,982 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;datetime&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "UxqMHdjokNOyM9d3Dafy";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;datetime&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-128761570051232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-128761568601456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-128761568601568">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-128761568601680">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-128761568601792">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-128761568601904">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-128761568602016">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-128761568673856">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-128761568678000">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">212</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404&#34;</pre>
<pre class="line before"><span class="ws">    </span>return jsonify([log_entries.logList()])</pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>print(result)</pre>
<pre class="line current"><span class="ws">    </span>print(type(result[&#39;datetime&#39;]))</pre>
<pre class="line after"><span class="ws">    </span>print(type(datetime.datetime.fromisoformat(result[&#39;datetime&#39;])))</pre>
<pre class="line after"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line after"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;datetime&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 181, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 212, in logUpdate
    print(type(result[&#39;datetime&#39;]))
KeyError: &#39;datetime&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 181, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 212, in logUpdate
    print(type(result['datetime']))
KeyError: 'datetime'


-->

2025-02-14 08:21:28,983 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;datetime&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "UxqMHdjokNOyM9d3Dafy";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;datetime&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-128761570051232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-128761568601456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-128761568601568">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-128761568601680">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-128761568601792">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-128761568601904">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-128761568602016">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-128761568673856">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name[:-3],parametri)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-128761568678000">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">212</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404&#34;</pre>
<pre class="line before"><span class="ws">    </span>return jsonify([log_entries.logList()])</pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>print(result)</pre>
<pre class="line current"><span class="ws">    </span>print(type(result[&#39;datetime&#39;]))</pre>
<pre class="line after"><span class="ws">    </span>print(type(datetime.datetime.fromisoformat(result[&#39;datetime&#39;])))</pre>
<pre class="line after"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line after"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;datetime&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 181, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 212, in logUpdate
    print(type(result[&#39;datetime&#39;]))
KeyError: &#39;datetime&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 181, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 212, in logUpdate
    print(type(result['datetime']))
KeyError: 'datetime'


-->

2025-02-14 08:21:31,482 - DEBUG - Polling for notifications...
2025-02-14 08:21:31,519 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517687 with data: None
2025-02-14 08:21:31,520 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:31,540 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517687 HTTP/1.1" 200 20
2025-02-14 08:21:31,541 - DEBUG - Received response: {
  "update": -16
}

2025-02-14 08:21:36,546 - DEBUG - Polling for notifications...
2025-02-14 08:21:36,583 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517687 with data: None
2025-02-14 08:21:36,584 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:21:36,604 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517687 HTTP/1.1" 200 20
2025-02-14 08:21:36,605 - DEBUG - Received response: {
  "update": -16
}

2025-02-14 08:21:59,942 - INFO - Application started.
2025-02-14 08:21:59,942 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:21:59,943 - INFO - Attempting to log in user: test
2025-02-14 08:21:59,953 - DEBUG - Loading KWallet
2025-02-14 08:21:59,954 - DEBUG - Loading SecretService
2025-02-14 08:21:59,978 - DEBUG - Loading Windows
2025-02-14 08:21:59,980 - DEBUG - Loading chainer
2025-02-14 08:21:59,980 - DEBUG - Loading libsecret
2025-02-14 08:21:59,981 - DEBUG - Loading macOS
2025-02-14 08:22:00,122 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:22:00,125 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:00,148 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:22:00,149 - DEBUG - Received response
2025-02-14 08:22:00,203 - INFO - User test logged in successfully.
2025-02-14 08:22:00,203 - INFO - Starting polling for notifications.
2025-02-14 08:22:00,204 - DEBUG - Polling for notifications...
2025-02-14 08:22:00,243 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:00,246 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:00,280 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 200 20
2025-02-14 08:22:00,281 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:22:00,282 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:22:00,284 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:00,312 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:22:00,313 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:22:01,456 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:22:01,458 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:01,481 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 08:22:01,482 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:22:02,357 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:22:02,359 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:02,382 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-14 08:22:02,422 - DEBUG - Received response: {
  "datetime": "2025-02-14 08:22:02",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-14 08:22:05,287 - DEBUG - Polling for notifications...
2025-02-14 08:22:05,323 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:05,324 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:05,344 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 200 20
2025-02-14 08:22:05,345 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:22:10,350 - DEBUG - Polling for notifications...
2025-02-14 08:22:10,388 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:10,390 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:10,409 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 200 20
2025-02-14 08:22:10,409 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:22:15,435 - DEBUG - Polling for notifications...
2025-02-14 08:22:15,471 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:15,473 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:15,492 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 200 20
2025-02-14 08:22:15,493 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:22:20,504 - DEBUG - Polling for notifications...
2025-02-14 08:22:20,544 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:20,547 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:20,567 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 200 20
2025-02-14 08:22:20,568 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:22:25,594 - DEBUG - Polling for notifications...
2025-02-14 08:22:25,632 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:25,634 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:25,653 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 200 20
2025-02-14 08:22:25,654 - DEBUG - Received response: {
  "update": -12
}

2025-02-14 08:22:30,680 - DEBUG - Polling for notifications...
2025-02-14 08:22:30,718 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517720 with data: None
2025-02-14 08:22:30,720 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:22:30,742 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517720 HTTP/1.1" 422 45
2025-02-14 08:22:30,743 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:22:30,744 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:32,148 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:23:32,150 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:32,170 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 422 45
2025-02-14 08:23:32,171 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:32,171 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:32,326 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 08:23:32,328 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:32,357 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 422 45
2025-02-14 08:23:32,358 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:32,359 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:33,432 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 08:23:33,434 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:33,442 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 422 45
2025-02-14 08:23:33,483 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:33,483 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-14 08:23:48,484 - INFO - Application started.
2025-02-14 08:23:48,484 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 08:23:48,488 - INFO - Attempting to log in user: test
2025-02-14 08:23:48,496 - DEBUG - Loading KWallet
2025-02-14 08:23:48,498 - DEBUG - Loading SecretService
2025-02-14 08:23:48,525 - DEBUG - Loading Windows
2025-02-14 08:23:48,527 - DEBUG - Loading chainer
2025-02-14 08:23:48,528 - DEBUG - Loading libsecret
2025-02-14 08:23:48,529 - DEBUG - Loading macOS
2025-02-14 08:23:48,672 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 08:23:48,676 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:48,686 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 08:23:48,696 - DEBUG - Received response
2025-02-14 08:23:48,741 - INFO - User test logged in successfully.
2025-02-14 08:23:48,742 - INFO - Starting polling for notifications.
2025-02-14 08:23:48,742 - DEBUG - Polling for notifications...
2025-02-14 08:23:48,779 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517828 with data: None
2025-02-14 08:23:48,781 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:48,817 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517828 HTTP/1.1" 200 20
2025-02-14 08:23:48,818 - DEBUG - Received response: {
  "update": -80
}

2025-02-14 08:23:48,819 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 08:23:48,821 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:48,849 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 08:23:48,851 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 08:23:51,638 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 08:23:51,640 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:51,688 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 125
2025-02-14 08:23:51,689 - DEBUG - Received response: {
  "datetime": "2025-02-14 08:23:51",
  "log": "Error during the execution of the plugin: newPlugin",
  "status": "Error"
}

2025-02-14 08:23:53,824 - DEBUG - Polling for notifications...
2025-02-14 08:23:53,860 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517829 with data: None
2025-02-14 08:23:53,863 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:53,882 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517829 HTTP/1.1" 200 20
2025-02-14 08:23:53,883 - DEBUG - Received response: {
  "update": -81
}

2025-02-14 08:23:58,888 - DEBUG - Polling for notifications...
2025-02-14 08:23:58,926 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517829 with data: None
2025-02-14 08:23:58,928 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:58,947 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517829 HTTP/1.1" 200 20
2025-02-14 08:23:58,948 - DEBUG - Received response: {
  "update": -81
}

2025-02-14 08:23:59,472 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 08:23:59,473 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:23:59,494 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 08:23:59,495 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 08:24:03,952 - DEBUG - Polling for notifications...
2025-02-14 08:24:03,989 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517829 with data: None
2025-02-14 08:24:03,990 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:24:04,010 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517829 HTTP/1.1" 200 20
2025-02-14 08:24:04,011 - DEBUG - Received response: {
  "update": -81
}

2025-02-14 08:24:09,017 - DEBUG - Polling for notifications...
2025-02-14 08:24:09,054 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739517829 with data: None
2025-02-14 08:24:09,056 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 08:24:09,076 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739517829 HTTP/1.1" 200 20
2025-02-14 08:24:09,077 - DEBUG - Received response: {
  "update": -81
}

2025-02-14 10:17:41,514 - INFO - Application started.
2025-02-14 10:17:41,519 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 10:17:41,519 - INFO - Attempting to log in user: test
2025-02-14 10:17:41,533 - DEBUG - Loading KWallet
2025-02-14 10:17:41,535 - DEBUG - Loading SecretService
2025-02-14 10:17:41,590 - DEBUG - Loading Windows
2025-02-14 10:17:41,592 - DEBUG - Loading chainer
2025-02-14 10:17:41,593 - DEBUG - Loading libsecret
2025-02-14 10:17:41,594 - DEBUG - Loading macOS
2025-02-14 10:17:41,755 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 10:17:41,759 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:17:41,771 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 401 35
2025-02-14 10:17:41,781 - DEBUG - Received response
2025-02-14 10:17:41,782 - ERROR - Error 401: {
  "msg": "Error, login failed"
}

2025-02-14 10:17:56,324 - INFO - Application started.
2025-02-14 10:17:56,325 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 10:17:56,325 - INFO - Attempting to log in user: test
2025-02-14 10:17:56,334 - DEBUG - Loading KWallet
2025-02-14 10:17:56,336 - DEBUG - Loading SecretService
2025-02-14 10:17:56,367 - DEBUG - Loading Windows
2025-02-14 10:17:56,368 - DEBUG - Loading chainer
2025-02-14 10:17:56,369 - DEBUG - Loading libsecret
2025-02-14 10:17:56,370 - DEBUG - Loading macOS
2025-02-14 10:17:56,510 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 10:17:56,515 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:17:56,524 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 10:17:56,535 - DEBUG - Received response
2025-02-14 10:17:56,588 - INFO - User test logged in successfully.
2025-02-14 10:17:56,588 - INFO - Starting polling for notifications.
2025-02-14 10:17:56,589 - DEBUG - Polling for notifications...
2025-02-14 10:17:56,628 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739524676 with data: None
2025-02-14 10:17:56,630 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:17:56,652 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739524676 HTTP/1.1" 200 20
2025-02-14 10:17:56,653 - DEBUG - Received response: {
  "update": -44
}

2025-02-14 10:17:56,668 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 10:17:56,669 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:17:56,697 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 10:17:56,698 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 10:17:58,274 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 10:17:58,275 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:17:58,299 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 10:17:58,301 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 10:17:59,766 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 10:17:59,768 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:17:59,790 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-14 10:17:59,831 - DEBUG - Received response: {
  "datetime": "2025-02-14 10:17:59",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-14 10:18:01,659 - DEBUG - Polling for notifications...
2025-02-14 10:18:01,694 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739524677 with data: None
2025-02-14 10:18:01,696 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:18:01,715 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739524677 HTTP/1.1" 200 20
2025-02-14 10:18:01,716 - DEBUG - Received response: {
  "update": -45
}

2025-02-14 10:18:03,305 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 10:18:03,306 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:18:03,327 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 10:18:03,328 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 10:18:04,555 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-14 10:18:04,557 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:18:04,574 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 122
2025-02-14 10:18:04,615 - DEBUG - Received response: {
  "datetime": "2025-02-14 10:18:04",
  "log": "Error during the execution of the plugin: saluti",
  "status": "Error"
}

2025-02-14 10:18:06,721 - DEBUG - Polling for notifications...
2025-02-14 10:18:06,757 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739524677 with data: None
2025-02-14 10:18:06,759 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:18:06,779 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739524677 HTTP/1.1" 200 20
2025-02-14 10:18:06,780 - DEBUG - Received response: {
  "update": -45
}

2025-02-14 10:18:07,854 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 10:18:07,856 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:18:07,877 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 10:18:07,878 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 10:18:08,902 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 10:18:08,904 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:18:08,923 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 125
2025-02-14 10:18:08,963 - DEBUG - Received response: {
  "datetime": "2025-02-14 10:18:08",
  "log": "Error during the execution of the plugin: newPlugin",
  "status": "Error"
}

2025-02-14 10:38:22,420 - INFO - Application started.
2025-02-14 10:38:22,421 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 10:38:22,421 - INFO - Attempting to log in user: test
2025-02-14 10:38:22,431 - DEBUG - Loading KWallet
2025-02-14 10:38:22,433 - DEBUG - Loading SecretService
2025-02-14 10:38:22,459 - DEBUG - Loading Windows
2025-02-14 10:38:22,461 - DEBUG - Loading chainer
2025-02-14 10:38:22,461 - DEBUG - Loading libsecret
2025-02-14 10:38:22,462 - DEBUG - Loading macOS
2025-02-14 10:38:22,598 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 10:38:22,602 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:38:22,615 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 10:38:22,625 - DEBUG - Received response
2025-02-14 10:38:22,680 - INFO - User test logged in successfully.
2025-02-14 10:38:22,681 - INFO - Starting polling for notifications.
2025-02-14 10:38:22,681 - DEBUG - Polling for notifications...
2025-02-14 10:38:22,719 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739525902 with data: None
2025-02-14 10:38:22,721 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:38:22,757 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739525902 HTTP/1.1" 200 20
2025-02-14 10:38:22,759 - DEBUG - Received response: {
  "update": -44
}

2025-02-14 10:38:22,760 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 10:38:22,762 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:38:22,792 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 10:38:22,792 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 10:38:24,231 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 10:38:24,233 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:38:24,257 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 10:38:24,258 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 10:38:25,131 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 10:38:25,132 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:38:25,155 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 125
2025-02-14 10:38:25,195 - DEBUG - Received response: {
  "datetime": "2025-02-14 10:38:25",
  "log": "Error during the execution of the plugin: newPlugin",
  "status": "Error"
}

2025-02-14 10:38:27,766 - DEBUG - Polling for notifications...
2025-02-14 10:38:27,804 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739525903 with data: None
2025-02-14 10:38:27,806 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 10:38:27,825 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739525903 HTTP/1.1" 200 20
2025-02-14 10:38:27,826 - DEBUG - Received response: {
  "update": -45
}

2025-02-14 11:18:09,195 - INFO - Application started.
2025-02-14 11:18:09,200 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:18:09,201 - INFO - Attempting to log in user: test
2025-02-14 11:18:09,214 - DEBUG - Loading KWallet
2025-02-14 11:18:09,216 - DEBUG - Loading SecretService
2025-02-14 11:18:09,271 - DEBUG - Loading Windows
2025-02-14 11:18:09,274 - DEBUG - Loading chainer
2025-02-14 11:18:09,275 - DEBUG - Loading libsecret
2025-02-14 11:18:09,276 - DEBUG - Loading macOS
2025-02-14 11:18:09,427 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:18:09,431 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:09,453 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:18:09,454 - DEBUG - Received response
2025-02-14 11:18:09,497 - INFO - User test logged in successfully.
2025-02-14 11:18:09,497 - INFO - Starting polling for notifications.
2025-02-14 11:18:09,498 - DEBUG - Polling for notifications...
2025-02-14 11:18:09,536 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528289 with data: None
2025-02-14 11:18:09,538 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:09,559 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528289 HTTP/1.1" 200 20
2025-02-14 11:18:09,561 - DEBUG - Received response: {
  "update": -27
}

2025-02-14 11:18:14,566 - DEBUG - Polling for notifications...
2025-02-14 11:18:14,605 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528289 with data: None
2025-02-14 11:18:14,607 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:14,627 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528289 HTTP/1.1" 200 20
2025-02-14 11:18:14,628 - DEBUG - Received response: {
  "update": -27
}

2025-02-14 11:18:19,633 - DEBUG - Polling for notifications...
2025-02-14 11:18:19,671 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528289 with data: None
2025-02-14 11:18:19,673 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:19,693 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528289 HTTP/1.1" 200 20
2025-02-14 11:18:19,694 - DEBUG - Received response: {
  "update": -27
}

2025-02-14 11:18:24,699 - DEBUG - Polling for notifications...
2025-02-14 11:18:24,734 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528289 with data: None
2025-02-14 11:18:24,736 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:24,755 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528289 HTTP/1.1" 200 20
2025-02-14 11:18:24,756 - DEBUG - Received response: {
  "update": -27
}

2025-02-14 11:18:29,762 - DEBUG - Polling for notifications...
2025-02-14 11:18:29,798 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528289 with data: None
2025-02-14 11:18:29,800 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:29,819 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528289 HTTP/1.1" 200 20
2025-02-14 11:18:29,820 - DEBUG - Received response: {
  "update": -27
}

2025-02-14 11:18:34,826 - DEBUG - Polling for notifications...
2025-02-14 11:18:34,863 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528289 with data: None
2025-02-14 11:18:34,865 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:18:34,884 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528289 HTTP/1.1" 200 20
2025-02-14 11:18:34,885 - DEBUG - Received response: {
  "update": -27
}

2025-02-14 11:19:23,436 - INFO - Application started.
2025-02-14 11:19:23,436 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:19:23,436 - INFO - Attempting to log in user: test
2025-02-14 11:19:23,446 - DEBUG - Loading KWallet
2025-02-14 11:19:23,448 - DEBUG - Loading SecretService
2025-02-14 11:19:23,475 - DEBUG - Loading Windows
2025-02-14 11:19:23,477 - DEBUG - Loading chainer
2025-02-14 11:19:23,478 - DEBUG - Loading libsecret
2025-02-14 11:19:23,478 - DEBUG - Loading macOS
2025-02-14 11:19:23,608 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:19:23,612 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:19:23,624 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:19:23,635 - DEBUG - Received response
2025-02-14 11:19:23,690 - INFO - User test logged in successfully.
2025-02-14 11:19:23,690 - INFO - Starting polling for notifications.
2025-02-14 11:19:23,690 - DEBUG - Polling for notifications...
2025-02-14 11:19:23,727 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528363 with data: None
2025-02-14 11:19:23,729 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:19:23,750 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528363 HTTP/1.1" 200 20
2025-02-14 11:19:23,751 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:19:28,756 - DEBUG - Polling for notifications...
2025-02-14 11:19:28,794 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528363 with data: None
2025-02-14 11:19:28,796 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:19:28,815 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528363 HTTP/1.1" 200 20
2025-02-14 11:19:28,816 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:19:33,822 - DEBUG - Polling for notifications...
2025-02-14 11:19:33,859 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528363 with data: None
2025-02-14 11:19:33,860 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:19:33,880 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528363 HTTP/1.1" 200 20
2025-02-14 11:19:33,881 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:20:33,593 - INFO - Application started.
2025-02-14 11:20:33,593 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:20:33,593 - INFO - Attempting to log in user: test
2025-02-14 11:20:33,603 - DEBUG - Loading KWallet
2025-02-14 11:20:33,604 - DEBUG - Loading SecretService
2025-02-14 11:20:33,636 - DEBUG - Loading Windows
2025-02-14 11:20:33,638 - DEBUG - Loading chainer
2025-02-14 11:20:33,638 - DEBUG - Loading libsecret
2025-02-14 11:20:33,639 - DEBUG - Loading macOS
2025-02-14 11:20:33,773 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:20:33,777 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:33,789 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:20:33,799 - DEBUG - Received response
2025-02-14 11:20:33,844 - INFO - User test logged in successfully.
2025-02-14 11:20:33,845 - INFO - Starting polling for notifications.
2025-02-14 11:20:33,845 - DEBUG - Polling for notifications...
2025-02-14 11:20:33,881 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:20:33,883 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:33,905 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:20:33,906 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:20:38,912 - DEBUG - Polling for notifications...
2025-02-14 11:20:38,949 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:20:38,950 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:38,969 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:20:38,970 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:20:43,975 - DEBUG - Polling for notifications...
2025-02-14 11:20:44,012 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:20:44,014 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:44,033 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:20:44,034 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:20:49,039 - DEBUG - Polling for notifications...
2025-02-14 11:20:49,077 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:20:49,080 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:49,100 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:20:49,101 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:20:54,107 - DEBUG - Polling for notifications...
2025-02-14 11:20:54,143 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:20:54,145 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:54,164 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:20:54,165 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:20:59,171 - DEBUG - Polling for notifications...
2025-02-14 11:20:59,206 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:20:59,208 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:20:59,227 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:20:59,228 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:21:04,234 - DEBUG - Polling for notifications...
2025-02-14 11:21:04,271 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528434 with data: None
2025-02-14 11:21:04,273 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:21:04,293 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528434 HTTP/1.1" 200 20
2025-02-14 11:21:04,294 - DEBUG - Received response: {
  "update": -13
}

2025-02-14 11:22:10,734 - INFO - Application started.
2025-02-14 11:22:10,734 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:22:10,735 - INFO - Attempting to log in user: test
2025-02-14 11:22:10,744 - DEBUG - Loading KWallet
2025-02-14 11:22:10,746 - DEBUG - Loading SecretService
2025-02-14 11:22:10,773 - DEBUG - Loading Windows
2025-02-14 11:22:10,775 - DEBUG - Loading chainer
2025-02-14 11:22:10,775 - DEBUG - Loading libsecret
2025-02-14 11:22:10,776 - DEBUG - Loading macOS
2025-02-14 11:22:10,908 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:22:10,912 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:10,924 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:22:10,935 - DEBUG - Received response
2025-02-14 11:22:10,982 - INFO - User test logged in successfully.
2025-02-14 11:22:10,983 - INFO - Starting polling for notifications.
2025-02-14 11:22:10,984 - DEBUG - Polling for notifications...
2025-02-14 11:22:11,020 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528531 with data: None
2025-02-14 11:22:11,022 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:11,043 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528531 HTTP/1.1" 200 20
2025-02-14 11:22:11,044 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:22:16,050 - DEBUG - Polling for notifications...
2025-02-14 11:22:16,085 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528531 with data: None
2025-02-14 11:22:16,087 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:16,106 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528531 HTTP/1.1" 200 20
2025-02-14 11:22:16,107 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:22:21,113 - DEBUG - Polling for notifications...
2025-02-14 11:22:21,151 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528531 with data: None
2025-02-14 11:22:21,153 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:21,172 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528531 HTTP/1.1" 200 20
2025-02-14 11:22:21,173 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:22:26,179 - DEBUG - Polling for notifications...
2025-02-14 11:22:26,216 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528531 with data: None
2025-02-14 11:22:26,218 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:26,237 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528531 HTTP/1.1" 200 20
2025-02-14 11:22:26,238 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:22:31,244 - DEBUG - Polling for notifications...
2025-02-14 11:22:31,283 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528531 with data: None
2025-02-14 11:22:31,285 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:31,304 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528531 HTTP/1.1" 200 20
2025-02-14 11:22:31,305 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:22:36,311 - DEBUG - Polling for notifications...
2025-02-14 11:22:36,349 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528531 with data: None
2025-02-14 11:22:36,351 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:22:36,370 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528531 HTTP/1.1" 200 20
2025-02-14 11:22:36,371 - DEBUG - Received response: {
  "update": -11
}

2025-02-14 11:23:33,053 - INFO - Application started.
2025-02-14 11:23:33,053 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:23:33,053 - INFO - Attempting to log in user: test
2025-02-14 11:23:33,066 - DEBUG - Loading KWallet
2025-02-14 11:23:33,068 - DEBUG - Loading SecretService
2025-02-14 11:23:33,098 - DEBUG - Loading Windows
2025-02-14 11:23:33,100 - DEBUG - Loading chainer
2025-02-14 11:23:33,101 - DEBUG - Loading libsecret
2025-02-14 11:23:33,103 - DEBUG - Loading macOS
2025-02-14 11:23:33,240 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:23:33,244 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:33,254 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:23:33,264 - DEBUG - Received response
2025-02-14 11:23:33,308 - INFO - User test logged in successfully.
2025-02-14 11:23:33,309 - INFO - Starting polling for notifications.
2025-02-14 11:23:33,310 - DEBUG - Polling for notifications...
2025-02-14 11:23:33,348 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:23:33,350 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:33,370 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:23:33,371 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:23:38,377 - DEBUG - Polling for notifications...
2025-02-14 11:23:38,414 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:23:38,416 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:38,435 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:23:38,436 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:23:43,442 - DEBUG - Polling for notifications...
2025-02-14 11:23:43,478 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:23:43,480 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:43,499 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:23:43,500 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:23:48,506 - DEBUG - Polling for notifications...
2025-02-14 11:23:48,543 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:23:48,545 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:48,565 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:23:48,565 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:23:53,571 - DEBUG - Polling for notifications...
2025-02-14 11:23:53,607 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:23:53,609 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:53,627 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:23:53,628 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:23:58,634 - DEBUG - Polling for notifications...
2025-02-14 11:23:58,670 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:23:58,672 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:23:58,692 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:23:58,693 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:24:03,698 - DEBUG - Polling for notifications...
2025-02-14 11:24:03,735 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:24:03,737 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:24:03,756 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:24:03,757 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:24:08,763 - DEBUG - Polling for notifications...
2025-02-14 11:24:08,797 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739528613 with data: None
2025-02-14 11:24:08,799 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:24:08,818 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739528613 HTTP/1.1" 200 20
2025-02-14 11:24:08,819 - DEBUG - Received response: {
  "update": -93
}

2025-02-14 11:30:18,483 - INFO - Application started.
2025-02-14 11:30:18,483 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:30:18,486 - INFO - Attempting to log in user: test
2025-02-14 11:30:18,495 - DEBUG - Loading KWallet
2025-02-14 11:30:18,497 - DEBUG - Loading SecretService
2025-02-14 11:30:18,523 - DEBUG - Loading Windows
2025-02-14 11:30:18,524 - DEBUG - Loading chainer
2025-02-14 11:30:18,525 - DEBUG - Loading libsecret
2025-02-14 11:30:18,526 - DEBUG - Loading macOS
2025-02-14 11:30:18,668 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:30:18,672 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:30:18,684 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:30:18,694 - DEBUG - Received response
2025-02-14 11:30:18,741 - INFO - User test logged in successfully.
2025-02-14 11:30:18,741 - INFO - Starting polling for notifications.
2025-02-14 11:30:18,742 - DEBUG - Polling for notifications...
2025-02-14 11:30:18,781 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529018 with data: None
2025-02-14 11:30:18,783 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:30:18,802 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529018 HTTP/1.1" 200 21
2025-02-14 11:30:18,804 - DEBUG - Received response: {
  "update": -498
}

2025-02-14 11:30:23,809 - DEBUG - Polling for notifications...
2025-02-14 11:30:23,847 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529018 with data: None
2025-02-14 11:30:23,850 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:30:23,870 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529018 HTTP/1.1" 200 21
2025-02-14 11:30:23,871 - DEBUG - Received response: {
  "update": -498
}

2025-02-14 11:30:28,877 - DEBUG - Polling for notifications...
2025-02-14 11:30:28,914 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529018 with data: None
2025-02-14 11:30:28,917 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:30:28,937 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529018 HTTP/1.1" 200 21
2025-02-14 11:30:28,938 - DEBUG - Received response: {
  "update": -498
}

2025-02-14 11:31:11,619 - INFO - Application started.
2025-02-14 11:31:11,619 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:31:11,619 - INFO - Attempting to log in user: test
2025-02-14 11:31:11,628 - DEBUG - Loading KWallet
2025-02-14 11:31:11,630 - DEBUG - Loading SecretService
2025-02-14 11:31:11,656 - DEBUG - Loading Windows
2025-02-14 11:31:11,658 - DEBUG - Loading chainer
2025-02-14 11:31:11,659 - DEBUG - Loading libsecret
2025-02-14 11:31:11,660 - DEBUG - Loading macOS
2025-02-14 11:31:11,797 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:31:11,801 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:11,811 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:31:11,821 - DEBUG - Received response
2025-02-14 11:31:11,867 - INFO - User test logged in successfully.
2025-02-14 11:31:11,867 - INFO - Starting polling for notifications.
2025-02-14 11:31:11,868 - DEBUG - Polling for notifications...
2025-02-14 11:31:11,905 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:11,908 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:11,929 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:11,930 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:31:16,936 - DEBUG - Polling for notifications...
2025-02-14 11:31:16,973 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:16,975 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:16,994 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:16,995 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:31:22,001 - DEBUG - Polling for notifications...
2025-02-14 11:31:22,037 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:22,039 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:22,058 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:22,059 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:31:27,064 - DEBUG - Polling for notifications...
2025-02-14 11:31:27,101 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:27,103 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:27,122 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:27,123 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:31:32,129 - DEBUG - Polling for notifications...
2025-02-14 11:31:32,165 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:32,167 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:32,186 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:32,187 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:31:37,192 - DEBUG - Polling for notifications...
2025-02-14 11:31:37,229 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:37,231 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:37,251 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:37,252 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:31:42,257 - DEBUG - Polling for notifications...
2025-02-14 11:31:42,294 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529072 with data: None
2025-02-14 11:31:42,296 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:31:42,315 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529072 HTTP/1.1" 200 21
2025-02-14 11:31:42,315 - DEBUG - Received response: {
  "update": -552
}

2025-02-14 11:32:48,727 - INFO - Application started.
2025-02-14 11:32:48,728 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:32:48,728 - INFO - Attempting to log in user: test
2025-02-14 11:32:48,737 - DEBUG - Loading KWallet
2025-02-14 11:32:48,738 - DEBUG - Loading SecretService
2025-02-14 11:32:48,763 - DEBUG - Loading Windows
2025-02-14 11:32:48,765 - DEBUG - Loading chainer
2025-02-14 11:32:48,766 - DEBUG - Loading libsecret
2025-02-14 11:32:48,767 - DEBUG - Loading macOS
2025-02-14 11:32:48,899 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:32:48,902 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:32:48,912 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:32:48,922 - DEBUG - Received response
2025-02-14 11:32:48,968 - INFO - User test logged in successfully.
2025-02-14 11:32:48,969 - INFO - Starting polling for notifications.
2025-02-14 11:32:48,970 - DEBUG - Polling for notifications...
2025-02-14 11:32:49,009 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529169 with data: None
2025-02-14 11:32:49,011 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:32:49,031 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529169 HTTP/1.1" 200 21
2025-02-14 11:32:49,032 - DEBUG - Received response: {
  "update": -649
}

2025-02-14 11:32:54,038 - DEBUG - Polling for notifications...
2025-02-14 11:32:54,074 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529169 with data: None
2025-02-14 11:32:54,075 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:32:54,094 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529169 HTTP/1.1" 200 21
2025-02-14 11:32:54,095 - DEBUG - Received response: {
  "update": -649
}

2025-02-14 11:35:40,369 - INFO - Application started.
2025-02-14 11:35:40,369 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:35:40,372 - INFO - Attempting to log in user: test
2025-02-14 11:35:40,381 - DEBUG - Loading KWallet
2025-02-14 11:35:40,382 - DEBUG - Loading SecretService
2025-02-14 11:35:40,408 - DEBUG - Loading Windows
2025-02-14 11:35:40,410 - DEBUG - Loading chainer
2025-02-14 11:35:40,411 - DEBUG - Loading libsecret
2025-02-14 11:35:40,412 - DEBUG - Loading macOS
2025-02-14 11:35:40,547 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:35:40,551 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:35:40,563 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:35:40,573 - DEBUG - Received response
2025-02-14 11:35:40,620 - INFO - User test logged in successfully.
2025-02-14 11:35:40,621 - INFO - Starting polling for notifications.
2025-02-14 11:35:40,621 - DEBUG - Polling for notifications...
2025-02-14 11:35:40,660 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529340 with data: None
2025-02-14 11:35:40,662 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:35:40,683 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529340 HTTP/1.1" 200 21
2025-02-14 11:35:40,684 - DEBUG - Received response: {
  "update": -820
}

2025-02-14 11:36:51,899 - INFO - Application started.
2025-02-14 11:36:51,899 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:36:51,899 - INFO - Attempting to log in user: test
2025-02-14 11:36:51,908 - DEBUG - Loading KWallet
2025-02-14 11:36:51,909 - DEBUG - Loading SecretService
2025-02-14 11:36:51,935 - DEBUG - Loading Windows
2025-02-14 11:36:51,936 - DEBUG - Loading chainer
2025-02-14 11:36:51,937 - DEBUG - Loading libsecret
2025-02-14 11:36:51,938 - DEBUG - Loading macOS
2025-02-14 11:36:52,068 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:36:52,071 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:36:52,081 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:36:52,092 - DEBUG - Received response
2025-02-14 11:36:52,145 - INFO - User test logged in successfully.
2025-02-14 11:36:52,146 - INFO - Starting polling for notifications.
2025-02-14 11:36:52,146 - DEBUG - Polling for notifications...
2025-02-14 11:36:52,184 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529412 with data: None
2025-02-14 11:36:52,186 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:36:52,207 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529412 HTTP/1.1" 200 21
2025-02-14 11:36:52,208 - DEBUG - Received response: {
  "update": -892
}

2025-02-14 11:37:54,009 - INFO - Application started.
2025-02-14 11:37:54,009 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:37:54,010 - INFO - Attempting to log in user: test
2025-02-14 11:37:54,019 - DEBUG - Loading KWallet
2025-02-14 11:37:54,021 - DEBUG - Loading SecretService
2025-02-14 11:37:54,051 - DEBUG - Loading Windows
2025-02-14 11:37:54,052 - DEBUG - Loading chainer
2025-02-14 11:37:54,053 - DEBUG - Loading libsecret
2025-02-14 11:37:54,054 - DEBUG - Loading macOS
2025-02-14 11:37:54,192 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:37:54,196 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:37:54,206 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:37:54,216 - DEBUG - Received response
2025-02-14 11:37:54,260 - INFO - User test logged in successfully.
2025-02-14 11:37:54,260 - INFO - Starting polling for notifications.
2025-02-14 11:37:54,261 - DEBUG - Polling for notifications...
2025-02-14 11:37:54,297 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529474 with data: None
2025-02-14 11:37:54,299 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:37:54,319 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529474 HTTP/1.1" 200 21
2025-02-14 11:37:54,321 - DEBUG - Received response: {
  "update": -954
}

2025-02-14 11:37:54,759 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:37:54,760 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:37:54,788 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:37:54,788 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:38:51,513 - INFO - Application started.
2025-02-14 11:38:51,513 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:38:51,514 - INFO - Attempting to log in user: test
2025-02-14 11:38:51,523 - DEBUG - Loading KWallet
2025-02-14 11:38:51,524 - DEBUG - Loading SecretService
2025-02-14 11:38:51,554 - DEBUG - Loading Windows
2025-02-14 11:38:51,556 - DEBUG - Loading chainer
2025-02-14 11:38:51,557 - DEBUG - Loading libsecret
2025-02-14 11:38:51,558 - DEBUG - Loading macOS
2025-02-14 11:38:51,700 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:38:51,704 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:38:51,718 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:38:51,729 - DEBUG - Received response
2025-02-14 11:38:51,783 - INFO - User test logged in successfully.
2025-02-14 11:38:51,784 - INFO - Starting polling for notifications.
2025-02-14 11:38:51,785 - DEBUG - Polling for notifications...
2025-02-14 11:38:51,821 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529532 with data: None
2025-02-14 11:38:51,823 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:38:51,844 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529532 HTTP/1.1" 200 22
2025-02-14 11:38:51,845 - DEBUG - Received response: {
  "update": -1012
}

2025-02-14 11:38:52,278 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:38:52,280 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:38:52,300 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:38:52,301 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:40:50,239 - INFO - Application started.
2025-02-14 11:40:50,239 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:40:50,240 - INFO - Attempting to log in user: test
2025-02-14 11:40:50,253 - DEBUG - Loading KWallet
2025-02-14 11:40:50,255 - DEBUG - Loading SecretService
2025-02-14 11:40:50,290 - DEBUG - Loading Windows
2025-02-14 11:40:50,292 - DEBUG - Loading chainer
2025-02-14 11:40:50,293 - DEBUG - Loading libsecret
2025-02-14 11:40:50,294 - DEBUG - Loading macOS
2025-02-14 11:40:50,425 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:40:50,429 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:40:50,439 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:40:50,449 - DEBUG - Received response
2025-02-14 11:40:50,493 - INFO - User test logged in successfully.
2025-02-14 11:40:50,493 - INFO - Starting polling for notifications.
2025-02-14 11:40:50,494 - DEBUG - Polling for notifications...
2025-02-14 11:40:50,530 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529650 with data: None
2025-02-14 11:40:50,532 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:40:50,553 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529650 HTTP/1.1" 200 22
2025-02-14 11:40:50,554 - DEBUG - Received response: {
  "update": -1130
}

2025-02-14 11:40:50,992 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:40:50,994 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:40:51,014 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:40:51,015 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:41:14,001 - INFO - Application started.
2025-02-14 11:41:14,001 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:41:14,002 - INFO - Attempting to log in user: test
2025-02-14 11:41:14,011 - DEBUG - Loading KWallet
2025-02-14 11:41:14,012 - DEBUG - Loading SecretService
2025-02-14 11:41:14,037 - DEBUG - Loading Windows
2025-02-14 11:41:14,038 - DEBUG - Loading chainer
2025-02-14 11:41:14,039 - DEBUG - Loading libsecret
2025-02-14 11:41:14,040 - DEBUG - Loading macOS
2025-02-14 11:41:14,170 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:41:14,173 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:41:14,183 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:41:14,193 - DEBUG - Received response
2025-02-14 11:41:14,241 - INFO - User test logged in successfully.
2025-02-14 11:41:14,241 - INFO - Starting polling for notifications.
2025-02-14 11:41:14,242 - DEBUG - Polling for notifications...
2025-02-14 11:41:14,277 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529674 with data: None
2025-02-14 11:41:14,279 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:41:14,299 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529674 HTTP/1.1" 200 22
2025-02-14 11:41:14,301 - DEBUG - Received response: {
  "update": -1154
}

2025-02-14 11:41:14,754 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:41:14,755 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:41:14,776 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:41:14,777 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:41:19,307 - DEBUG - Polling for notifications...
2025-02-14 11:41:19,343 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529675 with data: None
2025-02-14 11:41:19,345 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:41:19,364 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529675 HTTP/1.1" 200 22
2025-02-14 11:41:19,365 - DEBUG - Received response: {
  "update": -1155
}

2025-02-14 11:41:24,370 - DEBUG - Polling for notifications...
2025-02-14 11:41:24,404 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529675 with data: None
2025-02-14 11:41:24,406 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:41:24,425 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529675 HTTP/1.1" 200 22
2025-02-14 11:41:24,426 - DEBUG - Received response: {
  "update": -1155
}

2025-02-14 11:43:22,138 - INFO - Application started.
2025-02-14 11:43:22,139 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:43:22,139 - INFO - Attempting to log in user: test
2025-02-14 11:43:22,149 - DEBUG - Loading KWallet
2025-02-14 11:43:22,150 - DEBUG - Loading SecretService
2025-02-14 11:43:22,183 - DEBUG - Loading Windows
2025-02-14 11:43:22,185 - DEBUG - Loading chainer
2025-02-14 11:43:22,185 - DEBUG - Loading libsecret
2025-02-14 11:43:22,186 - DEBUG - Loading macOS
2025-02-14 11:43:22,319 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:43:22,323 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:22,332 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:43:22,343 - DEBUG - Received response
2025-02-14 11:43:22,388 - INFO - User test logged in successfully.
2025-02-14 11:43:22,388 - INFO - Starting polling for notifications.
2025-02-14 11:43:22,389 - DEBUG - Polling for notifications...
2025-02-14 11:43:22,427 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529802 with data: None
2025-02-14 11:43:22,429 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:22,450 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529802 HTTP/1.1" 200 22
2025-02-14 11:43:22,452 - DEBUG - Received response: {
  "update": -1282
}

2025-02-14 11:43:22,887 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:43:22,889 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:22,909 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:43:22,910 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:43:27,458 - DEBUG - Polling for notifications...
2025-02-14 11:43:27,496 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:27,498 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:27,518 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:27,519 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:43:32,525 - DEBUG - Polling for notifications...
2025-02-14 11:43:32,561 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:32,563 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:32,583 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:32,584 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:43:37,589 - DEBUG - Polling for notifications...
2025-02-14 11:43:37,627 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:37,628 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:37,647 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:37,648 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:43:42,653 - DEBUG - Polling for notifications...
2025-02-14 11:43:42,689 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:42,691 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:42,710 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:42,710 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:43:47,712 - DEBUG - Polling for notifications...
2025-02-14 11:43:47,749 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:47,750 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:47,769 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:47,770 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:43:52,775 - DEBUG - Polling for notifications...
2025-02-14 11:43:52,812 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:52,814 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:52,833 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:52,834 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:43:57,839 - DEBUG - Polling for notifications...
2025-02-14 11:43:57,876 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:43:57,878 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:43:57,897 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:43:57,898 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:44:02,904 - DEBUG - Polling for notifications...
2025-02-14 11:44:02,941 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:44:02,943 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:44:02,962 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:44:02,962 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:44:07,968 - DEBUG - Polling for notifications...
2025-02-14 11:44:08,005 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:44:08,007 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:44:08,026 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:44:08,027 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:44:13,033 - DEBUG - Polling for notifications...
2025-02-14 11:44:13,070 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:44:13,072 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:44:13,091 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:44:13,092 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:44:18,098 - DEBUG - Polling for notifications...
2025-02-14 11:44:18,133 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529803 with data: None
2025-02-14 11:44:18,135 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:44:18,155 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529803 HTTP/1.1" 200 22
2025-02-14 11:44:18,156 - DEBUG - Received response: {
  "update": -1283
}

2025-02-14 11:45:33,353 - INFO - Application started.
2025-02-14 11:45:33,353 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:45:33,354 - INFO - Attempting to log in user: test
2025-02-14 11:45:33,363 - DEBUG - Loading KWallet
2025-02-14 11:45:33,365 - DEBUG - Loading SecretService
2025-02-14 11:45:33,390 - DEBUG - Loading Windows
2025-02-14 11:45:33,392 - DEBUG - Loading chainer
2025-02-14 11:45:33,393 - DEBUG - Loading libsecret
2025-02-14 11:45:33,394 - DEBUG - Loading macOS
2025-02-14 11:45:33,525 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:45:33,529 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:33,539 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:45:33,550 - DEBUG - Received response
2025-02-14 11:45:33,602 - INFO - User test logged in successfully.
2025-02-14 11:45:33,603 - INFO - Starting polling for notifications.
2025-02-14 11:45:33,603 - DEBUG - Polling for notifications...
2025-02-14 11:45:33,640 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529933 with data: None
2025-02-14 11:45:33,642 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:33,663 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529933 HTTP/1.1" 200 22
2025-02-14 11:45:33,664 - DEBUG - Received response: {
  "update": -1413
}

2025-02-14 11:45:34,098 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:45:34,100 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:34,120 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:45:34,121 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:45:38,670 - DEBUG - Polling for notifications...
2025-02-14 11:45:38,708 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:45:38,710 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:38,731 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:45:38,732 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:45:43,737 - DEBUG - Polling for notifications...
2025-02-14 11:45:43,774 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:45:43,776 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:43,795 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:45:43,796 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:45:48,802 - DEBUG - Polling for notifications...
2025-02-14 11:45:48,838 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:45:48,841 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:48,860 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:45:48,861 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:45:53,866 - DEBUG - Polling for notifications...
2025-02-14 11:45:53,903 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:45:53,905 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:53,924 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:45:53,925 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:45:58,931 - DEBUG - Polling for notifications...
2025-02-14 11:45:58,967 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:45:58,969 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:45:58,988 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:45:58,989 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:04,015 - DEBUG - Polling for notifications...
2025-02-14 11:46:04,051 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:04,053 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:04,072 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:04,073 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:09,098 - DEBUG - Polling for notifications...
2025-02-14 11:46:09,139 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:09,142 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:09,163 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:09,164 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:14,190 - DEBUG - Polling for notifications...
2025-02-14 11:46:14,225 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:14,227 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:14,246 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:14,247 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:19,273 - DEBUG - Polling for notifications...
2025-02-14 11:46:19,309 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:19,311 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:19,330 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:19,331 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:24,332 - DEBUG - Polling for notifications...
2025-02-14 11:46:24,369 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:24,370 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:24,389 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:24,390 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:29,416 - DEBUG - Polling for notifications...
2025-02-14 11:46:29,454 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:29,456 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:29,475 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:29,476 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:34,501 - DEBUG - Polling for notifications...
2025-02-14 11:46:34,537 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:34,539 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:34,557 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:34,558 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:39,584 - DEBUG - Polling for notifications...
2025-02-14 11:46:39,621 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:39,623 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:39,644 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:39,645 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:44,647 - DEBUG - Polling for notifications...
2025-02-14 11:46:44,683 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:44,685 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:44,704 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:44,705 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:49,730 - DEBUG - Polling for notifications...
2025-02-14 11:46:49,767 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:49,769 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:49,789 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:49,790 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:54,815 - DEBUG - Polling for notifications...
2025-02-14 11:46:54,852 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:54,854 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:54,873 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:54,874 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:46:59,895 - DEBUG - Polling for notifications...
2025-02-14 11:46:59,932 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:46:59,934 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:46:59,954 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:46:59,954 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:04,980 - DEBUG - Polling for notifications...
2025-02-14 11:47:05,017 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:05,019 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:05,038 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:05,039 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:10,056 - DEBUG - Polling for notifications...
2025-02-14 11:47:10,094 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:10,096 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:10,116 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:10,117 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:15,142 - DEBUG - Polling for notifications...
2025-02-14 11:47:15,177 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:15,179 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:15,198 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:15,199 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:20,206 - DEBUG - Polling for notifications...
2025-02-14 11:47:20,243 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:20,245 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:20,265 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:20,266 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:25,288 - DEBUG - Polling for notifications...
2025-02-14 11:47:25,324 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:25,326 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:25,345 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:25,346 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:30,358 - DEBUG - Polling for notifications...
2025-02-14 11:47:30,394 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:30,396 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:30,415 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:30,416 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:35,441 - DEBUG - Polling for notifications...
2025-02-14 11:47:35,476 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:35,477 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:35,496 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:35,497 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:40,522 - DEBUG - Polling for notifications...
2025-02-14 11:47:40,559 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:40,561 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:40,580 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:40,581 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:45,607 - DEBUG - Polling for notifications...
2025-02-14 11:47:45,643 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:45,644 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:45,663 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:45,664 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:50,690 - DEBUG - Polling for notifications...
2025-02-14 11:47:50,725 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:50,726 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:50,745 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:50,746 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:47:55,764 - DEBUG - Polling for notifications...
2025-02-14 11:47:55,798 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:47:55,800 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:47:55,819 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:47:55,820 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:00,832 - DEBUG - Polling for notifications...
2025-02-14 11:48:00,866 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:00,868 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:00,887 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:00,888 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:05,901 - DEBUG - Polling for notifications...
2025-02-14 11:48:05,939 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:05,942 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:05,962 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:05,963 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:10,989 - DEBUG - Polling for notifications...
2025-02-14 11:48:11,025 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:11,026 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:11,046 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:11,047 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:16,073 - DEBUG - Polling for notifications...
2025-02-14 11:48:16,109 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:16,111 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:16,130 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:16,131 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:21,137 - DEBUG - Polling for notifications...
2025-02-14 11:48:21,176 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:21,179 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:21,200 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:21,200 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:26,226 - DEBUG - Polling for notifications...
2025-02-14 11:48:26,262 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:26,263 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:26,282 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:26,283 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:31,285 - DEBUG - Polling for notifications...
2025-02-14 11:48:31,322 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:31,324 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:31,343 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:31,344 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:36,356 - DEBUG - Polling for notifications...
2025-02-14 11:48:36,392 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:36,395 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:36,414 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:36,415 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:41,417 - DEBUG - Polling for notifications...
2025-02-14 11:48:41,454 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:41,456 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:41,475 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:41,476 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:46,501 - DEBUG - Polling for notifications...
2025-02-14 11:48:46,537 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:46,538 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:46,558 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:46,558 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:51,584 - DEBUG - Polling for notifications...
2025-02-14 11:48:51,620 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:51,622 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:51,641 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:51,642 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:48:56,668 - DEBUG - Polling for notifications...
2025-02-14 11:48:56,703 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:48:56,705 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:48:56,724 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:48:56,725 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:01,750 - DEBUG - Polling for notifications...
2025-02-14 11:49:01,787 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:01,789 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:01,808 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:01,809 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:06,834 - DEBUG - Polling for notifications...
2025-02-14 11:49:06,870 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:06,872 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:06,891 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:06,892 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:11,918 - DEBUG - Polling for notifications...
2025-02-14 11:49:11,954 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:11,956 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:11,975 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:11,976 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:17,001 - DEBUG - Polling for notifications...
2025-02-14 11:49:17,056 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:17,060 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:17,101 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:17,103 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:22,129 - DEBUG - Polling for notifications...
2025-02-14 11:49:22,167 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:22,169 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:22,190 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:22,191 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:27,216 - DEBUG - Polling for notifications...
2025-02-14 11:49:27,253 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:27,255 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:27,278 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:27,280 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:32,305 - DEBUG - Polling for notifications...
2025-02-14 11:49:32,342 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:32,344 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:32,365 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:32,366 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:37,391 - DEBUG - Polling for notifications...
2025-02-14 11:49:37,432 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:37,433 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:37,453 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:37,454 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:42,480 - DEBUG - Polling for notifications...
2025-02-14 11:49:42,517 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:42,520 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:42,541 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:42,542 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:47,545 - DEBUG - Polling for notifications...
2025-02-14 11:49:47,582 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:47,584 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:47,603 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:47,605 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:52,631 - DEBUG - Polling for notifications...
2025-02-14 11:49:52,669 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:52,671 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:52,693 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:52,694 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:49:57,720 - DEBUG - Polling for notifications...
2025-02-14 11:49:57,757 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:49:57,760 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:49:57,781 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:49:57,782 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:02,792 - DEBUG - Polling for notifications...
2025-02-14 11:50:02,830 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:02,832 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:02,854 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:02,856 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:07,881 - DEBUG - Polling for notifications...
2025-02-14 11:50:07,919 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:07,921 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:07,940 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:07,942 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:12,968 - DEBUG - Polling for notifications...
2025-02-14 11:50:13,005 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:13,010 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:13,030 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:13,031 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:18,057 - DEBUG - Polling for notifications...
2025-02-14 11:50:18,097 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:18,099 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:18,118 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:18,119 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:23,144 - DEBUG - Polling for notifications...
2025-02-14 11:50:23,182 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:23,185 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:23,208 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:23,209 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:28,234 - DEBUG - Polling for notifications...
2025-02-14 11:50:28,271 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:28,273 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:28,294 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:28,295 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:33,320 - DEBUG - Polling for notifications...
2025-02-14 11:50:33,361 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:33,363 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:33,387 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:33,393 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:38,420 - DEBUG - Polling for notifications...
2025-02-14 11:50:38,458 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:38,461 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:38,481 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:38,482 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:43,507 - DEBUG - Polling for notifications...
2025-02-14 11:50:43,548 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:43,550 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:43,572 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:43,574 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:48,600 - DEBUG - Polling for notifications...
2025-02-14 11:50:48,645 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:48,649 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:48,687 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:48,688 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:53,704 - DEBUG - Polling for notifications...
2025-02-14 11:50:53,740 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:53,743 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:53,765 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:53,766 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:50:58,792 - DEBUG - Polling for notifications...
2025-02-14 11:50:58,829 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:50:58,831 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:50:58,850 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:50:58,851 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:03,876 - DEBUG - Polling for notifications...
2025-02-14 11:51:03,916 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:03,918 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:03,939 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:03,940 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:08,965 - DEBUG - Polling for notifications...
2025-02-14 11:51:09,004 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:09,006 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:09,026 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:09,029 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:14,054 - DEBUG - Polling for notifications...
2025-02-14 11:51:14,092 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:14,094 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:14,117 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:14,118 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:19,143 - DEBUG - Polling for notifications...
2025-02-14 11:51:19,183 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:19,188 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:19,208 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:19,209 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:24,235 - DEBUG - Polling for notifications...
2025-02-14 11:51:24,287 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:24,293 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:24,328 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:24,333 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:29,360 - DEBUG - Polling for notifications...
2025-02-14 11:51:29,403 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:29,405 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:29,427 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:29,429 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:34,454 - DEBUG - Polling for notifications...
2025-02-14 11:51:34,495 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:34,498 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:34,523 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:34,526 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:39,552 - DEBUG - Polling for notifications...
2025-02-14 11:51:39,589 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:39,592 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:39,613 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:39,615 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:44,640 - DEBUG - Polling for notifications...
2025-02-14 11:51:44,678 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:44,680 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:44,702 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:44,703 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:49,728 - DEBUG - Polling for notifications...
2025-02-14 11:51:49,767 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:49,769 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:49,790 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:49,791 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:54,816 - DEBUG - Polling for notifications...
2025-02-14 11:51:54,853 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:54,855 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:54,874 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:54,876 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:51:59,902 - DEBUG - Polling for notifications...
2025-02-14 11:51:59,942 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:51:59,944 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:51:59,965 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:51:59,966 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:04,992 - DEBUG - Polling for notifications...
2025-02-14 11:52:05,033 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:05,035 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:05,059 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:05,060 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:10,086 - DEBUG - Polling for notifications...
2025-02-14 11:52:10,128 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:10,131 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:10,151 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:10,152 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:15,163 - DEBUG - Polling for notifications...
2025-02-14 11:52:15,201 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:15,203 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:15,223 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:15,224 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:20,232 - DEBUG - Polling for notifications...
2025-02-14 11:52:20,268 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:20,270 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:20,289 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:20,290 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:25,316 - DEBUG - Polling for notifications...
2025-02-14 11:52:25,351 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:25,353 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:25,372 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:25,373 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:30,376 - DEBUG - Polling for notifications...
2025-02-14 11:52:30,411 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:30,412 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:30,431 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:30,432 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:35,444 - DEBUG - Polling for notifications...
2025-02-14 11:52:35,481 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:35,482 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:35,501 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:35,502 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:40,528 - DEBUG - Polling for notifications...
2025-02-14 11:52:40,563 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:40,565 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:40,584 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:40,585 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:45,611 - DEBUG - Polling for notifications...
2025-02-14 11:52:45,646 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:45,648 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:45,667 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:45,668 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:50,694 - DEBUG - Polling for notifications...
2025-02-14 11:52:50,730 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:50,732 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:50,751 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:50,752 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:52:55,777 - DEBUG - Polling for notifications...
2025-02-14 11:52:55,815 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:52:55,817 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:52:55,836 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:52:55,837 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:53:00,843 - DEBUG - Polling for notifications...
2025-02-14 11:53:00,880 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739529934 with data: None
2025-02-14 11:53:00,882 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:53:00,902 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739529934 HTTP/1.1" 200 22
2025-02-14 11:53:00,903 - DEBUG - Received response: {
  "update": -1414
}

2025-02-14 11:53:18,356 - INFO - Application started.
2025-02-14 11:53:18,356 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:53:18,356 - INFO - Attempting to log in user: test
2025-02-14 11:53:18,365 - DEBUG - Loading KWallet
2025-02-14 11:53:18,366 - DEBUG - Loading SecretService
2025-02-14 11:53:18,392 - DEBUG - Loading Windows
2025-02-14 11:53:18,393 - DEBUG - Loading chainer
2025-02-14 11:53:18,394 - DEBUG - Loading libsecret
2025-02-14 11:53:18,395 - DEBUG - Loading macOS
2025-02-14 11:53:18,529 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:53:18,532 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:53:18,542 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:53:18,552 - DEBUG - Received response
2025-02-14 11:53:18,598 - INFO - User test logged in successfully.
2025-02-14 11:53:18,598 - INFO - Starting polling for notifications.
2025-02-14 11:53:18,599 - DEBUG - Polling for notifications...
2025-02-14 11:53:18,635 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530398 with data: None
2025-02-14 11:53:18,637 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:53:18,657 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530398 HTTP/1.1" 200 22
2025-02-14 11:53:18,658 - DEBUG - Received response: {
  "update": -1878
}

2025-02-14 11:53:19,095 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:53:19,097 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:53:19,118 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:53:19,119 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:54:09,997 - INFO - Application started.
2025-02-14 11:54:09,997 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:54:09,997 - INFO - Attempting to log in user: test
2025-02-14 11:54:10,006 - DEBUG - Loading KWallet
2025-02-14 11:54:10,008 - DEBUG - Loading SecretService
2025-02-14 11:54:10,035 - DEBUG - Loading Windows
2025-02-14 11:54:10,037 - DEBUG - Loading chainer
2025-02-14 11:54:10,038 - DEBUG - Loading libsecret
2025-02-14 11:54:10,039 - DEBUG - Loading macOS
2025-02-14 11:54:10,173 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:54:10,178 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:10,190 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:54:10,200 - DEBUG - Received response
2025-02-14 11:54:10,250 - INFO - User test logged in successfully.
2025-02-14 11:54:10,251 - INFO - Starting polling for notifications.
2025-02-14 11:54:10,251 - DEBUG - Polling for notifications...
2025-02-14 11:54:10,288 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530450 with data: None
2025-02-14 11:54:10,291 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:10,310 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530450 HTTP/1.1" 200 22
2025-02-14 11:54:10,311 - DEBUG - Received response: {
  "update": -1930
}

2025-02-14 11:54:10,760 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:54:10,762 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:10,782 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:54:10,783 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:54:15,317 - DEBUG - Polling for notifications...
2025-02-14 11:54:15,354 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:15,356 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:15,375 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:15,376 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:20,382 - DEBUG - Polling for notifications...
2025-02-14 11:54:20,418 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:20,420 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:20,439 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:20,440 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:25,466 - DEBUG - Polling for notifications...
2025-02-14 11:54:25,502 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:25,504 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:25,523 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:25,524 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:30,550 - DEBUG - Polling for notifications...
2025-02-14 11:54:30,588 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:30,590 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:30,609 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:30,611 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:35,636 - DEBUG - Polling for notifications...
2025-02-14 11:54:35,672 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:35,674 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:35,693 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:35,694 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:40,716 - DEBUG - Polling for notifications...
2025-02-14 11:54:40,753 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:40,754 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:40,773 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:40,774 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:45,783 - DEBUG - Polling for notifications...
2025-02-14 11:54:45,819 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:45,820 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:45,839 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:45,840 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:50,846 - DEBUG - Polling for notifications...
2025-02-14 11:54:50,886 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:50,888 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:50,910 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:50,911 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:54:55,924 - DEBUG - Polling for notifications...
2025-02-14 11:54:55,963 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:54:55,964 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:54:55,983 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:54:55,984 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:01,009 - DEBUG - Polling for notifications...
2025-02-14 11:55:01,051 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:55:01,053 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:01,075 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:55:01,077 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:06,102 - DEBUG - Polling for notifications...
2025-02-14 11:55:06,139 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:55:06,140 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:06,159 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:55:06,160 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:11,185 - DEBUG - Polling for notifications...
2025-02-14 11:55:11,223 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:55:11,225 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:11,247 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:55:11,247 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:16,273 - DEBUG - Polling for notifications...
2025-02-14 11:55:16,307 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:55:16,309 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:16,327 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:55:16,328 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:21,354 - DEBUG - Polling for notifications...
2025-02-14 11:55:21,389 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:55:21,392 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:21,413 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:55:21,414 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:26,428 - DEBUG - Polling for notifications...
2025-02-14 11:55:26,465 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530451 with data: None
2025-02-14 11:55:26,467 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:26,486 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530451 HTTP/1.1" 200 22
2025-02-14 11:55:26,487 - DEBUG - Received response: {
  "update": -1931
}

2025-02-14 11:55:39,476 - INFO - Application started.
2025-02-14 11:55:39,476 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:55:39,477 - INFO - Attempting to log in user: test
2025-02-14 11:55:39,486 - DEBUG - Loading KWallet
2025-02-14 11:55:39,487 - DEBUG - Loading SecretService
2025-02-14 11:55:39,516 - DEBUG - Loading Windows
2025-02-14 11:55:39,517 - DEBUG - Loading chainer
2025-02-14 11:55:39,518 - DEBUG - Loading libsecret
2025-02-14 11:55:39,519 - DEBUG - Loading macOS
2025-02-14 11:55:39,647 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:55:39,650 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:39,661 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:55:39,671 - DEBUG - Received response
2025-02-14 11:55:39,717 - INFO - User test logged in successfully.
2025-02-14 11:55:39,717 - INFO - Starting polling for notifications.
2025-02-14 11:55:39,718 - DEBUG - Polling for notifications...
2025-02-14 11:55:39,755 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530539 with data: None
2025-02-14 11:55:39,757 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:39,778 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530539 HTTP/1.1" 200 22
2025-02-14 11:55:39,780 - DEBUG - Received response: {
  "update": -2019
}

2025-02-14 11:55:40,227 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:55:40,229 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:40,249 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:55:40,250 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:55:43,044 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 11:55:43,046 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:43,093 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 125
2025-02-14 11:55:43,094 - DEBUG - Received response: {
  "datetime": "2025-02-14 11:55:43",
  "log": "Error during the execution of the plugin: newPlugin",
  "status": "Error"
}

2025-02-14 11:55:44,785 - DEBUG - Polling for notifications...
2025-02-14 11:55:44,821 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530540 with data: None
2025-02-14 11:55:44,823 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:44,842 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530540 HTTP/1.1" 200 22
2025-02-14 11:55:44,843 - DEBUG - Received response: {
  "update": -2020
}

2025-02-14 11:55:49,848 - DEBUG - Polling for notifications...
2025-02-14 11:55:49,884 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530540 with data: None
2025-02-14 11:55:49,886 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:55:49,905 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530540 HTTP/1.1" 200 22
2025-02-14 11:55:49,907 - DEBUG - Received response: {
  "update": -2020
}

2025-02-14 11:57:46,477 - INFO - Application started.
2025-02-14 11:57:46,477 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:57:46,477 - INFO - Attempting to log in user: test
2025-02-14 11:57:46,487 - DEBUG - Loading KWallet
2025-02-14 11:57:46,488 - DEBUG - Loading SecretService
2025-02-14 11:57:46,514 - DEBUG - Loading Windows
2025-02-14 11:57:46,515 - DEBUG - Loading chainer
2025-02-14 11:57:46,515 - DEBUG - Loading libsecret
2025-02-14 11:57:46,516 - DEBUG - Loading macOS
2025-02-14 11:57:46,652 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:57:46,656 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:57:46,667 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:57:46,677 - DEBUG - Received response
2025-02-14 11:57:46,723 - INFO - User test logged in successfully.
2025-02-14 11:57:46,723 - INFO - Starting polling for notifications.
2025-02-14 11:57:46,724 - DEBUG - Polling for notifications...
2025-02-14 11:57:46,762 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530666 with data: None
2025-02-14 11:57:46,764 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:57:46,785 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530666 HTTP/1.1" 200 22
2025-02-14 11:57:46,786 - DEBUG - Received response: {
  "update": -2146
}

2025-02-14 11:57:47,226 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:57:47,228 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:57:47,249 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:57:47,250 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:57:51,792 - DEBUG - Polling for notifications...
2025-02-14 11:57:51,829 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530667 with data: None
2025-02-14 11:57:51,831 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:57:51,850 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530667 HTTP/1.1" 200 22
2025-02-14 11:57:51,851 - DEBUG - Received response: {
  "update": -2147
}

2025-02-14 11:59:10,647 - INFO - Application started.
2025-02-14 11:59:10,647 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 11:59:10,648 - INFO - Attempting to log in user: test
2025-02-14 11:59:10,658 - DEBUG - Loading KWallet
2025-02-14 11:59:10,660 - DEBUG - Loading SecretService
2025-02-14 11:59:10,687 - DEBUG - Loading Windows
2025-02-14 11:59:10,689 - DEBUG - Loading chainer
2025-02-14 11:59:10,690 - DEBUG - Loading libsecret
2025-02-14 11:59:10,691 - DEBUG - Loading macOS
2025-02-14 11:59:10,819 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 11:59:10,822 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:59:10,832 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 11:59:10,842 - DEBUG - Received response
2025-02-14 11:59:10,887 - INFO - User test logged in successfully.
2025-02-14 11:59:10,888 - INFO - Starting polling for notifications.
2025-02-14 11:59:10,888 - DEBUG - Polling for notifications...
2025-02-14 11:59:10,925 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530751 with data: None
2025-02-14 11:59:10,927 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:59:10,947 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530751 HTTP/1.1" 200 22
2025-02-14 11:59:10,949 - DEBUG - Received response: {
  "update": -2231
}

2025-02-14 11:59:11,375 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 11:59:11,377 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:59:11,397 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 11:59:11,398 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 11:59:15,954 - DEBUG - Polling for notifications...
2025-02-14 11:59:15,991 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530751 with data: None
2025-02-14 11:59:15,994 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:59:16,014 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530751 HTTP/1.1" 200 22
2025-02-14 11:59:16,016 - DEBUG - Received response: {
  "update": -2231
}

2025-02-14 11:59:21,021 - DEBUG - Polling for notifications...
2025-02-14 11:59:21,058 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530751 with data: None
2025-02-14 11:59:21,060 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 11:59:21,079 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530751 HTTP/1.1" 200 22
2025-02-14 11:59:21,080 - DEBUG - Received response: {
  "update": -2231
}

2025-02-14 12:00:25,219 - INFO - Application started.
2025-02-14 12:00:25,220 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:00:25,220 - INFO - Attempting to log in user: test
2025-02-14 12:00:25,230 - DEBUG - Loading KWallet
2025-02-14 12:00:25,231 - DEBUG - Loading SecretService
2025-02-14 12:00:25,256 - DEBUG - Loading Windows
2025-02-14 12:00:25,258 - DEBUG - Loading chainer
2025-02-14 12:00:25,259 - DEBUG - Loading libsecret
2025-02-14 12:00:25,259 - DEBUG - Loading macOS
2025-02-14 12:00:25,392 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:00:25,396 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:25,407 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:00:25,418 - DEBUG - Received response
2025-02-14 12:00:25,463 - INFO - User test logged in successfully.
2025-02-14 12:00:25,463 - INFO - Starting polling for notifications.
2025-02-14 12:00:25,464 - DEBUG - Polling for notifications...
2025-02-14 12:00:25,502 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530825 with data: None
2025-02-14 12:00:25,504 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:25,524 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530825 HTTP/1.1" 200 22
2025-02-14 12:00:25,525 - DEBUG - Received response: {
  "update": -2305
}

2025-02-14 12:00:25,958 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:00:25,960 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:25,981 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:00:25,982 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:00:28,602 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:28,604 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:28,625 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:28,625 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:28,663 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:28,666 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:28,687 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:28,688 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:30,531 - DEBUG - Polling for notifications...
2025-02-14 12:00:30,570 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530826 with data: None
2025-02-14 12:00:30,572 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:30,591 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530826 HTTP/1.1" 200 22
2025-02-14 12:00:30,592 - DEBUG - Received response: {
  "update": -2306
}

2025-02-14 12:00:30,631 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 12:00:30,633 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:30,658 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-14 12:00:30,698 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:00:30",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-14 12:00:35,598 - DEBUG - Polling for notifications...
2025-02-14 12:00:35,635 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739530826 with data: None
2025-02-14 12:00:35,637 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:35,656 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739530826 HTTP/1.1" 200 22
2025-02-14 12:00:35,657 - DEBUG - Received response: {
  "update": -2306
}

2025-02-14 12:00:37,426 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,427 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,448 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,449 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,486 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,487 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,508 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,509 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,579 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,581 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,602 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,603 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,639 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,641 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,661 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,662 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,747 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,749 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,769 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,770 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,807 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,809 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,830 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,831 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,900 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,901 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,922 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,923 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:37,959 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:37,961 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:37,982 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:37,983 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:38,039 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:38,041 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:38,063 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:38,064 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:00:38,103 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:00:38,105 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:00:38,126 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:00:38,127 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:05:57,268 - INFO - Application started.
2025-02-14 12:05:57,268 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:05:57,268 - INFO - Attempting to log in user: test
2025-02-14 12:05:57,277 - DEBUG - Loading KWallet
2025-02-14 12:05:57,279 - DEBUG - Loading SecretService
2025-02-14 12:05:57,305 - DEBUG - Loading Windows
2025-02-14 12:05:57,306 - DEBUG - Loading chainer
2025-02-14 12:05:57,307 - DEBUG - Loading libsecret
2025-02-14 12:05:57,308 - DEBUG - Loading macOS
2025-02-14 12:05:57,436 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:05:57,440 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:05:57,461 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:05:57,462 - DEBUG - Received response
2025-02-14 12:05:57,515 - INFO - User test logged in successfully.
2025-02-14 12:05:57,515 - INFO - Starting polling for notifications.
2025-02-14 12:05:57,517 - DEBUG - Polling for notifications...
2025-02-14 12:05:57,554 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531157 with data: None
2025-02-14 12:05:57,557 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:05:57,578 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531157 HTTP/1.1" 200 22
2025-02-14 12:05:57,579 - DEBUG - Received response: {
  "update": -2637
}

2025-02-14 12:05:58,020 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:05:58,022 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:05:58,043 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:05:58,043 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:05:59,009 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:05:59,011 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:05:59,032 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:05:59,033 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:05:59,070 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:05:59,072 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:05:59,095 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:05:59,096 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:06:01,180 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:06:01,182 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:01,202 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:06:01,203 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:06:01,239 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:06:01,241 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:01,262 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:06:01,263 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:06:02,584 - DEBUG - Polling for notifications...
2025-02-14 12:06:02,621 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:02,623 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:02,641 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:02,642 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:03,876 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-14 12:06:03,878 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:03,926 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 122
2025-02-14 12:06:03,927 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:06:03",
  "log": "Error during the execution of the plugin: saluti",
  "status": "Error"
}

2025-02-14 12:06:07,647 - DEBUG - Polling for notifications...
2025-02-14 12:06:07,684 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:07,686 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:07,705 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:07,706 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:12,731 - DEBUG - Polling for notifications...
2025-02-14 12:06:12,768 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:12,770 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:12,790 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:12,791 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:17,816 - DEBUG - Polling for notifications...
2025-02-14 12:06:17,853 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:17,855 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:17,874 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:17,875 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:22,900 - DEBUG - Polling for notifications...
2025-02-14 12:06:22,935 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:22,937 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:22,956 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:22,957 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:27,982 - DEBUG - Polling for notifications...
2025-02-14 12:06:28,019 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:28,020 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:28,039 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:28,040 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:33,066 - DEBUG - Polling for notifications...
2025-02-14 12:06:33,104 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:33,106 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:33,130 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:33,132 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:38,157 - DEBUG - Polling for notifications...
2025-02-14 12:06:38,193 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:38,195 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:38,214 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:38,214 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:43,221 - DEBUG - Polling for notifications...
2025-02-14 12:06:43,258 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:43,260 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:43,282 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:43,283 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:48,299 - DEBUG - Polling for notifications...
2025-02-14 12:06:48,340 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:48,342 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:48,361 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:48,362 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:53,388 - DEBUG - Polling for notifications...
2025-02-14 12:06:53,425 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:53,427 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:53,446 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:53,447 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:06:58,464 - DEBUG - Polling for notifications...
2025-02-14 12:06:58,499 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:06:58,501 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:06:58,520 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:06:58,521 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:07:03,546 - DEBUG - Polling for notifications...
2025-02-14 12:07:03,582 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:07:03,584 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:03,603 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:07:03,604 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:07:08,629 - DEBUG - Polling for notifications...
2025-02-14 12:07:08,665 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:07:08,667 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:08,686 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:07:08,687 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:07:13,703 - DEBUG - Polling for notifications...
2025-02-14 12:07:13,738 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:07:13,740 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:13,759 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:07:13,760 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:07:18,786 - DEBUG - Polling for notifications...
2025-02-14 12:07:18,822 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:07:18,823 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:18,842 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:07:18,843 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:07:23,868 - DEBUG - Polling for notifications...
2025-02-14 12:07:23,909 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531158 with data: None
2025-02-14 12:07:23,911 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:23,933 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531158 HTTP/1.1" 200 22
2025-02-14 12:07:23,934 - DEBUG - Received response: {
  "update": -2638
}

2025-02-14 12:07:34,328 - INFO - Application started.
2025-02-14 12:07:34,328 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:07:34,329 - INFO - Attempting to log in user: test
2025-02-14 12:07:34,337 - DEBUG - Loading KWallet
2025-02-14 12:07:34,339 - DEBUG - Loading SecretService
2025-02-14 12:07:34,365 - DEBUG - Loading Windows
2025-02-14 12:07:34,367 - DEBUG - Loading chainer
2025-02-14 12:07:34,368 - DEBUG - Loading libsecret
2025-02-14 12:07:34,369 - DEBUG - Loading macOS
2025-02-14 12:07:34,500 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:07:34,504 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:34,514 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:07:34,524 - DEBUG - Received response
2025-02-14 12:07:34,581 - INFO - User test logged in successfully.
2025-02-14 12:07:34,582 - INFO - Starting polling for notifications.
2025-02-14 12:07:34,582 - DEBUG - Polling for notifications...
2025-02-14 12:07:34,618 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531254 with data: None
2025-02-14 12:07:34,620 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:34,640 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531254 HTTP/1.1" 200 22
2025-02-14 12:07:34,641 - DEBUG - Received response: {
  "update": -2734
}

2025-02-14 12:07:58,591 - INFO - Application started.
2025-02-14 12:07:58,591 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:07:58,591 - INFO - Attempting to log in user: test
2025-02-14 12:07:58,601 - DEBUG - Loading KWallet
2025-02-14 12:07:58,603 - DEBUG - Loading SecretService
2025-02-14 12:07:58,631 - DEBUG - Loading Windows
2025-02-14 12:07:58,632 - DEBUG - Loading chainer
2025-02-14 12:07:58,633 - DEBUG - Loading libsecret
2025-02-14 12:07:58,634 - DEBUG - Loading macOS
2025-02-14 12:07:58,768 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:07:58,771 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:58,781 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:07:58,792 - DEBUG - Received response
2025-02-14 12:07:58,835 - INFO - User test logged in successfully.
2025-02-14 12:07:58,836 - INFO - Starting polling for notifications.
2025-02-14 12:07:58,837 - DEBUG - Polling for notifications...
2025-02-14 12:07:58,874 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531279 with data: None
2025-02-14 12:07:58,876 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:58,896 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531279 HTTP/1.1" 200 22
2025-02-14 12:07:58,897 - DEBUG - Received response: {
  "update": -2759
}

2025-02-14 12:07:59,346 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:07:59,348 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:07:59,369 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:07:59,370 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:08:01,753 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:08:01,755 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:01,776 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:08:01,777 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:08:01,816 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:08:01,818 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:01,839 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:08:01,840 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:08:03,903 - DEBUG - Polling for notifications...
2025-02-14 12:08:03,937 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531279 with data: None
2025-02-14 12:08:03,938 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:03,957 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531279 HTTP/1.1" 200 22
2025-02-14 12:08:03,958 - DEBUG - Received response: {
  "update": -2759
}

2025-02-14 12:08:06,850 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-14 12:08:06,853 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:06,900 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 122
2025-02-14 12:08:06,901 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:08:06",
  "log": "Error during the execution of the plugin: saluti",
  "status": "Error"
}

2025-02-14 12:08:08,963 - DEBUG - Polling for notifications...
2025-02-14 12:08:09,000 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531279 with data: None
2025-02-14 12:08:09,001 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:09,020 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531279 HTTP/1.1" 200 22
2025-02-14 12:08:09,021 - DEBUG - Received response: {
  "update": -2759
}

2025-02-14 12:08:10,249 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:08:10,251 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:10,272 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:08:10,273 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:08:10,309 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:08:10,311 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:08:10,332 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:08:10,333 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:09:13,503 - INFO - Application started.
2025-02-14 12:09:13,504 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:09:13,504 - INFO - Attempting to log in user: test
2025-02-14 12:09:13,514 - DEBUG - Loading KWallet
2025-02-14 12:09:13,515 - DEBUG - Loading SecretService
2025-02-14 12:09:13,541 - DEBUG - Loading Windows
2025-02-14 12:09:13,543 - DEBUG - Loading chainer
2025-02-14 12:09:13,543 - DEBUG - Loading libsecret
2025-02-14 12:09:13,544 - DEBUG - Loading macOS
2025-02-14 12:09:13,674 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:09:13,678 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:13,688 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:09:13,698 - DEBUG - Received response
2025-02-14 12:09:13,747 - INFO - User test logged in successfully.
2025-02-14 12:09:13,748 - INFO - Starting polling for notifications.
2025-02-14 12:09:13,749 - DEBUG - Polling for notifications...
2025-02-14 12:09:13,787 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531354 with data: None
2025-02-14 12:09:13,789 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:13,810 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531354 HTTP/1.1" 200 22
2025-02-14 12:09:13,811 - DEBUG - Received response: {
  "update": -2834
}

2025-02-14 12:09:14,239 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:09:14,241 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:14,262 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:09:14,263 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:09:15,102 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:09:15,104 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:15,124 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:09:15,125 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:09:17,529 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-14 12:09:17,531 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:17,578 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 125
2025-02-14 12:09:17,579 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:09:17",
  "log": "Error during the execution of the plugin: newPlugin",
  "status": "Error"
}

2025-02-14 12:09:18,817 - DEBUG - Polling for notifications...
2025-02-14 12:09:18,854 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531354 with data: None
2025-02-14 12:09:18,856 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:18,875 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531354 HTTP/1.1" 200 22
2025-02-14 12:09:18,876 - DEBUG - Received response: {
  "update": -2834
}

2025-02-14 12:09:23,187 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:09:23,189 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:23,210 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:09:23,211 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:09:23,879 - DEBUG - Polling for notifications...
2025-02-14 12:09:23,916 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531354 with data: None
2025-02-14 12:09:23,918 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:23,937 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531354 HTTP/1.1" 200 22
2025-02-14 12:09:23,938 - DEBUG - Received response: {
  "update": -2834
}

2025-02-14 12:09:24,605 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-14 12:09:24,607 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:24,633 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 122
2025-02-14 12:09:24,673 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:09:24",
  "log": "Error during the execution of the plugin: saluti",
  "status": "Error"
}

2025-02-14 12:09:59,747 - INFO - Application started.
2025-02-14 12:09:59,747 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:09:59,748 - INFO - Attempting to log in user: test
2025-02-14 12:09:59,758 - DEBUG - Loading KWallet
2025-02-14 12:09:59,759 - DEBUG - Loading SecretService
2025-02-14 12:09:59,786 - DEBUG - Loading Windows
2025-02-14 12:09:59,788 - DEBUG - Loading chainer
2025-02-14 12:09:59,788 - DEBUG - Loading libsecret
2025-02-14 12:09:59,790 - DEBUG - Loading macOS
2025-02-14 12:09:59,922 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:09:59,926 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:09:59,936 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:09:59,946 - DEBUG - Received response
2025-02-14 12:10:00,000 - INFO - User test logged in successfully.
2025-02-14 12:10:00,000 - INFO - Starting polling for notifications.
2025-02-14 12:10:00,001 - DEBUG - Polling for notifications...
2025-02-14 12:10:00,038 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531400 with data: None
2025-02-14 12:10:00,040 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:00,061 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531400 HTTP/1.1" 200 22
2025-02-14 12:10:00,062 - DEBUG - Received response: {
  "update": -2880
}

2025-02-14 12:10:00,490 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:10:00,492 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:00,515 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:10:00,515 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:10:02,225 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:10:02,227 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:02,248 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:10:02,248 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:10:04,716 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 12:10:04,718 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:04,765 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-14 12:10:04,766 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:10:04",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-14 12:10:05,067 - DEBUG - Polling for notifications...
2025-02-14 12:10:05,104 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531401 with data: None
2025-02-14 12:10:05,106 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:05,127 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531401 HTTP/1.1" 200 22
2025-02-14 12:10:05,127 - DEBUG - Received response: {
  "update": -2881
}

2025-02-14 12:10:06,544 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:10:06,546 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:06,567 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:10:06,568 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:10:07,539 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:10:07,541 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:10:07,561 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:10:07,562 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:11:06,211 - INFO - Application started.
2025-02-14 12:11:06,211 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:11:06,211 - INFO - Attempting to log in user: test
2025-02-14 12:11:06,221 - DEBUG - Loading KWallet
2025-02-14 12:11:06,223 - DEBUG - Loading SecretService
2025-02-14 12:11:06,249 - DEBUG - Loading Windows
2025-02-14 12:11:06,251 - DEBUG - Loading chainer
2025-02-14 12:11:06,252 - DEBUG - Loading libsecret
2025-02-14 12:11:06,253 - DEBUG - Loading macOS
2025-02-14 12:11:06,387 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:11:06,391 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:06,401 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:11:06,411 - DEBUG - Received response
2025-02-14 12:11:06,457 - INFO - User test logged in successfully.
2025-02-14 12:11:06,457 - INFO - Starting polling for notifications.
2025-02-14 12:11:06,458 - DEBUG - Polling for notifications...
2025-02-14 12:11:06,494 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531466 with data: None
2025-02-14 12:11:06,497 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:06,518 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531466 HTTP/1.1" 200 22
2025-02-14 12:11:06,519 - DEBUG - Received response: {
  "update": -2946
}

2025-02-14 12:11:06,917 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:11:06,919 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:06,940 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:11:06,941 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:11:08,571 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:11:08,573 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:08,594 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:11:08,595 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:11:09,557 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-14 12:11:09,559 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:09,579 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-14 12:11:09,580 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:11:11,525 - DEBUG - Polling for notifications...
2025-02-14 12:11:11,560 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531467 with data: None
2025-02-14 12:11:11,561 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:11,581 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531467 HTTP/1.1" 200 22
2025-02-14 12:11:11,582 - DEBUG - Received response: {
  "update": -2947
}

2025-02-14 12:11:39,749 - INFO - Application started.
2025-02-14 12:11:39,750 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:11:39,750 - INFO - Attempting to log in user: test
2025-02-14 12:11:39,759 - DEBUG - Loading KWallet
2025-02-14 12:11:39,760 - DEBUG - Loading SecretService
2025-02-14 12:11:39,787 - DEBUG - Loading Windows
2025-02-14 12:11:39,789 - DEBUG - Loading chainer
2025-02-14 12:11:39,790 - DEBUG - Loading libsecret
2025-02-14 12:11:39,790 - DEBUG - Loading macOS
2025-02-14 12:11:39,922 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:11:39,926 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:39,936 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:11:39,947 - DEBUG - Received response
2025-02-14 12:11:40,002 - INFO - User test logged in successfully.
2025-02-14 12:11:40,002 - INFO - Starting polling for notifications.
2025-02-14 12:11:40,003 - DEBUG - Polling for notifications...
2025-02-14 12:11:40,039 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531500 with data: None
2025-02-14 12:11:40,041 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:40,061 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531500 HTTP/1.1" 200 22
2025-02-14 12:11:40,062 - DEBUG - Received response: {
  "update": -2980
}

2025-02-14 12:11:40,502 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:11:40,503 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:40,524 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:11:40,525 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:11:59,142 - INFO - Application started.
2025-02-14 12:11:59,142 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:11:59,143 - INFO - Attempting to log in user: test
2025-02-14 12:11:59,152 - DEBUG - Loading KWallet
2025-02-14 12:11:59,153 - DEBUG - Loading SecretService
2025-02-14 12:11:59,183 - DEBUG - Loading Windows
2025-02-14 12:11:59,184 - DEBUG - Loading chainer
2025-02-14 12:11:59,185 - DEBUG - Loading libsecret
2025-02-14 12:11:59,186 - DEBUG - Loading macOS
2025-02-14 12:11:59,323 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:11:59,328 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:59,349 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:11:59,350 - DEBUG - Received response
2025-02-14 12:11:59,402 - INFO - User test logged in successfully.
2025-02-14 12:11:59,403 - INFO - Starting polling for notifications.
2025-02-14 12:11:59,403 - DEBUG - Polling for notifications...
2025-02-14 12:11:59,441 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531519 with data: None
2025-02-14 12:11:59,443 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:59,464 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531519 HTTP/1.1" 200 22
2025-02-14 12:11:59,465 - DEBUG - Received response: {
  "update": -2999
}

2025-02-14 12:11:59,889 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:11:59,891 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:11:59,911 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:11:59,912 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:12:48,973 - INFO - Application started.
2025-02-14 12:12:48,973 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:12:48,974 - INFO - Attempting to log in user: test
2025-02-14 12:12:48,983 - DEBUG - Loading KWallet
2025-02-14 12:12:48,985 - DEBUG - Loading SecretService
2025-02-14 12:12:49,011 - DEBUG - Loading Windows
2025-02-14 12:12:49,013 - DEBUG - Loading chainer
2025-02-14 12:12:49,013 - DEBUG - Loading libsecret
2025-02-14 12:12:49,014 - DEBUG - Loading macOS
2025-02-14 12:12:49,150 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:12:49,154 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:49,165 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:12:49,175 - DEBUG - Received response
2025-02-14 12:12:49,238 - INFO - User test logged in successfully.
2025-02-14 12:12:49,238 - INFO - Starting polling for notifications.
2025-02-14 12:12:49,239 - DEBUG - Polling for notifications...
2025-02-14 12:12:49,276 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531569 with data: None
2025-02-14 12:12:49,278 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:49,298 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531569 HTTP/1.1" 200 22
2025-02-14 12:12:49,299 - DEBUG - Received response: {
  "update": -3049
}

2025-02-14 12:12:49,754 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:12:49,756 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:49,777 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:12:49,778 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:12:50,852 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:12:50,854 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:50,874 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:12:50,875 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:12:53,062 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:12:53,064 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:53,086 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:12:53,087 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:12:54,305 - DEBUG - Polling for notifications...
2025-02-14 12:12:54,343 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531570 with data: None
2025-02-14 12:12:54,345 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:54,365 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531570 HTTP/1.1" 200 22
2025-02-14 12:12:54,366 - DEBUG - Received response: {
  "update": -3050
}

2025-02-14 12:12:59,372 - DEBUG - Polling for notifications...
2025-02-14 12:12:59,408 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531570 with data: None
2025-02-14 12:12:59,410 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:12:59,429 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531570 HTTP/1.1" 200 22
2025-02-14 12:12:59,430 - DEBUG - Received response: {
  "update": -3050
}

2025-02-14 12:14:54,588 - INFO - Application started.
2025-02-14 12:14:54,588 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:14:54,588 - INFO - Attempting to log in user: test
2025-02-14 12:14:54,599 - DEBUG - Loading KWallet
2025-02-14 12:14:54,601 - DEBUG - Loading SecretService
2025-02-14 12:14:54,630 - DEBUG - Loading Windows
2025-02-14 12:14:54,632 - DEBUG - Loading chainer
2025-02-14 12:14:54,633 - DEBUG - Loading libsecret
2025-02-14 12:14:54,634 - DEBUG - Loading macOS
2025-02-14 12:14:54,771 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:14:54,775 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:14:54,786 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:14:54,796 - DEBUG - Received response
2025-02-14 12:14:54,850 - INFO - User test logged in successfully.
2025-02-14 12:14:54,851 - INFO - Starting polling for notifications.
2025-02-14 12:14:54,851 - DEBUG - Polling for notifications...
2025-02-14 12:14:54,887 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531695 with data: None
2025-02-14 12:14:54,889 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:14:54,909 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531695 HTTP/1.1" 200 22
2025-02-14 12:14:54,911 - DEBUG - Received response: {
  "update": -3175
}

2025-02-14 12:14:55,330 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:14:55,331 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:14:55,352 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:14:55,353 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:14:56,648 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:14:56,650 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:14:56,670 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:14:56,671 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:14:59,914 - DEBUG - Polling for notifications...
2025-02-14 12:14:59,952 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531695 with data: None
2025-02-14 12:14:59,954 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:14:59,973 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531695 HTTP/1.1" 200 22
2025-02-14 12:14:59,974 - DEBUG - Received response: {
  "update": -3175
}

2025-02-14 12:15:04,979 - DEBUG - Polling for notifications...
2025-02-14 12:15:05,017 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531695 with data: None
2025-02-14 12:15:05,019 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:15:05,038 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531695 HTTP/1.1" 200 22
2025-02-14 12:15:05,039 - DEBUG - Received response: {
  "update": -3175
}

2025-02-14 12:15:10,045 - DEBUG - Polling for notifications...
2025-02-14 12:15:10,081 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531695 with data: None
2025-02-14 12:15:10,083 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:15:10,103 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531695 HTTP/1.1" 200 22
2025-02-14 12:15:10,104 - DEBUG - Received response: {
  "update": -3175
}

2025-02-14 12:15:15,109 - DEBUG - Polling for notifications...
2025-02-14 12:15:15,146 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531695 with data: None
2025-02-14 12:15:15,148 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:15:15,168 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531695 HTTP/1.1" 200 22
2025-02-14 12:15:15,169 - DEBUG - Received response: {
  "update": -3175
}

2025-02-14 12:17:10,758 - INFO - Application started.
2025-02-14 12:17:10,758 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:17:10,758 - INFO - Attempting to log in user: test
2025-02-14 12:17:10,768 - DEBUG - Loading KWallet
2025-02-14 12:17:10,769 - DEBUG - Loading SecretService
2025-02-14 12:17:10,798 - DEBUG - Loading Windows
2025-02-14 12:17:10,800 - DEBUG - Loading chainer
2025-02-14 12:17:10,801 - DEBUG - Loading libsecret
2025-02-14 12:17:10,802 - DEBUG - Loading macOS
2025-02-14 12:17:10,934 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:17:10,938 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:17:10,948 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:17:10,958 - DEBUG - Received response
2025-02-14 12:17:11,003 - INFO - User test logged in successfully.
2025-02-14 12:17:11,003 - INFO - Starting polling for notifications.
2025-02-14 12:17:11,004 - DEBUG - Polling for notifications...
2025-02-14 12:17:11,041 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531831 with data: None
2025-02-14 12:17:11,044 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:17:11,064 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531831 HTTP/1.1" 200 22
2025-02-14 12:17:11,065 - DEBUG - Received response: {
  "update": -3311
}

2025-02-14 12:18:47,255 - INFO - Application started.
2025-02-14 12:18:47,255 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:18:47,256 - INFO - Attempting to log in user: test
2025-02-14 12:18:47,265 - DEBUG - Loading KWallet
2025-02-14 12:18:47,267 - DEBUG - Loading SecretService
2025-02-14 12:18:47,294 - DEBUG - Loading Windows
2025-02-14 12:18:47,296 - DEBUG - Loading chainer
2025-02-14 12:18:47,296 - DEBUG - Loading libsecret
2025-02-14 12:18:47,298 - DEBUG - Loading macOS
2025-02-14 12:18:47,434 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:18:47,439 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:47,448 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:18:47,458 - DEBUG - Received response
2025-02-14 12:18:47,502 - INFO - User test logged in successfully.
2025-02-14 12:18:47,502 - INFO - Starting polling for notifications.
2025-02-14 12:18:47,503 - DEBUG - Polling for notifications...
2025-02-14 12:18:47,541 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531927 with data: None
2025-02-14 12:18:47,543 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:47,563 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531927 HTTP/1.1" 200 22
2025-02-14 12:18:47,564 - DEBUG - Received response: {
  "update": -3407
}

2025-02-14 12:18:48,006 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:18:48,007 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:48,028 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:18:48,029 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:18:49,286 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:18:49,288 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:49,309 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:18:49,310 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:18:51,507 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 12:18:51,509 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:51,535 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-14 12:18:51,575 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:18:51",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-14 12:18:52,569 - DEBUG - Polling for notifications...
2025-02-14 12:18:52,607 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:18:52,609 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:52,628 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:18:52,629 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:18:57,634 - DEBUG - Polling for notifications...
2025-02-14 12:18:57,670 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:18:57,672 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:18:57,691 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:18:57,692 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:02,696 - DEBUG - Polling for notifications...
2025-02-14 12:19:02,735 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:02,737 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:02,757 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:02,758 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:07,776 - DEBUG - Polling for notifications...
2025-02-14 12:19:07,812 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:07,814 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:07,833 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:07,833 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:12,859 - DEBUG - Polling for notifications...
2025-02-14 12:19:12,898 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:12,900 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:12,919 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:12,920 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:17,928 - DEBUG - Polling for notifications...
2025-02-14 12:19:17,966 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:17,968 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:17,988 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:17,989 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:23,011 - DEBUG - Polling for notifications...
2025-02-14 12:19:23,048 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:23,050 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:23,069 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:23,070 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:28,095 - DEBUG - Polling for notifications...
2025-02-14 12:19:28,133 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:28,135 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:28,154 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:28,155 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:33,180 - DEBUG - Polling for notifications...
2025-02-14 12:19:33,218 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:33,220 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:33,239 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:33,240 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:38,265 - DEBUG - Polling for notifications...
2025-02-14 12:19:38,304 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531928 with data: None
2025-02-14 12:19:38,305 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:38,324 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531928 HTTP/1.1" 200 22
2025-02-14 12:19:38,325 - DEBUG - Received response: {
  "update": -3408
}

2025-02-14 12:19:50,386 - INFO - Application started.
2025-02-14 12:19:50,386 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:19:50,386 - INFO - Attempting to log in user: test
2025-02-14 12:19:50,399 - DEBUG - Loading KWallet
2025-02-14 12:19:50,400 - DEBUG - Loading SecretService
2025-02-14 12:19:50,428 - DEBUG - Loading Windows
2025-02-14 12:19:50,430 - DEBUG - Loading chainer
2025-02-14 12:19:50,431 - DEBUG - Loading libsecret
2025-02-14 12:19:50,432 - DEBUG - Loading macOS
2025-02-14 12:19:50,573 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:19:50,577 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:50,587 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:19:50,597 - DEBUG - Received response
2025-02-14 12:19:50,645 - INFO - User test logged in successfully.
2025-02-14 12:19:50,645 - INFO - Starting polling for notifications.
2025-02-14 12:19:50,646 - DEBUG - Polling for notifications...
2025-02-14 12:19:50,684 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531990 with data: None
2025-02-14 12:19:50,686 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:50,707 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531990 HTTP/1.1" 200 22
2025-02-14 12:19:50,708 - DEBUG - Received response: {
  "update": -3470
}

2025-02-14 12:19:51,139 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:19:51,141 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:51,162 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:19:51,163 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:19:52,137 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:19:52,139 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:52,160 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:19:52,161 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:19:55,713 - DEBUG - Polling for notifications...
2025-02-14 12:19:55,750 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531991 with data: None
2025-02-14 12:19:55,752 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:19:55,771 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531991 HTTP/1.1" 200 22
2025-02-14 12:19:55,772 - DEBUG - Received response: {
  "update": -3471
}

2025-02-14 12:20:00,778 - DEBUG - Polling for notifications...
2025-02-14 12:20:00,815 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531991 with data: None
2025-02-14 12:20:00,817 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:20:00,836 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531991 HTTP/1.1" 200 22
2025-02-14 12:20:00,837 - DEBUG - Received response: {
  "update": -3471
}

2025-02-14 12:20:05,842 - DEBUG - Polling for notifications...
2025-02-14 12:20:05,879 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531991 with data: None
2025-02-14 12:20:05,881 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:20:05,900 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531991 HTTP/1.1" 200 22
2025-02-14 12:20:05,901 - DEBUG - Received response: {
  "update": -3471
}

2025-02-14 12:20:10,906 - DEBUG - Polling for notifications...
2025-02-14 12:20:10,945 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531991 with data: None
2025-02-14 12:20:10,947 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:20:10,965 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531991 HTTP/1.1" 200 22
2025-02-14 12:20:10,966 - DEBUG - Received response: {
  "update": -3471
}

2025-02-14 12:20:15,992 - DEBUG - Polling for notifications...
2025-02-14 12:20:16,029 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739531991 with data: None
2025-02-14 12:20:16,031 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:20:16,050 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739531991 HTTP/1.1" 200 22
2025-02-14 12:20:16,051 - DEBUG - Received response: {
  "update": -3471
}

2025-02-14 12:23:15,556 - INFO - Application started.
2025-02-14 12:23:15,556 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:23:15,557 - INFO - Attempting to log in user: test
2025-02-14 12:23:15,568 - DEBUG - Loading KWallet
2025-02-14 12:23:15,569 - DEBUG - Loading SecretService
2025-02-14 12:23:15,597 - DEBUG - Loading Windows
2025-02-14 12:23:15,599 - DEBUG - Loading chainer
2025-02-14 12:23:15,599 - DEBUG - Loading libsecret
2025-02-14 12:23:15,600 - DEBUG - Loading macOS
2025-02-14 12:23:15,731 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:23:15,735 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:15,744 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:23:15,755 - DEBUG - Received response
2025-02-14 12:23:15,809 - INFO - User test logged in successfully.
2025-02-14 12:23:15,810 - INFO - Starting polling for notifications.
2025-02-14 12:23:15,811 - DEBUG - Polling for notifications...
2025-02-14 12:23:15,847 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:15,849 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:15,871 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:15,872 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:16,313 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:23:16,315 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:16,336 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:23:16,336 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:23:17,472 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-14 12:23:17,474 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:17,494 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-14 12:23:17,495 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:23:20,877 - DEBUG - Polling for notifications...
2025-02-14 12:23:20,915 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:20,917 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:20,936 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:20,937 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:25,942 - DEBUG - Polling for notifications...
2025-02-14 12:23:25,977 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:25,978 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:25,998 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:25,999 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:31,005 - DEBUG - Polling for notifications...
2025-02-14 12:23:31,042 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:31,044 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:31,063 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:31,064 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:36,069 - DEBUG - Polling for notifications...
2025-02-14 12:23:36,106 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:36,108 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:36,127 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:36,128 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:41,133 - DEBUG - Polling for notifications...
2025-02-14 12:23:41,172 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:41,174 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:41,193 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:41,194 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:46,198 - DEBUG - Polling for notifications...
2025-02-14 12:23:46,235 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:46,237 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:46,257 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:46,257 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:51,263 - DEBUG - Polling for notifications...
2025-02-14 12:23:51,301 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:51,303 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:51,322 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:51,323 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:23:56,328 - DEBUG - Polling for notifications...
2025-02-14 12:23:56,366 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:23:56,368 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:23:56,387 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:23:56,388 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:24:01,393 - DEBUG - Polling for notifications...
2025-02-14 12:24:01,430 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739532196 with data: None
2025-02-14 12:24:01,432 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:24:01,451 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739532196 HTTP/1.1" 200 22
2025-02-14 12:24:01,452 - DEBUG - Received response: {
  "update": -3676
}

2025-02-14 12:49:43,546 - INFO - Application started.
2025-02-14 12:49:43,546 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-14 12:49:43,547 - INFO - Attempting to log in user: test
2025-02-14 12:49:43,561 - DEBUG - Loading KWallet
2025-02-14 12:49:43,562 - DEBUG - Loading SecretService
2025-02-14 12:49:43,592 - DEBUG - Loading Windows
2025-02-14 12:49:43,593 - DEBUG - Loading chainer
2025-02-14 12:49:43,594 - DEBUG - Loading libsecret
2025-02-14 12:49:43,595 - DEBUG - Loading macOS
2025-02-14 12:49:43,730 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-14 12:49:43,733 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:49:43,745 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-14 12:49:43,756 - DEBUG - Received response
2025-02-14 12:49:43,810 - INFO - User test logged in successfully.
2025-02-14 12:49:43,810 - INFO - Starting polling for notifications.
2025-02-14 12:49:43,811 - DEBUG - Polling for notifications...
2025-02-14 12:49:43,848 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739533784 with data: None
2025-02-14 12:49:43,850 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:49:43,872 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739533784 HTTP/1.1" 200 20
2025-02-14 12:49:43,873 - DEBUG - Received response: {
  "update": -15
}

2025-02-14 12:49:44,376 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-14 12:49:44,378 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:49:44,405 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-14 12:49:44,406 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-14 12:49:46,066 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-14 12:49:46,068 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:49:46,092 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-14 12:49:46,092 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-14 12:49:47,510 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-14 12:49:47,511 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:49:47,541 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-14 12:49:47,581 - DEBUG - Received response: {
  "datetime": "2025-02-14 12:49:47",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-14 12:49:48,879 - DEBUG - Polling for notifications...
2025-02-14 12:49:48,917 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739533784 with data: None
2025-02-14 12:49:48,919 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-14 12:49:48,938 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739533784 HTTP/1.1" 200 20
2025-02-14 12:49:48,939 - DEBUG - Received response: {
  "update": -15
}

2025-02-15 10:07:03,969 - INFO - Application started.
2025-02-15 10:07:03,969 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:07:03,970 - INFO - Attempting to log in user: test
2025-02-15 10:07:03,978 - DEBUG - Loading KWallet
2025-02-15 10:07:03,979 - DEBUG - Loading SecretService
2025-02-15 10:07:04,005 - DEBUG - Loading Windows
2025-02-15 10:07:04,006 - DEBUG - Loading chainer
2025-02-15 10:07:04,007 - DEBUG - Loading libsecret
2025-02-15 10:07:04,007 - DEBUG - Loading macOS
2025-02-15 10:07:04,139 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:07:04,143 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:07:04,157 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:07:04,167 - DEBUG - Received response
2025-02-15 10:07:04,215 - INFO - User test logged in successfully.
2025-02-15 10:07:04,216 - INFO - Starting polling for notifications.
2025-02-15 10:07:04,216 - DEBUG - Polling for notifications...
2025-02-15 10:07:04,253 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739610424 with data: None
2025-02-15 10:07:04,255 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:07:04,276 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739610424 HTTP/1.1" 200 19
2025-02-15 10:07:04,277 - DEBUG - Received response: {
  "update": -3
}

2025-02-15 10:07:04,768 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:07:04,770 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:07:04,798 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:07:04,798 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:07:06,914 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 10:07:06,916 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:07:06,940 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 10:07:06,941 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:07:08,696 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 10:07:08,698 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:07:08,724 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-15 10:07:08,765 - DEBUG - Received response: {
  "datetime": "2025-02-15 10:07:08",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-15 10:07:09,282 - DEBUG - Polling for notifications...
2025-02-15 10:07:09,320 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739610425 with data: None
2025-02-15 10:07:09,321 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:07:09,340 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739610425 HTTP/1.1" 200 19
2025-02-15 10:07:09,341 - DEBUG - Received response: {
  "update": -4
}

2025-02-15 10:15:26,507 - INFO - Application started.
2025-02-15 10:15:26,507 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:15:26,507 - INFO - Attempting to log in user: test
2025-02-15 10:15:26,516 - DEBUG - Loading KWallet
2025-02-15 10:15:26,517 - DEBUG - Loading SecretService
2025-02-15 10:15:26,542 - DEBUG - Loading Windows
2025-02-15 10:15:26,544 - DEBUG - Loading chainer
2025-02-15 10:15:26,545 - DEBUG - Loading libsecret
2025-02-15 10:15:26,546 - DEBUG - Loading macOS
2025-02-15 10:15:26,681 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:15:26,686 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:15:26,703 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:15:26,713 - DEBUG - Received response
2025-02-15 10:15:26,772 - INFO - User test logged in successfully.
2025-02-15 10:15:26,773 - INFO - Starting polling for notifications.
2025-02-15 10:15:26,773 - DEBUG - Polling for notifications...
2025-02-15 10:15:26,812 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739610927 with data: None
2025-02-15 10:15:26,815 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:15:26,836 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739610927 HTTP/1.1" 200 20
2025-02-15 10:15:26,838 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:15:27,316 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:15:27,318 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:15:27,344 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:15:27,345 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:15:29,200 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-15 10:15:29,202 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:15:29,225 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-15 10:15:29,226 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:15:31,224 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-15 10:15:31,226 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:15:31,255 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 122
2025-02-15 10:15:31,296 - DEBUG - Received response: {
  "datetime": "2025-02-15 10:15:31",
  "log": "Error during the execution of the plugin: saluti",
  "status": "Error"
}

2025-02-15 10:15:31,843 - DEBUG - Polling for notifications...
2025-02-15 10:15:31,879 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739610927 with data: None
2025-02-15 10:15:31,881 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:15:31,900 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739610927 HTTP/1.1" 200 20
2025-02-15 10:15:31,901 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:28:01,095 - INFO - Application started.
2025-02-15 10:28:01,095 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:28:01,095 - INFO - Attempting to log in user: test
2025-02-15 10:28:01,105 - DEBUG - Loading KWallet
2025-02-15 10:28:01,107 - DEBUG - Loading SecretService
2025-02-15 10:28:01,135 - DEBUG - Loading Windows
2025-02-15 10:28:01,137 - DEBUG - Loading chainer
2025-02-15 10:28:01,137 - DEBUG - Loading libsecret
2025-02-15 10:28:01,138 - DEBUG - Loading macOS
2025-02-15 10:28:01,276 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:28:01,279 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:28:01,291 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:28:01,302 - DEBUG - Received response
2025-02-15 10:28:01,356 - INFO - User test logged in successfully.
2025-02-15 10:28:01,357 - INFO - Starting polling for notifications.
2025-02-15 10:28:01,357 - DEBUG - Polling for notifications...
2025-02-15 10:28:01,395 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739611681 with data: None
2025-02-15 10:28:01,397 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:28:01,418 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739611681 HTTP/1.1" 200 20
2025-02-15 10:28:01,419 - DEBUG - Received response: {
  "update": -13
}

2025-02-15 10:28:01,837 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:28:01,838 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:28:01,865 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:28:01,865 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:29:47,775 - INFO - Application started.
2025-02-15 10:29:47,775 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:29:47,776 - INFO - Attempting to log in user: test
2025-02-15 10:29:47,785 - DEBUG - Loading KWallet
2025-02-15 10:29:47,786 - DEBUG - Loading SecretService
2025-02-15 10:29:47,812 - DEBUG - Loading Windows
2025-02-15 10:29:47,813 - DEBUG - Loading chainer
2025-02-15 10:29:47,814 - DEBUG - Loading libsecret
2025-02-15 10:29:47,815 - DEBUG - Loading macOS
2025-02-15 10:29:47,946 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:29:47,950 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:47,963 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:29:47,974 - DEBUG - Received response
2025-02-15 10:29:48,029 - INFO - User test logged in successfully.
2025-02-15 10:29:48,030 - INFO - Starting polling for notifications.
2025-02-15 10:29:48,030 - DEBUG - Polling for notifications...
2025-02-15 10:29:48,066 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739611788 with data: None
2025-02-15 10:29:48,068 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:48,089 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739611788 HTTP/1.1" 200 19
2025-02-15 10:29:48,090 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 10:29:48,506 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:29:48,508 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:48,534 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:29:48,535 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:29:49,845 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 10:29:49,847 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:49,870 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 10:29:49,871 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:29:51,553 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 10:29:51,555 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:51,602 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 124
2025-02-15 10:29:51,602 - DEBUG - Received response: {
  "datetime": "2025-02-15 10:29:51",
  "log": "Error during the execution of the plugin: pluginEs",
  "status": "Error"
}

2025-02-15 10:29:53,096 - DEBUG - Polling for notifications...
2025-02-15 10:29:53,132 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739611789 with data: None
2025-02-15 10:29:53,134 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:53,153 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739611789 HTTP/1.1" 200 19
2025-02-15 10:29:53,154 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 10:29:58,160 - DEBUG - Polling for notifications...
2025-02-15 10:29:58,196 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739611789 with data: None
2025-02-15 10:29:58,197 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:29:58,216 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739611789 HTTP/1.1" 200 19
2025-02-15 10:29:58,217 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 10:30:03,223 - DEBUG - Polling for notifications...
2025-02-15 10:30:03,260 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739611789 with data: None
2025-02-15 10:30:03,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:30:03,282 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739611789 HTTP/1.1" 200 19
2025-02-15 10:30:03,283 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 10:36:35,965 - INFO - Application started.
2025-02-15 10:36:35,966 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:36:35,966 - INFO - Attempting to log in user: test
2025-02-15 10:36:35,976 - DEBUG - Loading KWallet
2025-02-15 10:36:35,978 - DEBUG - Loading SecretService
2025-02-15 10:36:36,005 - DEBUG - Loading Windows
2025-02-15 10:36:36,007 - DEBUG - Loading chainer
2025-02-15 10:36:36,007 - DEBUG - Loading libsecret
2025-02-15 10:36:36,009 - DEBUG - Loading macOS
2025-02-15 10:36:36,145 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:36:36,149 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:36,161 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:36:36,171 - DEBUG - Received response
2025-02-15 10:36:36,224 - INFO - User test logged in successfully.
2025-02-15 10:36:36,224 - INFO - Starting polling for notifications.
2025-02-15 10:36:36,225 - DEBUG - Polling for notifications...
2025-02-15 10:36:36,260 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612196 with data: None
2025-02-15 10:36:36,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:36,285 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612196 HTTP/1.1" 200 19
2025-02-15 10:36:36,286 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 10:36:36,715 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:36:36,717 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:36,743 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:36:36,744 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:36:38,194 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 10:36:38,196 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:38,219 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 10:36:38,221 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:36:40,321 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 10:36:40,322 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:40,342 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17141
2025-02-15 10:36:40,383 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "bvCUuOXVw13FgQredGMt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124492919980880">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124492918547040">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124492918547152">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124492918547264">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124492918547376">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124492918547488">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124492918547600">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124492918553760">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>name, extension = plugin.name.split(&#39;.&#39;)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(name,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-124492918607200">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:36:40,383 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "bvCUuOXVw13FgQredGMt";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124492919980880">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124492918547040">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124492918547152">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124492918547264">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124492918547376">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124492918547488">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124492918547600">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124492918553760">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>name, extension = plugin.name.split(&#39;.&#39;)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(name,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-124492918607200">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:36:41,291 - DEBUG - Polling for notifications...
2025-02-15 10:36:41,328 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612197 with data: None
2025-02-15 10:36:41,330 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:41,350 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612197 HTTP/1.1" 200 20
2025-02-15 10:36:41,351 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:36:46,357 - DEBUG - Polling for notifications...
2025-02-15 10:36:46,393 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612197 with data: None
2025-02-15 10:36:46,395 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:36:46,414 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612197 HTTP/1.1" 200 20
2025-02-15 10:36:46,415 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:38:40,989 - INFO - Application started.
2025-02-15 10:38:40,990 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:38:40,990 - INFO - Attempting to log in user: test
2025-02-15 10:38:40,999 - DEBUG - Loading KWallet
2025-02-15 10:38:41,001 - DEBUG - Loading SecretService
2025-02-15 10:38:41,028 - DEBUG - Loading Windows
2025-02-15 10:38:41,029 - DEBUG - Loading chainer
2025-02-15 10:38:41,030 - DEBUG - Loading libsecret
2025-02-15 10:38:41,031 - DEBUG - Loading macOS
2025-02-15 10:38:41,167 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:38:41,171 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:38:41,195 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:38:41,196 - DEBUG - Received response
2025-02-15 10:38:41,242 - INFO - User test logged in successfully.
2025-02-15 10:38:41,243 - INFO - Starting polling for notifications.
2025-02-15 10:38:41,244 - DEBUG - Polling for notifications...
2025-02-15 10:38:41,283 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612321 with data: None
2025-02-15 10:38:41,285 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:38:41,306 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612321 HTTP/1.1" 200 20
2025-02-15 10:38:41,308 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:38:41,735 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:38:41,736 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:38:41,762 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:38:41,763 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:38:42,775 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 10:38:42,776 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:38:42,800 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 10:38:42,801 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:38:44,304 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 10:38:44,306 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:38:44,354 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17141
2025-02-15 10:38:44,354 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "gok5dvKhTwMB57PaNd6L";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-130656895321360">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-130656885056208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-130656885056320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-130656885056432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-130656885056544">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-130656885056656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-130656885056768">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-130656885062928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>name, extension = plugin.name.split(&#39;.&#39;)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(name,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-130656885116368">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:38:44,355 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "gok5dvKhTwMB57PaNd6L";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-130656895321360">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-130656885056208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-130656885056320">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-130656885056432">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-130656885056544">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-130656885056656">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-130656885056768">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-130656885062928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>name, extension = plugin.name.split(&#39;.&#39;)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(name,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-130656885116368">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:38:46,314 - DEBUG - Polling for notifications...
2025-02-15 10:38:46,350 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612322 with data: None
2025-02-15 10:38:46,352 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:38:46,371 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612322 HTTP/1.1" 200 20
2025-02-15 10:38:46,372 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 10:43:42,211 - INFO - Application started.
2025-02-15 10:43:42,212 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:43:42,212 - INFO - Attempting to log in user: test
2025-02-15 10:43:42,221 - DEBUG - Loading KWallet
2025-02-15 10:43:42,222 - DEBUG - Loading SecretService
2025-02-15 10:43:42,248 - DEBUG - Loading Windows
2025-02-15 10:43:42,249 - DEBUG - Loading chainer
2025-02-15 10:43:42,250 - DEBUG - Loading libsecret
2025-02-15 10:43:42,250 - DEBUG - Loading macOS
2025-02-15 10:43:42,386 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:43:42,390 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:43:42,403 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:43:42,413 - DEBUG - Received response
2025-02-15 10:43:42,461 - INFO - User test logged in successfully.
2025-02-15 10:43:42,461 - INFO - Starting polling for notifications.
2025-02-15 10:43:42,462 - DEBUG - Polling for notifications...
2025-02-15 10:43:42,498 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612622 with data: None
2025-02-15 10:43:42,500 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:43:42,521 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612622 HTTP/1.1" 200 20
2025-02-15 10:43:42,522 - DEBUG - Received response: {
  "update": -17
}

2025-02-15 10:43:42,946 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:43:42,948 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:43:42,974 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:43:42,975 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:43:43,975 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 10:43:43,977 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:43:44,001 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 10:43:44,002 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:43:45,629 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 10:43:45,631 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:43:45,679 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17141
2025-02-15 10:43:45,680 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "rlqE2QW2wQE36N7gIsdc";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-136344566497456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-136344556249808">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-136344556249920">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-136344556250032">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-136344556250144">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-136344556250256">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-136344556250368">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-136344556256528">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>name, extension = plugin.name.split(&#39;.&#39;)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(name,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-136344556309968">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:43:45,681 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "rlqE2QW2wQE36N7gIsdc";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-136344566497456">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-136344556249808">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-136344556249920">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-136344556250032">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-136344556250144">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-136344556250256">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-136344556250368">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-136344556256528">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>name, extension = plugin.name.split(&#39;.&#39;)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(name,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-136344556309968">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:43:47,528 - DEBUG - Polling for notifications...
2025-02-15 10:43:47,565 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612623 with data: None
2025-02-15 10:43:47,567 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:43:47,586 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612623 HTTP/1.1" 200 20
2025-02-15 10:43:47,587 - DEBUG - Received response: {
  "update": -18
}

2025-02-15 10:46:20,182 - INFO - Application started.
2025-02-15 10:46:20,182 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:46:20,182 - INFO - Attempting to log in user: test
2025-02-15 10:46:20,192 - DEBUG - Loading KWallet
2025-02-15 10:46:20,194 - DEBUG - Loading SecretService
2025-02-15 10:46:20,220 - DEBUG - Loading Windows
2025-02-15 10:46:20,222 - DEBUG - Loading chainer
2025-02-15 10:46:20,222 - DEBUG - Loading libsecret
2025-02-15 10:46:20,223 - DEBUG - Loading macOS
2025-02-15 10:46:20,352 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:46:20,356 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:46:20,368 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:46:20,378 - DEBUG - Received response
2025-02-15 10:46:20,422 - INFO - User test logged in successfully.
2025-02-15 10:46:20,423 - INFO - Starting polling for notifications.
2025-02-15 10:46:20,423 - DEBUG - Polling for notifications...
2025-02-15 10:46:20,461 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612780 with data: None
2025-02-15 10:46:20,463 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:46:20,483 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612780 HTTP/1.1" 200 19
2025-02-15 10:46:20,484 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 10:46:20,937 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:46:20,939 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:46:20,965 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:46:20,966 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:46:22,385 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 10:46:22,387 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:46:22,410 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 10:46:22,411 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:46:24,016 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 10:46:24,018 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:46:24,037 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17146
2025-02-15 10:46:24,078 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "N9nVPZNLoHDzH2gxmll0";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124905917301024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124905907004000">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124905907004112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124905907004224">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124905907004336">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124905907004448">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124905907004560">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124905907010720">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-124905907064160">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:46:24,078 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "N9nVPZNLoHDzH2gxmll0";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124905917301024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124905907004000">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124905907004112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124905907004224">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124905907004336">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124905907004448">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124905907004560">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124905907010720">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-124905907064160">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:46:25,489 - DEBUG - Polling for notifications...
2025-02-15 10:46:25,524 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612781 with data: None
2025-02-15 10:46:25,526 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:46:25,545 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612781 HTTP/1.1" 200 19
2025-02-15 10:46:25,546 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 10:47:03,907 - INFO - Application started.
2025-02-15 10:47:03,907 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 10:47:03,907 - INFO - Attempting to log in user: test
2025-02-15 10:47:03,918 - DEBUG - Loading KWallet
2025-02-15 10:47:03,919 - DEBUG - Loading SecretService
2025-02-15 10:47:03,948 - DEBUG - Loading Windows
2025-02-15 10:47:03,949 - DEBUG - Loading chainer
2025-02-15 10:47:03,950 - DEBUG - Loading libsecret
2025-02-15 10:47:03,951 - DEBUG - Loading macOS
2025-02-15 10:47:04,087 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 10:47:04,091 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:04,103 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 10:47:04,113 - DEBUG - Received response
2025-02-15 10:47:04,166 - INFO - User test logged in successfully.
2025-02-15 10:47:04,166 - INFO - Starting polling for notifications.
2025-02-15 10:47:04,167 - DEBUG - Polling for notifications...
2025-02-15 10:47:04,203 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612824 with data: None
2025-02-15 10:47:04,205 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:04,225 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612824 HTTP/1.1" 200 19
2025-02-15 10:47:04,226 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 10:47:04,652 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 10:47:04,654 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:04,680 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 10:47:04,681 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 10:47:05,503 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-15 10:47:05,505 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:05,528 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-15 10:47:05,529 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 10:47:07,020 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:07,022 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:07,040 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:07,081 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410380158112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369893072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369893184">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369893296">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369893408">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369893520">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369893632">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369899792">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369953232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:07,081 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410380158112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369893072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369893184">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369893296">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369893408">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369893520">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369893632">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369899792">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369953232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:09,232 - DEBUG - Polling for notifications...
2025-02-15 10:47:09,268 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612825 with data: None
2025-02-15 10:47:09,270 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:09,289 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612825 HTTP/1.1" 200 20
2025-02-15 10:47:09,290 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:47:09,403 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:09,405 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:09,420 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:09,461 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369954688">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369953344">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369954464">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369954352">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369954800">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369955024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369955248">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369955360">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369955136">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:09,461 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369954688">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369953344">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369954464">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369954352">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369954800">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369955024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369955248">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369955360">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369955136">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:10,728 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:10,730 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:10,747 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:10,788 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369955920">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369956368">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369956256">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369956592">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369955696">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369956032">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369955808">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369955584">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369955472">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:10,789 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369955920">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369956368">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369956256">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369956592">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369955696">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369956032">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369955808">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369955584">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369955472">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,136 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:11,138 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:11,154 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:11,195 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369956816">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369957376">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369957264">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369957600">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369956928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369957040">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369956704">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369954912">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369956480">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,195 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369956816">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369957376">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369957264">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369957600">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369956928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369957040">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369956704">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369954912">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369956480">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,328 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:11,330 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:11,346 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:11,387 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369957824">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369956144">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369957712">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369957152">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369957936">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369958048">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369958160">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369958272">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369958384">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,387 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369957824">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369956144">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369957712">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369957152">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369957936">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369958048">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369958160">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369958272">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369958384">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,479 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:11,481 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:11,496 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:11,537 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369958720">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369958608">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369958944">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369957488">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369958832">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369959056">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369959168">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369959280">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369959392">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,537 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369958720">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369958608">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369958944">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369957488">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369958832">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369959056">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369959168">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369959280">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369959392">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,606 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:11,608 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:11,624 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:11,665 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369959728">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369959616">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369959952">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369958496">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369959840">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369960064">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369960176">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369960288">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369960400">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,666 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369959728">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369959616">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369959952">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369958496">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369959840">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369960064">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369960176">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369960288">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369960400">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,747 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:11,749 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:11,764 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:11,806 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369960736">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369960624">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369960960">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369959504">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369960848">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369961072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369961184">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369961296">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369961408">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,806 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369960736">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369960624">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369960960">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369959504">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369960848">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369961072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369961184">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369961296">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369961408">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,888 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 10:47:11,890 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:11,906 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 500 17146
2025-02-15 10:47:11,947 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369961744">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369962416">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369962304">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369962640">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369961856">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369962080">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369961968">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369961632">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369961520">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:11,947 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGodboUGr6iBVV63EPbH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140410369961744">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140410369962416">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140410369962304">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140410369962640">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140410369961856">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140410369962080">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140410369961968">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140410369961632">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-140410369961520">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 10:47:14,295 - DEBUG - Polling for notifications...
2025-02-15 10:47:14,332 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612825 with data: None
2025-02-15 10:47:14,334 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:14,353 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612825 HTTP/1.1" 200 20
2025-02-15 10:47:14,353 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 10:47:19,359 - DEBUG - Polling for notifications...
2025-02-15 10:47:19,396 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739612825 with data: None
2025-02-15 10:47:19,398 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 10:47:19,417 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739612825 HTTP/1.1" 200 20
2025-02-15 10:47:19,418 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 11:12:15,455 - INFO - Application started.
2025-02-15 11:12:15,455 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:12:15,455 - INFO - Attempting to log in user: test
2025-02-15 11:12:15,472 - DEBUG - Loading KWallet
2025-02-15 11:12:15,472 - DEBUG - Loading SecretService
2025-02-15 11:12:15,515 - DEBUG - Loading Windows
2025-02-15 11:12:15,516 - DEBUG - Loading chainer
2025-02-15 11:12:15,516 - DEBUG - Loading libsecret
2025-02-15 11:12:15,517 - DEBUG - Loading macOS
2025-02-15 11:12:15,590 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:12:15,592 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:12:15,599 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:12:15,609 - DEBUG - Received response
2025-02-15 11:12:15,628 - INFO - User test logged in successfully.
2025-02-15 11:12:15,628 - INFO - Starting polling for notifications.
2025-02-15 11:12:15,628 - DEBUG - Polling for notifications...
2025-02-15 11:12:15,642 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614335 with data: None
2025-02-15 11:12:15,643 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:12:15,659 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614335 HTTP/1.1" 200 19
2025-02-15 11:12:15,659 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 11:12:15,870 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:12:15,870 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:12:15,887 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:12:15,888 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:12:18,564 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:12:18,564 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:12:18,581 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:12:18,582 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:12:19,974 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:12:19,975 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:12:20,019 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17146
2025-02-15 11:12:20,020 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "mDvDTMaTU0I8bF63GcHA";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-125859020456448">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-125859010159200">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-125859010159312">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-125859010159424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-125859010159536">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-125859010159648">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-125859010159760">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-125859010165920">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-125859010219360">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 11:12:20,020 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "mDvDTMaTU0I8bF63GcHA";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-125859020456448">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-125859010159200">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-125859010159312">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-125859010159424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-125859010159536">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-125859010159648">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-125859010159760">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-125859010165920">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">183</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-125859010219360">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">221</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 183, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 183, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 221, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 11:12:20,665 - DEBUG - Polling for notifications...
2025-02-15 11:12:20,691 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614336 with data: None
2025-02-15 11:12:20,692 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:12:20,707 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614336 HTTP/1.1" 200 20
2025-02-15 11:12:20,707 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 11:14:37,015 - INFO - Application started.
2025-02-15 11:14:37,015 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:14:37,015 - INFO - Attempting to log in user: test
2025-02-15 11:14:37,025 - DEBUG - Loading KWallet
2025-02-15 11:14:37,026 - DEBUG - Loading SecretService
2025-02-15 11:14:37,056 - DEBUG - Loading Windows
2025-02-15 11:14:37,058 - DEBUG - Loading chainer
2025-02-15 11:14:37,058 - DEBUG - Loading libsecret
2025-02-15 11:14:37,059 - DEBUG - Loading macOS
2025-02-15 11:14:37,192 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:14:37,196 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:14:37,208 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:14:37,218 - DEBUG - Received response
2025-02-15 11:14:37,272 - INFO - User test logged in successfully.
2025-02-15 11:14:37,272 - INFO - Starting polling for notifications.
2025-02-15 11:14:37,273 - DEBUG - Polling for notifications...
2025-02-15 11:14:37,310 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614477 with data: None
2025-02-15 11:14:37,312 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:14:37,333 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614477 HTTP/1.1" 200 19
2025-02-15 11:14:37,334 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:14:37,765 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:14:37,767 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:14:37,793 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:14:37,794 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:14:38,763 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:14:38,765 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:14:38,789 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:14:38,790 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:14:41,919 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:14:41,921 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:14:41,968 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 15878
2025-02-15 11:14:41,969 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "StzSou85geHNQMpRLoB9";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137641274983808">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137641275154704">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137641275154816">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137641275154928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137641275155040">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137641275155152">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137641275155264">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137641275161424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line current"><span class="ws">    </span>print(&#34;Nome:&#34;,plugin.nome,&#34;\tExtension:&#34;,extension)</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    print(&#34;Nome:&#34;,plugin.nome,&#34;\tExtension:&#34;,extension)
AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    print("Nome:",plugin.nome,"\tExtension:",extension)
AttributeError: 'PlugTable' object has no attribute 'nome'


-->

2025-02-15 11:14:41,970 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "StzSou85geHNQMpRLoB9";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137641274983808">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137641275154704">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137641275154816">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137641275154928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137641275155040">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137641275155152">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137641275155264">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137641275161424">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">182</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line current"><span class="ws">    </span>print(&#34;Nome:&#34;,plugin.nome,&#34;\tExtension:&#34;,extension)</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 182, in plug_table_details
    print(&#34;Nome:&#34;,plugin.nome,&#34;\tExtension:&#34;,extension)
AttributeError: &#39;PlugTable&#39; object has no attribute &#39;nome&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 182, in plug_table_details
    print("Nome:",plugin.nome,"\tExtension:",extension)
AttributeError: 'PlugTable' object has no attribute 'nome'


-->

2025-02-15 11:14:42,339 - DEBUG - Polling for notifications...
2025-02-15 11:14:42,373 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614478 with data: None
2025-02-15 11:14:42,375 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:14:42,394 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614478 HTTP/1.1" 200 19
2025-02-15 11:14:42,395 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 11:15:11,263 - INFO - Application started.
2025-02-15 11:15:11,264 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:15:11,264 - INFO - Attempting to log in user: test
2025-02-15 11:15:11,276 - DEBUG - Loading KWallet
2025-02-15 11:15:11,278 - DEBUG - Loading SecretService
2025-02-15 11:15:11,303 - DEBUG - Loading Windows
2025-02-15 11:15:11,305 - DEBUG - Loading chainer
2025-02-15 11:15:11,305 - DEBUG - Loading libsecret
2025-02-15 11:15:11,307 - DEBUG - Loading macOS
2025-02-15 11:15:11,443 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:15:11,447 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:15:11,460 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:15:11,470 - DEBUG - Received response
2025-02-15 11:15:11,524 - INFO - User test logged in successfully.
2025-02-15 11:15:11,525 - INFO - Starting polling for notifications.
2025-02-15 11:15:11,525 - DEBUG - Polling for notifications...
2025-02-15 11:15:11,564 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614511 with data: None
2025-02-15 11:15:11,566 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:15:11,587 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614511 HTTP/1.1" 200 19
2025-02-15 11:15:11,588 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:15:12,012 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:15:12,014 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:15:12,040 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:15:12,041 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:15:13,821 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:15:13,824 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:15:13,849 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:15:13,850 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:15:14,945 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:15:14,947 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:15:14,966 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17195
2025-02-15 11:15:15,006 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "5OqmNSmjv4lFQGidPrm1";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137024222036928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137024211755392">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137024211755504">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137024211755616">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137024211755728">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137024211755840">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137024211755952">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137024211762112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">184</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>print(&#34;Nome:&#34;,plugin.name,&#34;\tExtension:&#34;,extension)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-137024211815664">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">222</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 184, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 184, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 11:15:15,007 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: &#39;NoneType&#39; object is not subscriptable
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "5OqmNSmjv4lFQGidPrm1";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: &#39;NoneType&#39; object is not subscriptable
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137024222036928">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137024211755392">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137024211755504">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137024211755616">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137024211755728">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137024211755840">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137024211755952">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137024211762112">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">184</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>print(&#34;Nome:&#34;,plugin.name,&#34;\tExtension:&#34;,extension)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-137024211815664">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">222</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: &#39;NoneType&#39; object is not subscriptable
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 184, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: &#39;NoneType&#39; object is not subscriptable
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 184, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: 'NoneType' object is not subscriptable


-->

2025-02-15 11:15:16,593 - DEBUG - Polling for notifications...
2025-02-15 11:18:09,686 - INFO - Application started.
2025-02-15 11:18:09,687 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:18:09,687 - INFO - Attempting to log in user: test
2025-02-15 11:18:09,697 - DEBUG - Loading KWallet
2025-02-15 11:18:09,698 - DEBUG - Loading SecretService
2025-02-15 11:18:09,724 - DEBUG - Loading Windows
2025-02-15 11:18:09,725 - DEBUG - Loading chainer
2025-02-15 11:18:09,726 - DEBUG - Loading libsecret
2025-02-15 11:18:09,727 - DEBUG - Loading macOS
2025-02-15 11:18:09,863 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:18:09,868 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:18:09,892 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:18:09,894 - DEBUG - Received response
2025-02-15 11:18:09,934 - INFO - User test logged in successfully.
2025-02-15 11:18:09,934 - INFO - Starting polling for notifications.
2025-02-15 11:18:09,935 - DEBUG - Polling for notifications...
2025-02-15 11:18:09,973 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614690 with data: None
2025-02-15 11:18:09,975 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:18:09,995 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614690 HTTP/1.1" 200 20
2025-02-15 11:18:09,996 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:18:10,444 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:18:10,446 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:18:10,472 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:18:10,473 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:18:12,063 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:18:12,065 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:18:12,089 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:18:12,090 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:18:13,456 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:18:13,458 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:18:13,505 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 17148
2025-02-15 11:18:13,506 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: fromisoformat: argument must be str
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "s5lPL3VypHO8eAJcS057";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: fromisoformat: argument must be str
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124063636112208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124063625814512">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124063625814624">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124063625814736">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124063625814848">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124063625814960">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124063625815072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124063625821232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">184</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>print(&#34;Nome:&#34;,plugin.name,&#34;\tExtension:&#34;,extension)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-124063625874784">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">222</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: fromisoformat: argument must be str
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 184, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: fromisoformat: argument must be str
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 184, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: fromisoformat: argument must be str


-->

2025-02-15 11:18:13,507 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: fromisoformat: argument must be str
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "s5lPL3VypHO8eAJcS057";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: fromisoformat: argument must be str
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-124063636112208">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-124063625814512">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-124063625814624">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-124063625814736">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-124063625814848">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-124063625814960">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-124063625815072">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-124063625821232">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">184</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line before"><span class="ws">    </span>print(&#34;Nome:&#34;,plugin.name,&#34;\tExtension:&#34;,extension)</pre>
<pre class="line before"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line current"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre></div>
</div>

<li><div class="frame" id="frame-124063625874784">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">222</em>,
      in <code class="function">logUpdate</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Update del Log</pre>
<pre class="line before"><span class="ws"></span>def logUpdate(result):</pre>
<pre class="line before"><span class="ws">    </span>newLog = Log(</pre>
<pre class="line current"><span class="ws">        </span>dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),</pre>
<pre class="line after"><span class="ws">        </span>success=(result[&#39;status&#39;]==&#39;finished&#39;),  # DEBUG</pre>
<pre class="line after"><span class="ws">        </span>result = result[&#39;log&#39;]  # DEBUG</pre>
<pre class="line after"><span class="ws">    </span>)</pre>
<pre class="line after"><span class="ws">    </span>db.session.add(newLog)</pre>
<pre class="line after"><span class="ws">    </span>db.session.commit()</pre></div>
</div>
</ul>
  <blockquote>TypeError: fromisoformat: argument must be str
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 184, in plug_table_details
    logUpdate(result)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result[&#39;datetime&#39;]),
TypeError: fromisoformat: argument must be str
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 184, in plug_table_details
    logUpdate(result)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 222, in logUpdate
    dateLog = datetime.datetime.fromisoformat(result['datetime']),
TypeError: fromisoformat: argument must be str


-->

2025-02-15 11:18:15,002 - DEBUG - Polling for notifications...
2025-02-15 11:18:15,039 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614690 with data: None
2025-02-15 11:18:15,041 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:18:15,060 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614690 HTTP/1.1" 200 20
2025-02-15 11:18:15,061 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:19:10,647 - INFO - Application started.
2025-02-15 11:19:10,647 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:19:10,647 - INFO - Attempting to log in user: test
2025-02-15 11:19:10,661 - DEBUG - Loading KWallet
2025-02-15 11:19:10,663 - DEBUG - Loading SecretService
2025-02-15 11:19:10,691 - DEBUG - Loading Windows
2025-02-15 11:19:10,692 - DEBUG - Loading chainer
2025-02-15 11:19:10,693 - DEBUG - Loading libsecret
2025-02-15 11:19:10,694 - DEBUG - Loading macOS
2025-02-15 11:19:10,827 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:19:10,831 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:10,855 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:19:10,857 - DEBUG - Received response
2025-02-15 11:19:10,909 - INFO - User test logged in successfully.
2025-02-15 11:19:10,909 - INFO - Starting polling for notifications.
2025-02-15 11:19:10,910 - DEBUG - Polling for notifications...
2025-02-15 11:19:10,948 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:10,950 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:10,970 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:10,971 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:11,415 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:19:11,417 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:11,443 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:19:11,444 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:19:15,976 - DEBUG - Polling for notifications...
2025-02-15 11:19:16,013 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:16,015 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:16,034 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:16,035 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:20,304 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:19:20,306 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:20,329 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:19:20,330 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:19:21,039 - DEBUG - Polling for notifications...
2025-02-15 11:19:21,075 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:21,077 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:21,096 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:21,097 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:21,916 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:19:21,918 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:21,939 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 181
2025-02-15 11:19:21,979 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:19:21 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python pluginEs.py: No module named 'pluginEs'",
  "status": "failed"
}

2025-02-15 11:19:26,102 - DEBUG - Polling for notifications...
2025-02-15 11:19:26,139 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:26,141 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:26,160 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:26,161 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:31,167 - DEBUG - Polling for notifications...
2025-02-15 11:19:31,201 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:31,204 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:31,223 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:31,223 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:36,229 - DEBUG - Polling for notifications...
2025-02-15 11:19:36,265 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:36,266 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:36,285 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:36,286 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:41,292 - DEBUG - Polling for notifications...
2025-02-15 11:19:41,328 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:41,330 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:41,349 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:41,350 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:46,355 - DEBUG - Polling for notifications...
2025-02-15 11:19:46,390 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:46,392 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:46,411 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:46,412 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:51,438 - DEBUG - Polling for notifications...
2025-02-15 11:19:51,475 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:51,477 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:51,496 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:51,497 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:19:56,519 - DEBUG - Polling for notifications...
2025-02-15 11:19:56,556 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:19:56,557 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:19:56,576 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:19:56,577 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:01,603 - DEBUG - Polling for notifications...
2025-02-15 11:20:01,639 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:20:01,641 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:01,661 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:20:01,662 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:06,667 - DEBUG - Polling for notifications...
2025-02-15 11:20:06,702 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:20:06,704 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:06,724 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:20:06,725 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:11,751 - DEBUG - Polling for notifications...
2025-02-15 11:20:11,791 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:20:11,794 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:11,816 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:20:11,817 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:16,843 - DEBUG - Polling for notifications...
2025-02-15 11:20:16,878 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:20:16,880 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:16,900 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:20:16,901 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:21,926 - DEBUG - Polling for notifications...
2025-02-15 11:20:21,964 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:20:21,966 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:21,985 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:20:21,986 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:27,012 - DEBUG - Polling for notifications...
2025-02-15 11:20:27,055 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614751 with data: None
2025-02-15 11:20:27,058 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:27,078 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614751 HTTP/1.1" 200 19
2025-02-15 11:20:27,078 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:20:39,390 - INFO - Application started.
2025-02-15 11:20:39,390 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:20:39,391 - INFO - Attempting to log in user: test
2025-02-15 11:20:39,399 - DEBUG - Loading KWallet
2025-02-15 11:20:39,400 - DEBUG - Loading SecretService
2025-02-15 11:20:39,428 - DEBUG - Loading Windows
2025-02-15 11:20:39,429 - DEBUG - Loading chainer
2025-02-15 11:20:39,430 - DEBUG - Loading libsecret
2025-02-15 11:20:39,431 - DEBUG - Loading macOS
2025-02-15 11:20:39,564 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:20:39,568 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:39,578 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:20:39,588 - DEBUG - Received response
2025-02-15 11:20:39,633 - INFO - User test logged in successfully.
2025-02-15 11:20:39,633 - INFO - Starting polling for notifications.
2025-02-15 11:20:39,634 - DEBUG - Polling for notifications...
2025-02-15 11:20:39,670 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614839 with data: None
2025-02-15 11:20:39,672 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:39,693 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614839 HTTP/1.1" 200 20
2025-02-15 11:20:39,694 - DEBUG - Received response: {
  "update": -96
}

2025-02-15 11:20:40,125 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:20:40,128 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:40,148 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:20:40,149 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:20:41,955 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:20:41,957 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:41,979 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:20:41,980 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:20:43,084 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:20:43,086 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:43,112 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 181
2025-02-15 11:20:43,153 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:20:43 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python pluginEs.py: No module named 'pluginEs'",
  "status": "failed"
}

2025-02-15 11:20:44,700 - DEBUG - Polling for notifications...
2025-02-15 11:20:44,733 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614840 with data: None
2025-02-15 11:20:44,735 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:44,754 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614840 HTTP/1.1" 200 20
2025-02-15 11:20:44,755 - DEBUG - Received response: {
  "update": -97
}

2025-02-15 11:20:49,761 - DEBUG - Polling for notifications...
2025-02-15 11:20:49,797 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739614840 with data: None
2025-02-15 11:20:49,799 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:20:49,818 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739614840 HTTP/1.1" 200 20
2025-02-15 11:20:49,819 - DEBUG - Received response: {
  "update": -97
}

2025-02-15 11:30:04,679 - INFO - Application started.
2025-02-15 11:30:04,679 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:30:04,680 - INFO - Attempting to log in user: test
2025-02-15 11:30:04,692 - DEBUG - Loading KWallet
2025-02-15 11:30:04,694 - DEBUG - Loading SecretService
2025-02-15 11:30:04,723 - DEBUG - Loading Windows
2025-02-15 11:30:04,725 - DEBUG - Loading chainer
2025-02-15 11:30:04,726 - DEBUG - Loading libsecret
2025-02-15 11:30:04,727 - DEBUG - Loading macOS
2025-02-15 11:30:04,868 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:30:04,872 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:04,885 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:30:04,896 - DEBUG - Received response
2025-02-15 11:30:04,948 - INFO - User test logged in successfully.
2025-02-15 11:30:04,948 - INFO - Starting polling for notifications.
2025-02-15 11:30:04,949 - DEBUG - Polling for notifications...
2025-02-15 11:30:04,985 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:04,988 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:05,008 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:05,009 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:05,432 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:30:05,434 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:05,460 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:30:05,461 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:30:07,655 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:30:07,657 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:07,680 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:30:07,682 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:30:08,961 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:30:08,963 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:08,992 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 181
2025-02-15 11:30:09,033 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:30:08 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python pluginEs.py: No module named 'pluginEs'",
  "status": "failed"
}

2025-02-15 11:30:10,015 - DEBUG - Polling for notifications...
2025-02-15 11:30:10,050 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:10,052 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:10,070 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:10,071 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:15,077 - DEBUG - Polling for notifications...
2025-02-15 11:30:15,112 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:15,114 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:15,133 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:15,134 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:20,140 - DEBUG - Polling for notifications...
2025-02-15 11:30:20,175 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:20,177 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:20,196 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:20,197 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:25,202 - DEBUG - Polling for notifications...
2025-02-15 11:30:25,242 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:25,244 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:25,264 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:25,265 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:30,291 - DEBUG - Polling for notifications...
2025-02-15 11:30:30,332 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:30,335 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:30,356 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:30,358 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:35,383 - DEBUG - Polling for notifications...
2025-02-15 11:30:35,420 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:35,422 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:35,441 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:35,442 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:40,468 - DEBUG - Polling for notifications...
2025-02-15 11:30:40,504 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:40,506 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:40,526 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:40,526 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:45,547 - DEBUG - Polling for notifications...
2025-02-15 11:30:45,584 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:45,586 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:45,605 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:45,606 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:50,631 - DEBUG - Polling for notifications...
2025-02-15 11:30:50,669 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:50,670 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:50,690 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 200 19
2025-02-15 11:30:50,691 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:30:55,709 - DEBUG - Polling for notifications...
2025-02-15 11:30:55,749 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615405 with data: None
2025-02-15 11:30:55,751 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:30:56,190 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615405 HTTP/1.1" 422 45
2025-02-15 11:30:56,191 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-15 11:30:56,191 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-15 11:32:06,715 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:32:06,717 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:32:06,736 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 422 45
2025-02-15 11:32:06,737 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-15 11:32:06,737 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-02-15 11:34:49,146 - INFO - Application started.
2025-02-15 11:34:49,146 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:34:49,147 - INFO - Attempting to log in user: test
2025-02-15 11:34:49,156 - DEBUG - Loading KWallet
2025-02-15 11:34:49,157 - DEBUG - Loading SecretService
2025-02-15 11:34:49,183 - DEBUG - Loading Windows
2025-02-15 11:34:49,184 - DEBUG - Loading chainer
2025-02-15 11:34:49,185 - DEBUG - Loading libsecret
2025-02-15 11:34:49,186 - DEBUG - Loading macOS
2025-02-15 11:34:49,322 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:34:49,326 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:49,351 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:34:49,353 - DEBUG - Received response
2025-02-15 11:34:49,399 - INFO - User test logged in successfully.
2025-02-15 11:34:49,400 - INFO - Starting polling for notifications.
2025-02-15 11:34:49,400 - DEBUG - Polling for notifications...
2025-02-15 11:34:49,437 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615689 with data: None
2025-02-15 11:34:49,439 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:49,459 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615689 HTTP/1.1" 200 19
2025-02-15 11:34:49,460 - DEBUG - Received response: {
  "update": -8
}

2025-02-15 11:34:49,874 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:34:49,876 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:49,903 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:34:49,903 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:34:50,854 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:34:50,856 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:50,879 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:34:50,880 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:34:52,322 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:34:52,324 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:52,347 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 206
2025-02-15 11:34:52,387 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:34:52 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python pluginEs.py: module 'plugins.pluginEs' has no attribute 'Plugin'",
  "status": "failed"
}

2025-02-15 11:34:54,466 - DEBUG - Polling for notifications...
2025-02-15 11:34:54,502 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615690 with data: None
2025-02-15 11:34:54,504 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:54,523 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615690 HTTP/1.1" 200 19
2025-02-15 11:34:54,524 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 11:34:59,530 - DEBUG - Polling for notifications...
2025-02-15 11:34:59,568 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739615690 with data: None
2025-02-15 11:34:59,570 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:34:59,590 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739615690 HTTP/1.1" 200 19
2025-02-15 11:34:59,591 - DEBUG - Received response: {
  "update": -9
}

2025-02-15 11:42:22,440 - INFO - Application started.
2025-02-15 11:42:22,441 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:42:22,441 - INFO - Attempting to log in user: test
2025-02-15 11:42:22,452 - DEBUG - Loading KWallet
2025-02-15 11:42:22,453 - DEBUG - Loading SecretService
2025-02-15 11:42:22,484 - DEBUG - Loading Windows
2025-02-15 11:42:22,485 - DEBUG - Loading chainer
2025-02-15 11:42:22,486 - DEBUG - Loading libsecret
2025-02-15 11:42:22,487 - DEBUG - Loading macOS
2025-02-15 11:42:22,651 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:42:22,655 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:22,669 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:42:22,680 - DEBUG - Received response
2025-02-15 11:42:22,731 - INFO - User test logged in successfully.
2025-02-15 11:42:22,732 - INFO - Starting polling for notifications.
2025-02-15 11:42:22,732 - DEBUG - Polling for notifications...
2025-02-15 11:42:22,773 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616142 with data: None
2025-02-15 11:42:22,775 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:22,800 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616142 HTTP/1.1" 200 20
2025-02-15 11:42:22,801 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 11:42:23,263 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:42:23,265 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:23,294 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:42:23,297 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:42:24,645 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:42:24,647 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:24,673 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:42:24,674 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:42:25,913 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:42:25,915 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:25,962 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-02-15 11:42:25,963 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:42:25 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-02-15 11:42:27,807 - DEBUG - Polling for notifications...
2025-02-15 11:42:27,845 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:27,847 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:27,867 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:27,868 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:42:32,873 - DEBUG - Polling for notifications...
2025-02-15 11:42:32,911 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:32,913 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:32,933 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:32,934 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:42:37,939 - DEBUG - Polling for notifications...
2025-02-15 11:42:37,978 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:37,979 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:37,998 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:37,999 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:42:43,005 - DEBUG - Polling for notifications...
2025-02-15 11:42:43,043 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:43,045 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:43,065 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:43,065 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:42:48,071 - DEBUG - Polling for notifications...
2025-02-15 11:42:48,110 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:48,113 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:48,133 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:48,134 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:42:53,139 - DEBUG - Polling for notifications...
2025-02-15 11:42:53,176 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:53,177 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:53,197 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:53,198 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:42:58,203 - DEBUG - Polling for notifications...
2025-02-15 11:42:58,241 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:42:58,242 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:42:58,262 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:42:58,262 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:43:03,266 - DEBUG - Polling for notifications...
2025-02-15 11:43:03,306 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:43:03,308 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:03,329 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616143 HTTP/1.1" 200 20
2025-02-15 11:43:03,330 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:43:08,335 - DEBUG - Polling for notifications...
2025-02-15 11:43:08,373 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616143 with data: None
2025-02-15 11:43:08,374 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:08,375 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /notification/1739616143 (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7997e7720670>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-02-15 11:43:29,745 - INFO - Application started.
2025-02-15 11:43:29,745 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:43:29,746 - INFO - Attempting to log in user: test
2025-02-15 11:43:29,758 - DEBUG - Loading KWallet
2025-02-15 11:43:29,759 - DEBUG - Loading SecretService
2025-02-15 11:43:29,790 - DEBUG - Loading Windows
2025-02-15 11:43:29,792 - DEBUG - Loading chainer
2025-02-15 11:43:29,793 - DEBUG - Loading libsecret
2025-02-15 11:43:29,794 - DEBUG - Loading macOS
2025-02-15 11:43:29,946 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:43:29,951 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:29,967 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:43:29,977 - DEBUG - Received response
2025-02-15 11:43:30,031 - INFO - User test logged in successfully.
2025-02-15 11:43:30,032 - INFO - Starting polling for notifications.
2025-02-15 11:43:30,033 - DEBUG - Polling for notifications...
2025-02-15 11:43:30,074 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616210 with data: None
2025-02-15 11:43:30,076 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:30,102 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616210 HTTP/1.1" 200 20
2025-02-15 11:43:30,105 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 11:43:30,575 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:43:30,576 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:30,606 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:43:30,607 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:43:33,905 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:43:33,907 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:33,933 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:43:33,934 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:43:34,856 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:43:34,858 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:34,880 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 195
2025-02-15 11:43:34,920 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:43:34 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python pluginEs.py: name 'Interfaccia_Plugin' is not defined",
  "status": "failed"
}

2025-02-15 11:43:35,111 - DEBUG - Polling for notifications...
2025-02-15 11:43:35,149 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616211 with data: None
2025-02-15 11:43:35,151 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:35,171 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616211 HTTP/1.1" 200 20
2025-02-15 11:43:35,172 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:43:40,178 - DEBUG - Polling for notifications...
2025-02-15 11:43:40,217 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616211 with data: None
2025-02-15 11:43:40,221 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:43:40,240 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616211 HTTP/1.1" 200 20
2025-02-15 11:43:40,241 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:49:59,850 - INFO - Application started.
2025-02-15 11:49:59,850 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:49:59,851 - INFO - Attempting to log in user: test
2025-02-15 11:49:59,860 - DEBUG - Loading KWallet
2025-02-15 11:49:59,861 - DEBUG - Loading SecretService
2025-02-15 11:49:59,886 - DEBUG - Loading Windows
2025-02-15 11:49:59,887 - DEBUG - Loading chainer
2025-02-15 11:49:59,888 - DEBUG - Loading libsecret
2025-02-15 11:49:59,889 - DEBUG - Loading macOS
2025-02-15 11:50:00,016 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:50:00,019 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:00,033 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:50:00,043 - DEBUG - Received response
2025-02-15 11:50:00,090 - INFO - User test logged in successfully.
2025-02-15 11:50:00,090 - INFO - Starting polling for notifications.
2025-02-15 11:50:00,091 - DEBUG - Polling for notifications...
2025-02-15 11:50:00,131 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616600 with data: None
2025-02-15 11:50:00,133 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:00,153 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616600 HTTP/1.1" 200 20
2025-02-15 11:50:00,154 - DEBUG - Received response: {
  "update": -10
}

2025-02-15 11:50:00,591 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:50:00,593 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:00,619 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:50:00,620 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:50:01,456 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-02-15 11:50:01,458 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:01,482 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-02-15 11:50:01,484 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:50:02,661 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-02-15 11:50:02,662 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:02,682 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-02-15 11:50:02,723 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:50:02 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-02-15 11:50:05,070 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-02-15 11:50:05,072 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:05,093 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-02-15 11:50:05,094 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:50:05,160 - DEBUG - Polling for notifications...
2025-02-15 11:50:05,196 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616601 with data: None
2025-02-15 11:50:05,198 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:05,217 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616601 HTTP/1.1" 200 20
2025-02-15 11:50:05,218 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:50:06,666 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-02-15 11:50:06,668 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:06,694 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 102
2025-02-15 11:50:06,734 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:50:06 GMT",
  "log": "Io piango tanto",
  "status": "finished"
}

2025-02-15 11:50:08,998 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-02-15 11:50:08,999 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:09,020 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-02-15 11:50:09,021 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-02-15 11:50:10,224 - DEBUG - Polling for notifications...
2025-02-15 11:50:10,260 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616601 with data: None
2025-02-15 11:50:10,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:10,281 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616601 HTTP/1.1" 200 20
2025-02-15 11:50:10,282 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:50:10,342 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-02-15 11:50:10,344 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:10,391 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-02-15 11:50:10,392 - DEBUG - Received response: {
  "datetime": "Sat, 15 Feb 2025 11:50:10 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-02-15 11:50:15,288 - DEBUG - Polling for notifications...
2025-02-15 11:50:15,325 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616601 with data: None
2025-02-15 11:50:15,327 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:50:15,346 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616601 HTTP/1.1" 200 20
2025-02-15 11:50:15,347 - DEBUG - Received response: {
  "update": -11
}

2025-02-15 11:51:49,020 - INFO - Application started.
2025-02-15 11:51:49,020 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 11:51:49,020 - INFO - Attempting to log in user: test
2025-02-15 11:51:49,033 - DEBUG - Loading KWallet
2025-02-15 11:51:49,035 - DEBUG - Loading SecretService
2025-02-15 11:51:49,064 - DEBUG - Loading Windows
2025-02-15 11:51:49,066 - DEBUG - Loading chainer
2025-02-15 11:51:49,066 - DEBUG - Loading libsecret
2025-02-15 11:51:49,068 - DEBUG - Loading macOS
2025-02-15 11:51:49,194 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 11:51:49,198 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:49,208 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 11:51:49,218 - DEBUG - Received response
2025-02-15 11:51:49,272 - INFO - User test logged in successfully.
2025-02-15 11:51:49,272 - INFO - Starting polling for notifications.
2025-02-15 11:51:49,273 - DEBUG - Polling for notifications...
2025-02-15 11:51:49,309 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616709 with data: None
2025-02-15 11:51:49,311 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:49,332 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616709 HTTP/1.1" 200 21
2025-02-15 11:51:49,333 - DEBUG - Received response: {
  "update": -119
}

2025-02-15 11:51:49,752 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:51:49,754 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:49,775 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:51:49,776 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:51:54,339 - DEBUG - Polling for notifications...
2025-02-15 11:51:54,376 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616710 with data: None
2025-02-15 11:51:54,378 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:54,397 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616710 HTTP/1.1" 200 21
2025-02-15 11:51:54,398 - DEBUG - Received response: {
  "update": -120
}

2025-02-15 11:51:58,847 - ERROR - Nome file contiene valori non consentiti.
2025-02-15 11:51:58,885 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:51:58,888 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:58,910 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:51:58,911 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:51:58,986 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:51:58,988 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:59,009 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:51:59,010 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:51:59,076 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 11:51:59,078 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:59,099 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 11:51:59,100 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 11:51:59,404 - DEBUG - Polling for notifications...
2025-02-15 11:51:59,441 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616719 with data: None
2025-02-15 11:51:59,442 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:51:59,461 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616719 HTTP/1.1" 200 21
2025-02-15 11:51:59,462 - DEBUG - Received response: {
  "update": -129
}

2025-02-15 11:52:04,468 - DEBUG - Polling for notifications...
2025-02-15 11:52:04,503 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616719 with data: None
2025-02-15 11:52:04,505 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:52:04,524 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616719 HTTP/1.1" 200 21
2025-02-15 11:52:04,525 - DEBUG - Received response: {
  "update": -129
}

2025-02-15 11:52:09,531 - DEBUG - Polling for notifications...
2025-02-15 11:52:09,567 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739616719 with data: None
2025-02-15 11:52:09,569 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 11:52:09,589 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739616719 HTTP/1.1" 200 21
2025-02-15 11:52:09,590 - DEBUG - Received response: {
  "update": -129
}

2025-02-15 12:02:04,632 - INFO - Application started.
2025-02-15 12:02:04,632 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 12:02:04,633 - INFO - Attempting to log in user: test
2025-02-15 12:02:04,642 - DEBUG - Loading KWallet
2025-02-15 12:02:04,643 - DEBUG - Loading SecretService
2025-02-15 12:02:04,668 - DEBUG - Loading Windows
2025-02-15 12:02:04,669 - DEBUG - Loading chainer
2025-02-15 12:02:04,670 - DEBUG - Loading libsecret
2025-02-15 12:02:04,671 - DEBUG - Loading macOS
2025-02-15 12:02:04,804 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 12:02:04,809 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:04,820 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 12:02:04,830 - DEBUG - Received response
2025-02-15 12:02:04,876 - INFO - User test logged in successfully.
2025-02-15 12:02:04,877 - INFO - Starting polling for notifications.
2025-02-15 12:02:04,877 - DEBUG - Polling for notifications...
2025-02-15 12:02:04,916 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617325 with data: None
2025-02-15 12:02:04,918 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:04,938 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617325 HTTP/1.1" 200 21
2025-02-15 12:02:04,939 - DEBUG - Received response: {
  "update": -735
}

2025-02-15 12:02:05,359 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:05,361 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:05,381 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:05,382 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:09,944 - DEBUG - Polling for notifications...
2025-02-15 12:02:09,981 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617325 with data: None
2025-02-15 12:02:09,982 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:10,001 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617325 HTTP/1.1" 200 21
2025-02-15 12:02:10,002 - DEBUG - Received response: {
  "update": -735
}

2025-02-15 12:02:12,270 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Helo, im also sad. And u??"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'megaPersonale.py'}
2025-02-15 12:02:12,272 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:12,299 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 500 15599
2025-02-15 12:02:12,300 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;sanitize_dict&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QSllcXLbYJuKR1wt3UVe";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;sanitize_dict&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-134606932527024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-134606931256576">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-134606931256688">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-134606931256800">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-134606931256912">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-134606931257024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-134606931257136">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-134606931263296">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">151</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def new_plugin():</pre>
<pre class="line before"><span class="ws">    </span>global last_update</pre>
<pre class="line before"><span class="ws">    </span># Get the JSON data from the request</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line current"><span class="ws">    </span>sanitize_dict(data)</pre>
<pre class="line after"><span class="ws">    </span>if not data or &#39;name&#39; not in data:</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;error&#34;: &#34;Invalid record&#34;}), 404</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])</pre>
<pre class="line after"><span class="ws">    </span>if created:</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;sanitize_dict&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 151, in new_plugin
    sanitize_dict(data)
NameError: name &#39;sanitize_dict&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 151, in new_plugin
    sanitize_dict(data)
NameError: name 'sanitize_dict' is not defined


-->

2025-02-15 12:02:12,301 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;sanitize_dict&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QSllcXLbYJuKR1wt3UVe";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;sanitize_dict&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-134606932527024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-134606931256576">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-134606931256688">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-134606931256800">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-134606931256912">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-134606931257024">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-134606931257136">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-134606931263296">
  <h4>File <cite class="filename">"/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">151</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def new_plugin():</pre>
<pre class="line before"><span class="ws">    </span>global last_update</pre>
<pre class="line before"><span class="ws">    </span># Get the JSON data from the request</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line current"><span class="ws">    </span>sanitize_dict(data)</pre>
<pre class="line after"><span class="ws">    </span>if not data or &#39;name&#39; not in data:</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;error&#34;: &#34;Invalid record&#34;}), 404</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])</pre>
<pre class="line after"><span class="ws">    </span>if created:</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;sanitize_dict&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 151, in new_plugin
    sanitize_dict(data)
NameError: name &#39;sanitize_dict&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/tsadok/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 151, in new_plugin
    sanitize_dict(data)
NameError: name 'sanitize_dict' is not defined


-->

2025-02-15 12:02:12,340 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:12,342 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:12,362 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:12,363 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:12,439 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:12,441 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:12,462 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:12,463 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:12,529 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:12,531 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:12,552 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:12,553 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:15,008 - DEBUG - Polling for notifications...
2025-02-15 12:02:15,045 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617333 with data: None
2025-02-15 12:02:15,047 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:15,066 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617333 HTTP/1.1" 200 21
2025-02-15 12:02:15,067 - DEBUG - Received response: {
  "update": -743
}

2025-02-15 12:02:49,478 - INFO - Application started.
2025-02-15 12:02:49,479 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-02-15 12:02:49,479 - INFO - Attempting to log in user: test
2025-02-15 12:02:49,489 - DEBUG - Loading KWallet
2025-02-15 12:02:49,490 - DEBUG - Loading SecretService
2025-02-15 12:02:49,518 - DEBUG - Loading Windows
2025-02-15 12:02:49,519 - DEBUG - Loading chainer
2025-02-15 12:02:49,520 - DEBUG - Loading libsecret
2025-02-15 12:02:49,521 - DEBUG - Loading macOS
2025-02-15 12:02:49,651 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-02-15 12:02:49,655 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:49,667 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-02-15 12:02:49,677 - DEBUG - Received response
2025-02-15 12:02:49,732 - INFO - User test logged in successfully.
2025-02-15 12:02:49,732 - INFO - Starting polling for notifications.
2025-02-15 12:02:49,733 - DEBUG - Polling for notifications...
2025-02-15 12:02:49,773 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617369 with data: None
2025-02-15 12:02:49,775 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:49,796 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617369 HTTP/1.1" 200 20
2025-02-15 12:02:49,797 - DEBUG - Received response: {
  "update": -12
}

2025-02-15 12:02:50,235 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:50,237 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:50,263 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:50,264 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:54,803 - DEBUG - Polling for notifications...
2025-02-15 12:02:54,839 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617370 with data: None
2025-02-15 12:02:54,841 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:54,861 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617370 HTTP/1.1" 200 20
2025-02-15 12:02:54,862 - DEBUG - Received response: {
  "update": -13
}

2025-02-15 12:02:57,221 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Helo, im also sad. And u??"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'megaPersonale.py'}
2025-02-15 12:02:57,222 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:57,244 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-02-15 12:02:57,245 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-02-15 12:02:57,245 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-02-15 12:02:57,284 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:57,286 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:57,306 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:57,307 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:57,379 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:57,381 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:57,402 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:57,403 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:57,469 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-02-15 12:02:57,471 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:57,491 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-02-15 12:02:57,492 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-02-15 12:02:59,867 - DEBUG - Polling for notifications...
2025-02-15 12:02:59,904 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:02:59,905 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:02:59,925 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:02:59,925 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:04,931 - DEBUG - Polling for notifications...
2025-02-15 12:03:04,966 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:04,968 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:04,987 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:04,988 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:09,993 - DEBUG - Polling for notifications...
2025-02-15 12:03:10,029 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:10,030 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:10,049 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:10,050 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:15,056 - DEBUG - Polling for notifications...
2025-02-15 12:03:15,093 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:15,095 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:15,116 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:15,117 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:20,142 - DEBUG - Polling for notifications...
2025-02-15 12:03:20,178 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:20,179 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:20,198 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:20,199 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:25,224 - DEBUG - Polling for notifications...
2025-02-15 12:03:25,260 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:25,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:25,283 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:25,284 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:30,310 - DEBUG - Polling for notifications...
2025-02-15 12:03:30,346 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:30,348 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:30,373 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:30,374 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:35,379 - DEBUG - Polling for notifications...
2025-02-15 12:03:35,416 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:35,417 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:35,438 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:35,440 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:40,453 - DEBUG - Polling for notifications...
2025-02-15 12:03:40,490 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:40,492 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:40,511 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:40,512 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:45,537 - DEBUG - Polling for notifications...
2025-02-15 12:03:45,575 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:45,577 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:45,597 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:45,597 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:50,603 - DEBUG - Polling for notifications...
2025-02-15 12:03:50,639 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:50,642 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:50,661 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:50,662 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:03:55,667 - DEBUG - Polling for notifications...
2025-02-15 12:03:55,706 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:03:55,708 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:03:55,728 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:03:55,729 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:00,735 - DEBUG - Polling for notifications...
2025-02-15 12:04:00,771 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:00,772 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:00,791 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:00,792 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:05,818 - DEBUG - Polling for notifications...
2025-02-15 12:04:05,855 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:05,857 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:05,877 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:05,878 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:10,903 - DEBUG - Polling for notifications...
2025-02-15 12:04:10,939 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:10,941 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:10,961 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:10,963 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:15,983 - DEBUG - Polling for notifications...
2025-02-15 12:04:16,026 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:16,028 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:16,048 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:16,049 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:21,075 - DEBUG - Polling for notifications...
2025-02-15 12:04:21,111 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:21,113 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:21,132 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:21,133 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:26,158 - DEBUG - Polling for notifications...
2025-02-15 12:04:26,194 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:26,195 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:26,214 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:26,215 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:31,241 - DEBUG - Polling for notifications...
2025-02-15 12:04:31,277 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:31,279 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:31,298 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:31,299 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:36,325 - DEBUG - Polling for notifications...
2025-02-15 12:04:36,361 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:36,363 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:36,382 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:36,383 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:41,408 - DEBUG - Polling for notifications...
2025-02-15 12:04:41,444 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:41,445 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:41,464 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:41,465 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:46,468 - DEBUG - Polling for notifications...
2025-02-15 12:04:46,504 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:46,506 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:46,525 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:46,526 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:51,552 - DEBUG - Polling for notifications...
2025-02-15 12:04:51,589 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:51,591 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:51,610 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:51,611 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:04:56,618 - DEBUG - Polling for notifications...
2025-02-15 12:04:56,654 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:04:56,656 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:04:56,675 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:04:56,676 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:05:01,692 - DEBUG - Polling for notifications...
2025-02-15 12:05:01,728 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:05:01,730 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:05:01,750 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:05:01,751 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:05:06,773 - DEBUG - Polling for notifications...
2025-02-15 12:05:06,810 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:05:06,812 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:05:06,831 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:05:06,832 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:05:11,840 - DEBUG - Polling for notifications...
2025-02-15 12:05:11,877 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:05:11,879 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:05:11,898 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 200 20
2025-02-15 12:05:11,898 - DEBUG - Received response: {
  "update": -20
}

2025-02-15 12:05:16,906 - DEBUG - Polling for notifications...
2025-02-15 12:05:16,942 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1739617377 with data: None
2025-02-15 12:05:16,944 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-02-15 12:05:16,966 - DEBUG - https://127.0.0.1:5000 "GET /notification/1739617377 HTTP/1.1" 422 45
2025-02-15 12:05:16,967 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-02-15 12:05:16,967 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:40:55,589 - INFO - Application started.
2025-03-25 14:40:55,589 - INFO - ClientCore initialized with server URL: https://127.0.01:5000
2025-03-25 14:40:55,589 - INFO - Attempting to log in user: test
2025-03-25 14:40:55,592 - DEBUG - Loading KWallet
2025-03-25 14:40:55,592 - DEBUG - Loading SecretService
2025-03-25 14:40:55,602 - DEBUG - Loading Windows
2025-03-25 14:40:55,602 - DEBUG - Loading chainer
2025-03-25 14:40:55,602 - DEBUG - Loading libsecret
2025-03-25 14:40:55,603 - DEBUG - Loading macOS
2025-03-25 14:40:55,658 - DEBUG - Sending POST request to https://127.0.01:5000/login
2025-03-25 14:40:55,659 - DEBUG - Starting new HTTPS connection (1): 127.0.01:5000
2025-03-25 14:40:55,662 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.01', port=5000): Max retries exceeded with url: /login (Caused by SSLError(SSLCertVerificationError(1, "[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for '127.0.01'. (_ssl.c:1007)")))
2025-03-25 14:45:18,355 - INFO - Application started.
2025-03-25 14:45:18,355 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 14:45:18,355 - INFO - Attempting to log in user: test
2025-03-25 14:45:18,358 - DEBUG - Loading KWallet
2025-03-25 14:45:18,358 - DEBUG - Loading SecretService
2025-03-25 14:45:18,366 - DEBUG - Loading Windows
2025-03-25 14:45:18,367 - DEBUG - Loading chainer
2025-03-25 14:45:18,367 - DEBUG - Loading libsecret
2025-03-25 14:45:18,367 - DEBUG - Loading macOS
2025-03-25 14:45:18,401 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 14:45:18,402 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:18,406 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 14:45:18,417 - DEBUG - Received response
2025-03-25 14:45:18,435 - INFO - User test logged in successfully.
2025-03-25 14:45:18,435 - INFO - Starting polling for notifications.
2025-03-25 14:45:18,436 - DEBUG - Polling for notifications...
2025-03-25 14:45:18,446 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910318 with data: None
2025-03-25 14:45:18,447 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:18,460 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910318 HTTP/1.1" 200 21
2025-03-25 14:45:18,461 - DEBUG - Received response: {
  "update": -353
}

2025-03-25 14:45:18,590 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:45:18,590 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:18,607 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:45:18,608 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:45:23,465 - DEBUG - Polling for notifications...
2025-03-25 14:45:23,477 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:23,477 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:23,491 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:23,491 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:26,381 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-03-25 14:45:26,381 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:26,397 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-03-25 14:45:26,397 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 14:45:27,979 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-03-25 14:45:27,980 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:27,989 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 102
2025-03-25 14:45:28,029 - DEBUG - Received response: {
  "datetime": "Tue, 25 Mar 2025 14:45:27 GMT",
  "log": "Io piango tanto",
  "status": "finished"
}

2025-03-25 14:45:28,495 - DEBUG - Polling for notifications...
2025-03-25 14:45:28,507 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:28,508 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:28,522 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:28,523 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:30,016 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-03-25 14:45:30,017 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:30,031 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-03-25 14:45:30,032 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 14:45:30,678 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-03-25 14:45:30,679 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:30,688 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-03-25 14:45:30,728 - DEBUG - Received response: {
  "datetime": "Tue, 25 Mar 2025 14:45:30 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-03-25 14:45:33,525 - DEBUG - Polling for notifications...
2025-03-25 14:45:33,537 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:33,537 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:33,551 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:33,551 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:38,557 - DEBUG - Polling for notifications...
2025-03-25 14:45:38,570 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:38,570 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:38,584 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:38,584 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:43,590 - DEBUG - Polling for notifications...
2025-03-25 14:45:43,602 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:43,603 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:43,617 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:43,617 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:48,623 - DEBUG - Polling for notifications...
2025-03-25 14:45:48,635 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:48,636 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:48,650 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:48,650 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:53,656 - DEBUG - Polling for notifications...
2025-03-25 14:45:53,668 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:53,669 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:53,683 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:53,684 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:45:58,687 - DEBUG - Polling for notifications...
2025-03-25 14:45:58,699 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:45:58,700 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:45:58,714 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:45:58,714 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:03,719 - DEBUG - Polling for notifications...
2025-03-25 14:46:03,732 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:03,733 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:03,746 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:03,747 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:08,752 - DEBUG - Polling for notifications...
2025-03-25 14:46:08,765 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:08,766 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:08,779 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:08,780 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:13,785 - DEBUG - Polling for notifications...
2025-03-25 14:46:13,798 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:13,799 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:13,812 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:13,813 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:18,819 - DEBUG - Polling for notifications...
2025-03-25 14:46:18,831 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:18,831 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:18,845 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:18,846 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:23,851 - DEBUG - Polling for notifications...
2025-03-25 14:46:23,863 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:23,864 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:23,878 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:23,878 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:28,884 - DEBUG - Polling for notifications...
2025-03-25 14:46:28,896 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:28,897 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:28,911 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:28,911 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:33,914 - DEBUG - Polling for notifications...
2025-03-25 14:46:33,926 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:33,927 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:33,941 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:33,942 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:38,946 - DEBUG - Polling for notifications...
2025-03-25 14:46:38,958 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:38,959 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:38,972 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:38,973 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:43,978 - DEBUG - Polling for notifications...
2025-03-25 14:46:43,990 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910319 with data: None
2025-03-25 14:46:43,991 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:44,005 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910319 HTTP/1.1" 200 21
2025-03-25 14:46:44,005 - DEBUG - Received response: {
  "update": -354
}

2025-03-25 14:46:47,149 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'from core.interfaccia_plugin import Interfaccia_Plugin\nclass Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 14:46:47,150 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:47,154 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 14:46:47,164 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 14:46:47,164 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 14:46:47,174 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:46:47,174 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:47,188 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:46:47,189 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:46:47,208 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:46:47,209 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:47,223 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:46:47,223 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:46:47,241 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:46:47,242 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:47,256 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:46:47,256 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:46:49,010 - DEBUG - Polling for notifications...
2025-03-25 14:46:49,023 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910407 with data: None
2025-03-25 14:46:49,024 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:49,038 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910407 HTTP/1.1" 200 21
2025-03-25 14:46:49,038 - DEBUG - Received response: {
  "update": -442
}

2025-03-25 14:46:54,043 - DEBUG - Polling for notifications...
2025-03-25 14:46:54,056 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910407 with data: None
2025-03-25 14:46:54,057 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:54,070 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910407 HTTP/1.1" 200 21
2025-03-25 14:46:54,071 - DEBUG - Received response: {
  "update": -442
}

2025-03-25 14:46:59,076 - DEBUG - Polling for notifications...
2025-03-25 14:46:59,089 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910407 with data: None
2025-03-25 14:46:59,089 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:46:59,103 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910407 HTTP/1.1" 200 21
2025-03-25 14:46:59,104 - DEBUG - Received response: {
  "update": -442
}

2025-03-25 14:47:04,109 - DEBUG - Polling for notifications...
2025-03-25 14:47:04,121 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910407 with data: None
2025-03-25 14:47:04,122 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:04,136 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910407 HTTP/1.1" 200 21
2025-03-25 14:47:04,137 - DEBUG - Received response: {
  "update": -442
}

2025-03-25 14:47:09,142 - DEBUG - Polling for notifications...
2025-03-25 14:47:09,154 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910407 with data: None
2025-03-25 14:47:09,155 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:09,169 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910407 HTTP/1.1" 200 21
2025-03-25 14:47:09,169 - DEBUG - Received response: {
  "update": -442
}

2025-03-25 14:47:14,175 - DEBUG - Polling for notifications...
2025-03-25 14:47:14,187 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910407 with data: None
2025-03-25 14:47:14,188 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:14,201 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910407 HTTP/1.1" 200 21
2025-03-25 14:47:14,202 - DEBUG - Received response: {
  "update": -442
}

2025-03-25 14:47:16,956 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 14:47:16,957 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:16,961 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 14:47:16,972 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 14:47:16,972 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 14:47:16,981 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:47:16,981 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:16,995 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:47:16,996 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:47:17,015 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:47:17,015 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:17,030 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:47:17,030 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:47:17,048 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:47:17,049 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:17,063 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:47:17,063 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:47:19,206 - DEBUG - Polling for notifications...
2025-03-25 14:47:19,218 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910437 with data: None
2025-03-25 14:47:19,219 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:47:19,233 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910437 HTTP/1.1" 422 45
2025-03-25 14:47:19,234 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:47:19,234 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,851 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 14:48:13,852 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:13,856 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 422 45
2025-03-25 14:48:13,896 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,897 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,908 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:13,909 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:13,923 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 422 45
2025-03-25 14:48:13,923 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,923 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,935 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:13,936 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:13,949 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 422 45
2025-03-25 14:48:13,949 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,949 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,959 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:13,960 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:13,973 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 422 45
2025-03-25 14:48:13,973 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:13,973 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:46,129 - INFO - Application started.
2025-03-25 14:48:46,129 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 14:48:46,129 - INFO - Attempting to log in user: test
2025-03-25 14:48:46,132 - DEBUG - Loading KWallet
2025-03-25 14:48:46,132 - DEBUG - Loading SecretService
2025-03-25 14:48:46,141 - DEBUG - Loading Windows
2025-03-25 14:48:46,141 - DEBUG - Loading chainer
2025-03-25 14:48:46,141 - DEBUG - Loading libsecret
2025-03-25 14:48:46,142 - DEBUG - Loading macOS
2025-03-25 14:48:46,186 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 14:48:46,187 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:46,191 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 14:48:46,201 - DEBUG - Received response
2025-03-25 14:48:46,215 - INFO - User test logged in successfully.
2025-03-25 14:48:46,215 - INFO - Starting polling for notifications.
2025-03-25 14:48:46,215 - DEBUG - Polling for notifications...
2025-03-25 14:48:46,226 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910526 with data: None
2025-03-25 14:48:46,227 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:46,240 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910526 HTTP/1.1" 200 20
2025-03-25 14:48:46,241 - DEBUG - Received response: {
  "update": -88
}

2025-03-25 14:48:46,366 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:46,367 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:46,383 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:48:46,384 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:48:51,246 - DEBUG - Polling for notifications...
2025-03-25 14:48:51,259 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910526 with data: None
2025-03-25 14:48:51,260 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:51,274 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910526 HTTP/1.1" 200 20
2025-03-25 14:48:51,274 - DEBUG - Received response: {
  "update": -88
}

2025-03-25 14:48:53,269 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 14:48:53,270 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:53,274 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 14:48:53,284 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 14:48:53,284 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 14:48:53,294 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:53,295 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:53,309 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:48:53,309 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:48:53,328 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:53,329 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:53,343 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:48:53,343 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:48:53,361 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:48:53,362 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:53,376 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:48:53,376 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:48:56,278 - DEBUG - Polling for notifications...
2025-03-25 14:48:56,290 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910533 with data: None
2025-03-25 14:48:56,291 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:56,306 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910533 HTTP/1.1" 422 45
2025-03-25 14:48:56,306 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:56,306 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:56,703 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-03-25 14:48:56,704 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:56,718 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 422 45
2025-03-25 14:48:56,718 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:56,718 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:58,201 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-03-25 14:48:58,202 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:58,215 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 422 45
2025-03-25 14:48:58,216 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:58,216 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:58,627 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-03-25 14:48:58,628 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:48:58,642 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 422 45
2025-03-25 14:48:58,642 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 14:48:58,642 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 14:49:27,764 - INFO - Application started.
2025-03-25 14:49:27,764 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 14:49:27,765 - INFO - Attempting to log in user: test
2025-03-25 14:49:27,768 - DEBUG - Loading KWallet
2025-03-25 14:49:27,768 - DEBUG - Loading SecretService
2025-03-25 14:49:27,776 - DEBUG - Loading Windows
2025-03-25 14:49:27,777 - DEBUG - Loading chainer
2025-03-25 14:49:27,777 - DEBUG - Loading libsecret
2025-03-25 14:49:27,777 - DEBUG - Loading macOS
2025-03-25 14:49:27,822 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 14:49:27,823 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:27,828 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 14:49:27,838 - DEBUG - Received response
2025-03-25 14:49:27,851 - INFO - User test logged in successfully.
2025-03-25 14:49:27,851 - INFO - Starting polling for notifications.
2025-03-25 14:49:27,851 - DEBUG - Polling for notifications...
2025-03-25 14:49:27,862 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910568 with data: None
2025-03-25 14:49:27,863 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:27,876 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910568 HTTP/1.1" 200 20
2025-03-25 14:49:27,877 - DEBUG - Received response: {
  "update": -11
}

2025-03-25 14:49:27,998 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:49:27,999 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:28,015 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:49:28,016 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:49:28,805 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-03-25 14:49:28,806 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:28,822 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-03-25 14:49:28,822 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 14:49:32,881 - DEBUG - Polling for notifications...
2025-03-25 14:49:32,893 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910568 with data: None
2025-03-25 14:49:32,894 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:32,908 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910568 HTTP/1.1" 200 20
2025-03-25 14:49:32,908 - DEBUG - Received response: {
  "update": -11
}

2025-03-25 14:49:34,294 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-03-25 14:49:34,294 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:34,303 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-03-25 14:49:34,344 - DEBUG - Received response: {
  "datetime": "Tue, 25 Mar 2025 14:49:34 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-03-25 14:49:37,581 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-03-25 14:49:37,582 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:37,596 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-03-25 14:49:37,597 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 14:49:37,914 - DEBUG - Polling for notifications...
2025-03-25 14:49:37,926 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910568 with data: None
2025-03-25 14:49:37,927 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:37,941 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910568 HTTP/1.1" 200 20
2025-03-25 14:49:37,941 - DEBUG - Received response: {
  "update": -11
}

2025-03-25 14:49:42,946 - DEBUG - Polling for notifications...
2025-03-25 14:49:42,959 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910568 with data: None
2025-03-25 14:49:42,959 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:42,973 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910568 HTTP/1.1" 200 20
2025-03-25 14:49:42,974 - DEBUG - Received response: {
  "update": -11
}

2025-03-25 14:49:44,904 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-03-25 14:49:44,904 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:44,919 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-03-25 14:49:44,919 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 14:49:47,979 - DEBUG - Polling for notifications...
2025-03-25 14:49:47,992 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910568 with data: None
2025-03-25 14:49:47,993 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:48,006 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910568 HTTP/1.1" 200 20
2025-03-25 14:49:48,007 - DEBUG - Received response: {
  "update": -11
}

2025-03-25 14:49:53,012 - DEBUG - Polling for notifications...
2025-03-25 14:49:53,025 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742910568 with data: None
2025-03-25 14:49:53,026 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:49:53,039 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742910568 HTTP/1.1" 200 20
2025-03-25 14:49:53,040 - DEBUG - Received response: {
  "update": -11
}

2025-03-25 14:59:50,926 - INFO - Application started.
2025-03-25 14:59:50,926 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 14:59:50,926 - INFO - Attempting to log in user: test
2025-03-25 14:59:50,929 - DEBUG - Loading KWallet
2025-03-25 14:59:50,929 - DEBUG - Loading SecretService
2025-03-25 14:59:50,937 - DEBUG - Loading Windows
2025-03-25 14:59:50,938 - DEBUG - Loading chainer
2025-03-25 14:59:50,938 - DEBUG - Loading libsecret
2025-03-25 14:59:50,938 - DEBUG - Loading macOS
2025-03-25 14:59:50,983 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 14:59:50,984 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:59:50,989 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 14:59:50,999 - DEBUG - Received response
2025-03-25 14:59:51,012 - INFO - User test logged in successfully.
2025-03-25 14:59:51,012 - INFO - Starting polling for notifications.
2025-03-25 14:59:51,013 - DEBUG - Polling for notifications...
2025-03-25 14:59:51,022 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911191 with data: None
2025-03-25 14:59:51,023 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:59:51,037 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911191 HTTP/1.1" 200 19
2025-03-25 14:59:51,038 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 14:59:51,173 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 14:59:51,174 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:59:51,190 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 14:59:51,191 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 14:59:56,043 - DEBUG - Polling for notifications...
2025-03-25 14:59:56,055 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911191 with data: None
2025-03-25 14:59:56,056 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 14:59:56,070 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911191 HTTP/1.1" 200 19
2025-03-25 14:59:56,070 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:00:01,075 - DEBUG - Polling for notifications...
2025-03-25 15:00:01,087 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911191 with data: None
2025-03-25 15:00:01,088 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:01,101 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911191 HTTP/1.1" 200 19
2025-03-25 15:00:01,102 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:00:06,107 - DEBUG - Polling for notifications...
2025-03-25 15:00:06,120 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911191 with data: None
2025-03-25 15:00:06,121 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:06,135 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911191 HTTP/1.1" 200 19
2025-03-25 15:00:06,135 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:00:11,141 - DEBUG - Polling for notifications...
2025-03-25 15:00:11,153 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911191 with data: None
2025-03-25 15:00:11,154 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:11,167 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911191 HTTP/1.1" 200 19
2025-03-25 15:00:11,168 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:00:16,193 - DEBUG - Polling for notifications...
2025-03-25 15:00:16,206 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911191 with data: None
2025-03-25 15:00:16,206 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:16,220 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911191 HTTP/1.1" 200 19
2025-03-25 15:00:16,221 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:00:20,360 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 15:00:20,361 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:20,365 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 15:00:20,375 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 15:00:20,375 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 15:00:20,385 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:00:20,386 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:20,400 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:00:20,401 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:00:20,420 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:00:20,420 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:20,434 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:00:20,434 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:00:20,452 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:00:20,452 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:20,466 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:00:20,467 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:00:21,246 - DEBUG - Polling for notifications...
2025-03-25 15:00:21,258 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911220 with data: None
2025-03-25 15:00:21,259 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:00:21,274 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911220 HTTP/1.1" 422 45
2025-03-25 15:00:21,274 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-03-25 15:00:21,274 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-03-25 15:03:29,937 - INFO - Application started.
2025-03-25 15:03:29,937 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:03:29,937 - INFO - Attempting to log in user: test
2025-03-25 15:03:29,940 - DEBUG - Loading KWallet
2025-03-25 15:03:29,940 - DEBUG - Loading SecretService
2025-03-25 15:03:29,949 - DEBUG - Loading Windows
2025-03-25 15:03:29,950 - DEBUG - Loading chainer
2025-03-25 15:03:29,950 - DEBUG - Loading libsecret
2025-03-25 15:03:29,950 - DEBUG - Loading macOS
2025-03-25 15:03:29,995 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:03:29,996 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:30,000 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 15:03:30,010 - DEBUG - Received response
2025-03-25 15:03:30,023 - INFO - User test logged in successfully.
2025-03-25 15:03:30,023 - INFO - Starting polling for notifications.
2025-03-25 15:03:30,023 - DEBUG - Polling for notifications...
2025-03-25 15:03:30,033 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911410 with data: None
2025-03-25 15:03:30,034 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:30,047 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911410 HTTP/1.1" 200 19
2025-03-25 15:03:30,048 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:03:30,180 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:03:30,180 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:30,197 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:03:30,197 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:03:35,053 - DEBUG - Polling for notifications...
2025-03-25 15:03:35,065 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911410 with data: None
2025-03-25 15:03:35,066 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:35,080 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911410 HTTP/1.1" 200 19
2025-03-25 15:03:35,080 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:03:37,551 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 15:03:37,552 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:37,556 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 15:03:37,566 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 15:03:37,566 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 15:03:37,576 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:03:37,576 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:37,590 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:03:37,590 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:03:37,611 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:03:37,612 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:37,626 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:03:37,626 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:03:37,643 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:03:37,644 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:37,658 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:03:37,658 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:03:40,085 - DEBUG - Polling for notifications...
2025-03-25 15:03:40,099 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911418 with data: None
2025-03-25 15:03:40,100 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:40,114 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911418 HTTP/1.1" 200 20
2025-03-25 15:03:40,115 - DEBUG - Received response: {
  "update": -16
}

2025-03-25 15:03:45,120 - DEBUG - Polling for notifications...
2025-03-25 15:03:45,132 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911418 with data: None
2025-03-25 15:03:45,133 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:45,147 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911418 HTTP/1.1" 200 20
2025-03-25 15:03:45,147 - DEBUG - Received response: {
  "update": -16
}

2025-03-25 15:03:50,152 - DEBUG - Polling for notifications...
2025-03-25 15:03:50,165 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911418 with data: None
2025-03-25 15:03:50,166 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:03:50,167 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /notification/1742911418 (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7a7b81238370>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-03-25 15:04:39,771 - INFO - Application started.
2025-03-25 15:04:39,771 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:04:39,772 - INFO - Attempting to log in user: test
2025-03-25 15:04:39,774 - DEBUG - Loading KWallet
2025-03-25 15:04:39,775 - DEBUG - Loading SecretService
2025-03-25 15:04:39,784 - DEBUG - Loading Windows
2025-03-25 15:04:39,784 - DEBUG - Loading chainer
2025-03-25 15:04:39,784 - DEBUG - Loading libsecret
2025-03-25 15:04:39,785 - DEBUG - Loading macOS
2025-03-25 15:04:39,829 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:04:39,830 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:04:39,834 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 401 35
2025-03-25 15:04:39,845 - DEBUG - Received response
2025-03-25 15:04:39,845 - ERROR - Error 401: {
  "msg": "Error, login failed"
}

2025-03-25 15:04:53,263 - INFO - Application started.
2025-03-25 15:04:53,263 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:04:53,263 - INFO - Attempting to log in user: test
2025-03-25 15:04:53,266 - DEBUG - Loading KWallet
2025-03-25 15:04:53,266 - DEBUG - Loading SecretService
2025-03-25 15:04:53,275 - DEBUG - Loading Windows
2025-03-25 15:04:53,275 - DEBUG - Loading chainer
2025-03-25 15:04:53,275 - DEBUG - Loading libsecret
2025-03-25 15:04:53,276 - DEBUG - Loading macOS
2025-03-25 15:04:53,320 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:04:53,322 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:04:53,325 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 15:04:53,335 - DEBUG - Received response
2025-03-25 15:04:53,349 - INFO - User test logged in successfully.
2025-03-25 15:04:53,349 - INFO - Starting polling for notifications.
2025-03-25 15:04:53,349 - DEBUG - Polling for notifications...
2025-03-25 15:04:53,359 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911493 with data: None
2025-03-25 15:04:53,360 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:04:53,373 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911493 HTTP/1.1" 200 20
2025-03-25 15:04:53,374 - DEBUG - Received response: {
  "update": -51
}

2025-03-25 15:04:53,505 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:04:53,506 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:04:53,522 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:04:53,522 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:04:58,379 - DEBUG - Polling for notifications...
2025-03-25 15:04:58,392 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911494 with data: None
2025-03-25 15:04:58,393 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:04:58,407 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911494 HTTP/1.1" 200 20
2025-03-25 15:04:58,407 - DEBUG - Received response: {
  "update": -52
}

2025-03-25 15:05:00,871 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 15:05:00,872 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:05:00,875 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 15:05:00,886 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 15:05:00,886 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 15:05:00,896 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:05:00,896 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:05:00,910 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:05:00,911 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:05:00,931 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:05:00,932 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:05:00,946 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:05:00,946 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:05:00,964 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:05:00,965 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:05:00,979 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:05:00,979 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:05:03,411 - DEBUG - Polling for notifications...
2025-03-25 15:05:03,421 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911501 with data: None
2025-03-25 15:05:03,422 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:05:03,436 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911501 HTTP/1.1" 200 20
2025-03-25 15:05:03,436 - DEBUG - Received response: {
  "update": -59
}

2025-03-25 15:05:08,441 - DEBUG - Polling for notifications...
2025-03-25 15:05:08,454 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911501 with data: None
2025-03-25 15:05:08,455 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:05:08,469 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911501 HTTP/1.1" 200 20
2025-03-25 15:05:08,469 - DEBUG - Received response: {
  "update": -59
}

2025-03-25 15:06:34,672 - INFO - Application started.
2025-03-25 15:06:34,672 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:06:34,672 - INFO - Attempting to log in user: test
2025-03-25 15:06:34,675 - DEBUG - Loading KWallet
2025-03-25 15:06:34,676 - DEBUG - Loading SecretService
2025-03-25 15:06:34,684 - DEBUG - Loading Windows
2025-03-25 15:06:34,685 - DEBUG - Loading chainer
2025-03-25 15:06:34,685 - DEBUG - Loading libsecret
2025-03-25 15:06:34,685 - DEBUG - Loading macOS
2025-03-25 15:06:34,729 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:06:34,730 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:34,734 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 15:06:34,744 - DEBUG - Received response
2025-03-25 15:06:34,758 - INFO - User test logged in successfully.
2025-03-25 15:06:34,758 - INFO - Starting polling for notifications.
2025-03-25 15:06:34,758 - DEBUG - Polling for notifications...
2025-03-25 15:06:34,768 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911595 with data: None
2025-03-25 15:06:34,769 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:34,783 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911595 HTTP/1.1" 200 19
2025-03-25 15:06:34,783 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:06:34,914 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:06:34,914 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:34,930 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:06:34,931 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:06:37,588 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-03-25 15:06:37,589 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:37,605 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-03-25 15:06:37,605 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 15:06:38,802 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-03-25 15:06:38,803 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:38,813 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-03-25 15:06:38,853 - DEBUG - Received response: {
  "datetime": "Tue, 25 Mar 2025 15:06:38 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-03-25 15:06:39,788 - DEBUG - Polling for notifications...
2025-03-25 15:06:39,801 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911595 with data: None
2025-03-25 15:06:39,802 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:39,816 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911595 HTTP/1.1" 200 19
2025-03-25 15:06:39,816 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:06:41,930 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-03-25 15:06:41,930 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:41,945 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-03-25 15:06:41,945 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 15:06:42,540 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-03-25 15:06:42,541 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:42,556 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-03-25 15:06:42,556 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 15:06:44,821 - DEBUG - Polling for notifications...
2025-03-25 15:06:44,833 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911595 with data: None
2025-03-25 15:06:44,834 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:44,848 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911595 HTTP/1.1" 200 19
2025-03-25 15:06:44,849 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:06:49,854 - DEBUG - Polling for notifications...
2025-03-25 15:06:49,866 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911595 with data: None
2025-03-25 15:06:49,867 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:49,881 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911595 HTTP/1.1" 200 19
2025-03-25 15:06:49,881 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:06:51,157 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n\n', 'name': 'file.py'}
2025-03-25 15:06:51,158 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:51,162 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 15:06:51,172 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 15:06:51,172 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 15:06:51,182 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:06:51,183 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:51,197 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:06:51,197 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:06:51,216 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:06:51,217 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:51,231 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:06:51,231 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:06:51,249 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:06:51,249 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:51,264 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:06:51,264 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:06:54,887 - DEBUG - Polling for notifications...
2025-03-25 15:06:54,900 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911611 with data: None
2025-03-25 15:06:54,900 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:06:54,914 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911611 HTTP/1.1" 200 20
2025-03-25 15:06:54,915 - DEBUG - Received response: {
  "update": -24
}

2025-03-25 15:08:28,120 - INFO - Application started.
2025-03-25 15:08:28,120 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:08:28,120 - INFO - Attempting to log in user: test
2025-03-25 15:08:28,124 - DEBUG - Loading KWallet
2025-03-25 15:08:28,124 - DEBUG - Loading SecretService
2025-03-25 15:08:28,132 - DEBUG - Loading Windows
2025-03-25 15:08:28,133 - DEBUG - Loading chainer
2025-03-25 15:08:28,133 - DEBUG - Loading libsecret
2025-03-25 15:08:28,133 - DEBUG - Loading macOS
2025-03-25 15:08:28,179 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:08:28,180 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:28,184 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 15:08:28,194 - DEBUG - Received response
2025-03-25 15:08:28,208 - INFO - User test logged in successfully.
2025-03-25 15:08:28,208 - INFO - Starting polling for notifications.
2025-03-25 15:08:28,208 - DEBUG - Polling for notifications...
2025-03-25 15:08:28,218 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911708 with data: None
2025-03-25 15:08:28,219 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:28,233 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911708 HTTP/1.1" 200 19
2025-03-25 15:08:28,233 - DEBUG - Received response: {
  "update": -9
}

2025-03-25 15:08:28,360 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:08:28,361 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:28,377 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:08:28,377 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:08:33,238 - DEBUG - Polling for notifications...
2025-03-25 15:08:33,251 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911708 with data: None
2025-03-25 15:08:33,252 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:33,266 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911708 HTTP/1.1" 200 19
2025-03-25 15:08:33,267 - DEBUG - Received response: {
  "update": -9
}

2025-03-25 15:08:36,066 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file.py'}
2025-03-25 15:08:36,067 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:36,071 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 15:08:36,082 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 15:08:36,082 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 15:08:36,092 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:08:36,092 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:36,107 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:08:36,107 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:08:36,126 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:08:36,127 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:36,141 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:08:36,141 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:08:36,158 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:08:36,159 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:36,173 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:08:36,174 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:08:38,272 - DEBUG - Polling for notifications...
2025-03-25 15:08:38,284 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742911716 with data: None
2025-03-25 15:08:38,284 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:08:38,298 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742911716 HTTP/1.1" 200 20
2025-03-25 15:08:38,299 - DEBUG - Received response: {
  "update": -17
}

2025-03-25 15:14:19,052 - INFO - Application started.
2025-03-25 15:14:19,052 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:14:19,052 - INFO - Attempting to log in user: test
2025-03-25 15:14:19,056 - DEBUG - Loading KWallet
2025-03-25 15:14:19,056 - DEBUG - Loading SecretService
2025-03-25 15:14:19,065 - DEBUG - Loading Windows
2025-03-25 15:14:19,065 - DEBUG - Loading chainer
2025-03-25 15:14:19,066 - DEBUG - Loading libsecret
2025-03-25 15:14:19,066 - DEBUG - Loading macOS
2025-03-25 15:14:19,111 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:14:19,112 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:19,116 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 15:14:19,127 - DEBUG - Received response
2025-03-25 15:14:19,141 - INFO - User test logged in successfully.
2025-03-25 15:14:19,141 - INFO - Starting polling for notifications.
2025-03-25 15:14:19,141 - DEBUG - Polling for notifications...
2025-03-25 15:14:19,151 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742912059 with data: None
2025-03-25 15:14:19,152 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:19,166 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742912059 HTTP/1.1" 200 19
2025-03-25 15:14:19,166 - DEBUG - Received response: {
  "update": -9
}

2025-03-25 15:14:19,297 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:14:19,298 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:19,314 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:14:19,314 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:14:24,171 - DEBUG - Polling for notifications...
2025-03-25 15:14:24,184 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742912059 with data: None
2025-03-25 15:14:24,185 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:24,199 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742912059 HTTP/1.1" 200 19
2025-03-25 15:14:24,200 - DEBUG - Received response: {
  "update": -9
}

2025-03-25 15:14:25,778 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file.py'}
2025-03-25 15:14:25,779 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:25,783 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 404 39
2025-03-25 15:14:25,793 - DEBUG - Received response: {
  "error": "Error during creation"
}

2025-03-25 15:14:25,793 - ERROR - Error 404: {
  "error": "Error during creation"
}

2025-03-25 15:14:25,803 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:14:25,803 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:25,818 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:14:25,818 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:14:25,837 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:14:25,838 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:25,853 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:14:25,853 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:14:25,871 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:14:25,871 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:14:25,885 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:14:25,886 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:15:55,071 - INFO - Application started.
2025-03-25 15:15:55,071 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-03-25 15:15:55,071 - INFO - Attempting to log in user: test
2025-03-25 15:15:55,074 - DEBUG - Loading KWallet
2025-03-25 15:15:55,075 - DEBUG - Loading SecretService
2025-03-25 15:15:55,083 - DEBUG - Loading Windows
2025-03-25 15:15:55,084 - DEBUG - Loading chainer
2025-03-25 15:15:55,084 - DEBUG - Loading libsecret
2025-03-25 15:15:55,084 - DEBUG - Loading macOS
2025-03-25 15:15:55,131 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-03-25 15:15:55,132 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:15:55,136 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-03-25 15:15:55,147 - DEBUG - Received response
2025-03-25 15:15:55,160 - INFO - User test logged in successfully.
2025-03-25 15:15:55,161 - INFO - Starting polling for notifications.
2025-03-25 15:15:55,161 - DEBUG - Polling for notifications...
2025-03-25 15:15:55,171 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742912155 with data: None
2025-03-25 15:15:55,172 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:15:55,186 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742912155 HTTP/1.1" 200 19
2025-03-25 15:15:55,187 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:15:55,322 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:15:55,322 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:15:55,339 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:15:55,339 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:16:00,192 - DEBUG - Polling for notifications...
2025-03-25 15:16:00,204 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742912155 with data: None
2025-03-25 15:16:00,205 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:00,219 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742912155 HTTP/1.1" 200 19
2025-03-25 15:16:00,219 - DEBUG - Received response: {
  "update": -8
}

2025-03-25 15:16:01,898 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'class Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'file.py'}
2025-03-25 15:16:01,899 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:01,906 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 500 18730
2025-03-25 15:16:01,916 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;tempfile&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "dl8Kh4iqh3O3gm3Rn5tC";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;tempfile&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137256206942384">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137256197040144">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137256197040256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137256197040368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137256197040480">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137256197040592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137256197040704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137256197128928">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">155</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>data = sanitize_dict(data)</pre>
<pre class="line before"><span class="ws">    </span>if not data or &#39;name&#39; not in data:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#34;error&#34;: &#34;Invalid record&#34;}), 404</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])</pre>
<pre class="line after"><span class="ws">    </span>if created:</pre>
<pre class="line after"><span class="ws">        </span># Create a new plugin instance</pre>
<pre class="line after"><span class="ws">        </span>new_plugin = PlugTable(</pre>
<pre class="line after"><span class="ws">            </span>name=data[&#39;name&#39;],</pre>
<pre class="line after"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre></div>
</div>

<li><div class="frame" id="frame-137256197133072">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">202</em>,
      in <code class="function">creaPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.sh&#39;):</pre>
<pre class="line before"><span class="ws">        </span>return creaPluginSh(nome_file, contenuto)</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.py&#39;):</pre>
<pre class="line current"><span class="ws">        </span>return creaPluginPy(nome_file, contenuto)</pre>
<pre class="line after"><span class="ws">    </span>print(&#34;Il tipo di file non e&#39; supportato&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137256197138336">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">140</em>,
      in <code class="function">creaPluginPy</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Add required import</pre>
<pre class="line before"><span class="ws">    </span>full_content = f&#34;from core.interfaccia_plugin import Interfaccia_Plugin\n\n{contenuto}&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Use temporary directory for validation</pre>
<pre class="line current"><span class="ws">    </span>with tempfile.TemporaryDirectory() as temp_dir:</pre>
<pre class="line after"><span class="ws">        </span>temp_file = Path(temp_dir) / nome_file</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span># Write to temporary file</pre>
<pre class="line after"><span class="ws">            </span>temp_file.write_text(full_content, encoding=&#34;utf-8&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;tempfile&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 155, in new_plugin
    created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 202, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 140, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name &#39;tempfile&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 155, in new_plugin
    created = creaPlugin(data['name'], data['content'])
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 202, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 140, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name 'tempfile' is not defined


-->

2025-03-25 15:16:01,917 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;tempfile&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "dl8Kh4iqh3O3gm3Rn5tC";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;tempfile&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-137256206942384">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-137256197040144">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-137256197040256">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-137256197040368">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-137256197040480">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-137256197040592">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-137256197040704">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137256197128928">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py"</cite>,
      line <em class="line">155</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>data = sanitize_dict(data)</pre>
<pre class="line before"><span class="ws">    </span>if not data or &#39;name&#39; not in data:</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#34;error&#34;: &#34;Invalid record&#34;}), 404</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])</pre>
<pre class="line after"><span class="ws">    </span>if created:</pre>
<pre class="line after"><span class="ws">        </span># Create a new plugin instance</pre>
<pre class="line after"><span class="ws">        </span>new_plugin = PlugTable(</pre>
<pre class="line after"><span class="ws">            </span>name=data[&#39;name&#39;],</pre>
<pre class="line after"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre></div>
</div>

<li><div class="frame" id="frame-137256197133072">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">202</em>,
      in <code class="function">creaPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def creaPlugin(nome_file, contenuto):</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.sh&#39;):</pre>
<pre class="line before"><span class="ws">        </span>return creaPluginSh(nome_file, contenuto)</pre>
<pre class="line before"><span class="ws">    </span>if nome_file.endswith(&#39;.py&#39;):</pre>
<pre class="line current"><span class="ws">        </span>return creaPluginPy(nome_file, contenuto)</pre>
<pre class="line after"><span class="ws">    </span>print(&#34;Il tipo di file non e&#39; supportato&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-137256197138336">
  <h4>File <cite class="filename">"/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py"</cite>,
      line <em class="line">140</em>,
      in <code class="function">creaPluginPy</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Add required import</pre>
<pre class="line before"><span class="ws">    </span>full_content = f&#34;from core.interfaccia_plugin import Interfaccia_Plugin\n\n{contenuto}&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Use temporary directory for validation</pre>
<pre class="line current"><span class="ws">    </span>with tempfile.TemporaryDirectory() as temp_dir:</pre>
<pre class="line after"><span class="ws">        </span>temp_file = Path(temp_dir) / nome_file</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>try:</pre>
<pre class="line after"><span class="ws">            </span># Write to temporary file</pre>
<pre class="line after"><span class="ws">            </span>temp_file.write_text(full_content, encoding=&#34;utf-8&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;tempfile&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py&#34;, line 155, in new_plugin
    created = creaPlugin(data[&#39;name&#39;], data[&#39;content&#39;])
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 202, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File &#34;/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py&#34;, line 140, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name &#39;tempfile&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/venv/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/core.py", line 155, in new_plugin
    created = creaPlugin(data['name'], data['content'])
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 202, in creaPlugin
    return creaPluginPy(nome_file, contenuto)
  File "/home/bt/Documents/GitHub/PlugInk/ServerSide/core/plugin_loader.py", line 140, in creaPluginPy
    with tempfile.TemporaryDirectory() as temp_dir:
NameError: name 'tempfile' is not defined


-->

2025-03-25 15:16:01,927 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:16:01,928 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:01,942 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:16:01,943 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:16:01,963 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:16:01,964 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:01,978 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:16:01,978 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:16:01,996 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-03-25 15:16:01,997 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:02,011 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-03-25 15:16:02,011 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-03-25 15:16:05,224 - DEBUG - Polling for notifications...
2025-03-25 15:16:05,236 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742912162 with data: None
2025-03-25 15:16:05,237 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:05,251 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742912162 HTTP/1.1" 200 20
2025-03-25 15:16:05,251 - DEBUG - Received response: {
  "update": -15
}

2025-03-25 15:16:09,283 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/3 with data: None
2025-03-25 15:16:09,284 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:09,300 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/3 HTTP/1.1" 200 40
2025-03-25 15:16:09,300 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 15:16:10,256 - DEBUG - Polling for notifications...
2025-03-25 15:16:10,269 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1742912162 with data: None
2025-03-25 15:16:10,270 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:10,283 - DEBUG - https://127.0.0.1:5000 "GET /notification/1742912162 HTTP/1.1" 200 20
2025-03-25 15:16:10,284 - DEBUG - Received response: {
  "update": -15
}

2025-03-25 15:16:10,527 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/3 with data: {}
2025-03-25 15:16:10,528 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:10,537 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/3 HTTP/1.1" 200 96
2025-03-25 15:16:10,578 - DEBUG - Received response: {
  "datetime": "Tue, 25 Mar 2025 15:16:10 GMT",
  "log": "Io saluto",
  "status": "finished"
}

2025-03-25 15:16:11,796 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-03-25 15:16:11,797 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:11,812 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-03-25 15:16:11,812 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-03-25 15:16:12,247 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-03-25 15:16:12,248 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-03-25 15:16:12,263 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-03-25 15:16:12,263 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-09 11:19:54,141 - INFO - Application started.
2025-04-09 11:19:54,141 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 11:19:54,141 - INFO - Attempting to log in user: test
2025-04-09 11:19:54,246 - DEBUG - Loading KWallet
2025-04-09 11:19:54,258 - DEBUG - Loading SecretService
2025-04-09 11:19:54,412 - DEBUG - Loading Windows
2025-04-09 11:19:54,507 - DEBUG - Loaded cffi backend
2025-04-09 11:19:54,732 - DEBUG - Loading chainer
2025-04-09 11:19:54,740 - DEBUG - Loading libsecret
2025-04-09 11:19:54,749 - DEBUG - Loading macOS
2025-04-09 11:19:54,783 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 11:19:54,788 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:19:54,804 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 11:19:54,808 - DEBUG - Received response
2025-04-09 11:19:54,833 - INFO - User test logged in successfully.
2025-04-09 11:19:54,833 - INFO - Starting polling for notifications.
2025-04-09 11:19:54,833 - DEBUG - Polling for notifications...
2025-04-09 11:19:54,836 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190394 with data: None
2025-04-09 11:19:54,836 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:19:54,844 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190394 HTTP/1.1" 200 20
2025-04-09 11:19:54,844 - DEBUG - Received response: {
  "update": -27
}

2025-04-09 11:19:54,892 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:19:54,896 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:19:54,904 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:19:54,904 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:19:58,123 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:19:58,123 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:19:58,137 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-09 11:19:58,141 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-09 11:19:59,853 - DEBUG - Polling for notifications...
2025-04-09 11:19:59,853 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190395 with data: None
2025-04-09 11:19:59,857 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:19:59,865 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190395 HTTP/1.1" 200 20
2025-04-09 11:19:59,865 - DEBUG - Received response: {
  "update": -28
}

2025-04-09 11:20:02,558 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:20:02,558 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:20:02,567 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-09 11:20:02,570 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-09 11:20:04,877 - DEBUG - Polling for notifications...
2025-04-09 11:20:04,879 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190395 with data: None
2025-04-09 11:20:04,881 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:20:04,889 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190395 HTTP/1.1" 200 20
2025-04-09 11:20:04,889 - DEBUG - Received response: {
  "update": -28
}

2025-04-09 11:20:09,893 - DEBUG - Polling for notifications...
2025-04-09 11:20:09,893 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190395 with data: None
2025-04-09 11:20:09,897 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:20:09,909 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190395 HTTP/1.1" 200 20
2025-04-09 11:20:09,909 - DEBUG - Received response: {
  "update": -28
}

2025-04-09 11:20:14,912 - DEBUG - Polling for notifications...
2025-04-09 11:20:14,912 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190395 with data: None
2025-04-09 11:20:14,916 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:20:14,924 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190395 HTTP/1.1" 200 20
2025-04-09 11:20:14,924 - DEBUG - Received response: {
  "update": -28
}

2025-04-09 11:20:19,933 - DEBUG - Polling for notifications...
2025-04-09 11:20:19,933 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190395 with data: None
2025-04-09 11:20:19,933 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:20:19,940 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190395 HTTP/1.1" 200 20
2025-04-09 11:20:19,940 - DEBUG - Received response: {
  "update": -28
}

2025-04-09 11:20:21,071 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:20:21,076 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:20:21,087 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-09 11:20:21,087 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-09 11:20:22,512 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-09 11:20:22,516 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:20:22,556 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 104
2025-04-09 11:20:22,556 - DEBUG - Received response: {
  "datetime": "Wed, 09 Apr 2025 11:20:22 GMT",
  "log": "Io sono Nessunooo",
  "status": "finished"
}

2025-04-09 11:20:24,948 - DEBUG - Polling for notifications...
2025-04-09 11:20:24,948 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190395 with data: None
2025-04-09 11:20:24,952 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:20:24,960 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190395 HTTP/1.1" 200 20
2025-04-09 11:20:24,960 - DEBUG - Received response: {
  "update": -28
}

2025-04-09 11:20:29,971 - DEBUG - Polling for notifications...
2025-04-09 11:20:29,971 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190395 with data: None
2025-04-09 11:20:29,971 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:20:29,979 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190395 HTTP/1.1" 200 20
2025-04-09 11:20:29,983 - DEBUG - Received response: {
  "update": -28
}

2025-04-09 11:20:34,989 - DEBUG - Polling for notifications...
2025-04-09 11:20:34,989 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190395 with data: None
2025-04-09 11:20:34,989 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:20:34,997 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190395 HTTP/1.1" 200 20
2025-04-09 11:20:34,997 - DEBUG - Received response: {
  "update": -28
}

2025-04-09 11:20:40,005 - DEBUG - Polling for notifications...
2025-04-09 11:20:40,005 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190395 with data: None
2025-04-09 11:20:40,009 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:20:40,021 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190395 HTTP/1.1" 200 20
2025-04-09 11:20:40,021 - DEBUG - Received response: {
  "update": -28
}

2025-04-09 11:26:01,588 - INFO - Application started.
2025-04-09 11:26:01,588 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 11:26:01,588 - INFO - Attempting to log in user: test
2025-04-09 11:26:01,663 - DEBUG - Loading KWallet
2025-04-09 11:26:01,671 - DEBUG - Loading SecretService
2025-04-09 11:26:01,942 - DEBUG - Loading Windows
2025-04-09 11:26:02,027 - DEBUG - Loaded cffi backend
2025-04-09 11:26:02,227 - DEBUG - Loading chainer
2025-04-09 11:26:02,236 - DEBUG - Loading libsecret
2025-04-09 11:26:02,244 - DEBUG - Loading macOS
2025-04-09 11:26:02,280 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 11:26:02,304 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:02,312 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 11:26:02,329 - DEBUG - Received response
2025-04-09 11:26:02,346 - INFO - User test logged in successfully.
2025-04-09 11:26:02,346 - INFO - Starting polling for notifications.
2025-04-09 11:26:02,346 - DEBUG - Polling for notifications...
2025-04-09 11:26:02,349 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190762 with data: None
2025-04-09 11:26:02,349 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:02,357 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190762 HTTP/1.1" 200 21
2025-04-09 11:26:02,357 - DEBUG - Received response: {
  "update": -395
}

2025-04-09 11:26:02,397 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:26:02,399 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:02,405 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:26:02,409 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:26:07,365 - DEBUG - Polling for notifications...
2025-04-09 11:26:07,365 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190762 with data: None
2025-04-09 11:26:07,369 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:07,377 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190762 HTTP/1.1" 200 21
2025-04-09 11:26:07,377 - DEBUG - Received response: {
  "update": -395
}

2025-04-09 11:26:12,387 - DEBUG - Polling for notifications...
2025-04-09 11:26:12,388 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190762 with data: None
2025-04-09 11:26:12,392 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:12,401 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190762 HTTP/1.1" 200 21
2025-04-09 11:26:12,401 - DEBUG - Received response: {
  "update": -395
}

2025-04-09 11:26:17,406 - DEBUG - Polling for notifications...
2025-04-09 11:26:17,406 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190762 with data: None
2025-04-09 11:26:17,410 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:17,418 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190762 HTTP/1.1" 200 21
2025-04-09 11:26:17,418 - DEBUG - Received response: {
  "update": -395
}

2025-04-09 11:26:22,428 - DEBUG - Polling for notifications...
2025-04-09 11:26:22,428 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190762 with data: None
2025-04-09 11:26:22,432 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:22,440 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190762 HTTP/1.1" 200 21
2025-04-09 11:26:22,440 - DEBUG - Received response: {
  "update": -395
}

2025-04-09 11:26:27,456 - DEBUG - Polling for notifications...
2025-04-09 11:26:27,456 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190762 with data: None
2025-04-09 11:26:27,460 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:27,468 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190762 HTTP/1.1" 200 21
2025-04-09 11:26:27,468 - DEBUG - Received response: {
  "update": -395
}

2025-04-09 11:26:28,225 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:26:28,230 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:28,238 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-09 11:26:28,242 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-09 11:26:32,478 - DEBUG - Polling for notifications...
2025-04-09 11:26:32,478 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190762 with data: None
2025-04-09 11:26:32,482 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:32,495 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190762 HTTP/1.1" 200 21
2025-04-09 11:26:32,495 - DEBUG - Received response: {
  "update": -395
}

2025-04-09 11:26:37,503 - DEBUG - Polling for notifications...
2025-04-09 11:26:37,503 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190762 with data: None
2025-04-09 11:26:37,503 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:37,511 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190762 HTTP/1.1" 200 21
2025-04-09 11:26:37,511 - DEBUG - Received response: {
  "update": -395
}

2025-04-09 11:26:42,518 - DEBUG - Polling for notifications...
2025-04-09 11:26:42,518 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190762 with data: None
2025-04-09 11:26:42,522 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:42,530 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190762 HTTP/1.1" 200 21
2025-04-09 11:26:42,530 - DEBUG - Received response: {
  "update": -395
}

2025-04-09 11:26:43,575 - ERROR - Valori inseriti non consentiti.
2025-04-09 11:26:43,603 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:26:43,607 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:43,615 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:26:43,615 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:26:47,533 - DEBUG - Polling for notifications...
2025-04-09 11:26:47,533 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:26:47,533 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:47,541 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:26:47,549 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:26:52,564 - DEBUG - Polling for notifications...
2025-04-09 11:26:52,564 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:26:52,568 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:52,572 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:26:52,576 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:26:57,582 - DEBUG - Polling for notifications...
2025-04-09 11:26:57,582 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:26:57,586 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:26:57,590 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:26:57,610 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:27:02,618 - DEBUG - Polling for notifications...
2025-04-09 11:27:02,618 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:27:02,618 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:27:02,626 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:27:02,626 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:27:07,640 - DEBUG - Polling for notifications...
2025-04-09 11:27:07,640 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:27:07,644 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:27:07,652 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:27:07,652 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:27:12,657 - DEBUG - Polling for notifications...
2025-04-09 11:27:12,657 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:27:12,657 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:27:12,666 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:27:12,666 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:27:17,675 - DEBUG - Polling for notifications...
2025-04-09 11:27:17,675 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:27:17,675 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:27:17,683 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:27:17,683 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:27:22,693 - DEBUG - Polling for notifications...
2025-04-09 11:27:22,693 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:27:22,697 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:27:22,705 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:27:22,705 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:27:27,713 - DEBUG - Polling for notifications...
2025-04-09 11:27:27,714 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:27:27,717 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:27:27,721 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:27:27,725 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:27:32,730 - DEBUG - Polling for notifications...
2025-04-09 11:27:32,730 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:27:32,734 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:27:32,742 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:27:32,742 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:27:37,754 - DEBUG - Polling for notifications...
2025-04-09 11:27:37,754 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:27:37,758 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:27:37,766 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:27:37,766 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:27:42,770 - DEBUG - Polling for notifications...
2025-04-09 11:27:42,770 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:27:42,774 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:27:42,782 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:27:42,782 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:27:47,800 - DEBUG - Polling for notifications...
2025-04-09 11:27:47,800 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:27:47,804 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:27:47,812 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:27:47,812 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:27:52,825 - DEBUG - Polling for notifications...
2025-04-09 11:27:52,825 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:27:52,829 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:27:52,841 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:27:52,843 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:27:57,845 - DEBUG - Polling for notifications...
2025-04-09 11:27:57,846 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:27:57,850 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:27:57,854 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:27:57,858 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:28:02,870 - DEBUG - Polling for notifications...
2025-04-09 11:28:02,870 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:28:02,875 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:28:02,883 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:28:02,886 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:28:07,898 - DEBUG - Polling for notifications...
2025-04-09 11:28:07,898 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:28:07,902 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:28:07,910 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:28:07,910 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:28:12,919 - DEBUG - Polling for notifications...
2025-04-09 11:28:12,919 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:28:12,923 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:28:12,931 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:28:12,931 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:28:17,937 - DEBUG - Polling for notifications...
2025-04-09 11:28:17,937 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:28:17,941 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:28:17,953 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:28:17,953 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:28:22,966 - DEBUG - Polling for notifications...
2025-04-09 11:28:22,966 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:28:22,970 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:28:22,974 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:28:22,974 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:28:27,990 - DEBUG - Polling for notifications...
2025-04-09 11:28:27,990 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:28:27,990 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:28:27,998 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:28:27,998 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:28:33,011 - DEBUG - Polling for notifications...
2025-04-09 11:28:33,012 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:28:33,015 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:28:33,023 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:28:33,026 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:28:38,043 - DEBUG - Polling for notifications...
2025-04-09 11:28:38,043 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:28:38,043 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:28:38,051 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:28:38,051 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:28:43,061 - DEBUG - Polling for notifications...
2025-04-09 11:28:43,061 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:28:43,065 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:28:43,073 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:28:43,077 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:28:48,088 - DEBUG - Polling for notifications...
2025-04-09 11:28:48,088 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:28:48,092 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:28:48,100 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:28:48,100 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:28:53,115 - DEBUG - Polling for notifications...
2025-04-09 11:28:53,115 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:28:53,119 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:28:53,127 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:28:53,127 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:28:58,130 - DEBUG - Polling for notifications...
2025-04-09 11:28:58,130 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:28:58,130 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:28:58,138 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:28:58,138 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:29:03,150 - DEBUG - Polling for notifications...
2025-04-09 11:29:03,150 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:29:03,154 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:29:03,162 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:29:03,162 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:29:08,171 - DEBUG - Polling for notifications...
2025-04-09 11:29:08,171 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:29:08,175 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:29:08,183 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:29:08,187 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:29:13,194 - DEBUG - Polling for notifications...
2025-04-09 11:29:13,194 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:29:13,197 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:29:13,205 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:29:13,205 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:29:18,209 - DEBUG - Polling for notifications...
2025-04-09 11:29:18,209 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:29:18,213 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:29:18,217 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:29:18,221 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:29:23,234 - DEBUG - Polling for notifications...
2025-04-09 11:29:23,234 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:29:23,238 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:29:23,246 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:29:23,246 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:29:28,254 - DEBUG - Polling for notifications...
2025-04-09 11:29:28,254 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:29:28,258 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:29:28,265 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:29:28,265 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:29:33,269 - DEBUG - Polling for notifications...
2025-04-09 11:29:33,269 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:29:33,269 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:29:33,280 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:29:33,280 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:29:38,291 - DEBUG - Polling for notifications...
2025-04-09 11:29:38,291 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:29:38,291 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:29:38,299 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:29:38,299 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:29:43,310 - DEBUG - Polling for notifications...
2025-04-09 11:29:43,310 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:29:43,310 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:29:43,318 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:29:43,322 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:29:48,325 - DEBUG - Polling for notifications...
2025-04-09 11:29:48,325 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:29:48,325 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:29:48,334 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:29:48,334 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:29:53,347 - DEBUG - Polling for notifications...
2025-04-09 11:29:53,347 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:29:53,347 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:29:53,355 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:29:53,355 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:29:58,368 - DEBUG - Polling for notifications...
2025-04-09 11:29:58,368 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:29:58,372 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:29:58,376 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:29:58,376 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:30:03,383 - DEBUG - Polling for notifications...
2025-04-09 11:30:03,383 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:30:03,387 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:30:03,391 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:30:03,395 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:30:08,401 - DEBUG - Polling for notifications...
2025-04-09 11:30:08,401 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:30:08,401 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:30:08,409 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:30:08,409 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:30:13,417 - DEBUG - Polling for notifications...
2025-04-09 11:30:13,417 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:30:13,417 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:30:13,426 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:30:13,426 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:30:18,442 - DEBUG - Polling for notifications...
2025-04-09 11:30:18,442 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:30:18,446 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:30:18,454 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:30:18,454 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:30:23,461 - DEBUG - Polling for notifications...
2025-04-09 11:30:23,461 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:30:23,465 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:30:23,473 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:30:23,473 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:30:28,485 - DEBUG - Polling for notifications...
2025-04-09 11:30:28,486 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:30:28,486 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:30:28,493 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:30:28,493 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:30:33,501 - DEBUG - Polling for notifications...
2025-04-09 11:30:33,501 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:30:33,501 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:30:33,509 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:30:33,509 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:30:38,518 - DEBUG - Polling for notifications...
2025-04-09 11:30:38,518 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:30:38,522 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:30:38,543 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:30:38,543 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:30:43,553 - DEBUG - Polling for notifications...
2025-04-09 11:30:43,553 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:30:43,553 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:30:43,561 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:30:43,561 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:30:48,572 - DEBUG - Polling for notifications...
2025-04-09 11:30:48,572 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:30:48,576 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:30:48,584 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:30:48,584 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:30:53,598 - DEBUG - Polling for notifications...
2025-04-09 11:30:53,598 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:30:53,602 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:30:53,610 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:30:53,610 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:30:58,626 - DEBUG - Polling for notifications...
2025-04-09 11:30:58,626 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:30:58,630 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:30:58,638 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:30:58,641 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:31:03,643 - DEBUG - Polling for notifications...
2025-04-09 11:31:03,643 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:31:03,643 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:31:03,651 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:31:03,651 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:31:08,664 - DEBUG - Polling for notifications...
2025-04-09 11:31:08,664 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:31:08,664 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:31:08,676 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:31:08,676 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:31:13,690 - DEBUG - Polling for notifications...
2025-04-09 11:31:13,690 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:31:13,694 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:31:13,702 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:31:13,702 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:31:18,807 - DEBUG - Polling for notifications...
2025-04-09 11:31:18,831 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:31:18,835 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:31:18,991 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:31:18,995 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:31:24,238 - DEBUG - Polling for notifications...
2025-04-09 11:31:24,311 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:31:24,315 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:31:24,327 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:31:24,327 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:31:29,330 - DEBUG - Polling for notifications...
2025-04-09 11:31:29,330 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:31:29,334 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:31:29,342 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:31:29,346 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:31:34,351 - DEBUG - Polling for notifications...
2025-04-09 11:31:34,351 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:31:34,355 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:31:34,363 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:31:34,363 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:31:39,372 - DEBUG - Polling for notifications...
2025-04-09 11:31:39,373 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:31:39,375 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:31:39,381 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:31:39,382 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:31:44,396 - DEBUG - Polling for notifications...
2025-04-09 11:31:44,397 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:31:44,399 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:31:44,405 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:31:44,406 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:31:49,420 - DEBUG - Polling for notifications...
2025-04-09 11:31:49,422 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:31:49,425 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:31:49,432 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:31:49,433 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:31:54,441 - DEBUG - Polling for notifications...
2025-04-09 11:31:54,442 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:31:54,444 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:31:54,452 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:31:54,472 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:31:59,489 - DEBUG - Polling for notifications...
2025-04-09 11:31:59,490 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:31:59,493 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:31:59,501 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:31:59,502 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:32:04,508 - DEBUG - Polling for notifications...
2025-04-09 11:32:04,508 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:32:04,511 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:32:04,519 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:32:04,519 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:32:09,534 - DEBUG - Polling for notifications...
2025-04-09 11:32:09,534 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:32:09,534 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:32:09,542 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:32:09,546 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:32:14,551 - DEBUG - Polling for notifications...
2025-04-09 11:32:14,551 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:32:14,555 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:32:14,559 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:32:14,559 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:32:19,571 - DEBUG - Polling for notifications...
2025-04-09 11:32:19,572 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:32:19,572 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:32:19,579 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:32:19,579 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:32:24,583 - DEBUG - Polling for notifications...
2025-04-09 11:32:24,583 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:32:24,583 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:32:24,591 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:32:24,591 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:32:29,598 - DEBUG - Polling for notifications...
2025-04-09 11:32:29,598 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:32:29,598 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:32:29,606 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:32:29,606 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:32:34,621 - DEBUG - Polling for notifications...
2025-04-09 11:32:34,621 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:32:34,625 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:32:34,633 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:32:34,637 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:32:39,643 - DEBUG - Polling for notifications...
2025-04-09 11:32:39,647 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:32:39,651 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:32:39,655 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:32:39,659 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:32:44,667 - DEBUG - Polling for notifications...
2025-04-09 11:32:44,667 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:32:44,667 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:32:44,675 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:32:44,675 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:32:49,691 - DEBUG - Polling for notifications...
2025-04-09 11:32:49,691 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:32:49,691 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:32:49,699 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:32:49,699 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:32:54,703 - DEBUG - Polling for notifications...
2025-04-09 11:32:54,703 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:32:54,707 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:32:54,715 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:32:54,715 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:32:59,730 - DEBUG - Polling for notifications...
2025-04-09 11:32:59,730 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:32:59,734 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:32:59,742 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:32:59,742 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:33:04,750 - DEBUG - Polling for notifications...
2025-04-09 11:33:04,750 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:33:04,754 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:33:04,762 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:33:04,762 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:33:09,768 - DEBUG - Polling for notifications...
2025-04-09 11:33:09,768 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:33:09,768 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:33:09,776 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:33:09,793 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:33:14,806 - DEBUG - Polling for notifications...
2025-04-09 11:33:14,806 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:33:14,806 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:33:14,814 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:33:14,814 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:33:19,823 - DEBUG - Polling for notifications...
2025-04-09 11:33:19,823 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:33:19,827 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:33:19,835 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:33:19,848 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:33:24,856 - DEBUG - Polling for notifications...
2025-04-09 11:33:24,856 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:33:24,856 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:33:24,864 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:33:24,864 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:33:29,877 - DEBUG - Polling for notifications...
2025-04-09 11:33:29,877 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:33:29,882 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:33:29,889 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:33:29,889 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:33:34,907 - DEBUG - Polling for notifications...
2025-04-09 11:33:34,907 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:33:34,910 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:33:34,918 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:33:34,918 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:33:39,926 - DEBUG - Polling for notifications...
2025-04-09 11:33:39,926 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:33:39,930 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:33:39,942 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:33:39,942 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:33:44,950 - DEBUG - Polling for notifications...
2025-04-09 11:33:44,950 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:33:44,954 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:33:44,962 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:33:44,962 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:33:49,977 - DEBUG - Polling for notifications...
2025-04-09 11:33:49,977 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:33:49,981 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:33:49,985 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:33:49,985 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:33:54,991 - DEBUG - Polling for notifications...
2025-04-09 11:33:54,991 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:33:54,995 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:33:55,003 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:33:55,003 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:34:00,017 - DEBUG - Polling for notifications...
2025-04-09 11:34:00,021 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:34:00,021 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:34:00,029 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:34:00,029 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:34:05,035 - DEBUG - Polling for notifications...
2025-04-09 11:34:05,035 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:34:05,039 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:34:05,047 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:34:05,047 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:34:10,061 - DEBUG - Polling for notifications...
2025-04-09 11:34:10,061 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:34:10,061 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:34:10,069 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:34:10,069 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:34:15,075 - DEBUG - Polling for notifications...
2025-04-09 11:34:15,075 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:34:15,080 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:34:15,088 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:34:15,088 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:34:20,104 - DEBUG - Polling for notifications...
2025-04-09 11:34:20,104 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:34:20,104 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:34:20,112 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:34:20,112 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:34:25,122 - DEBUG - Polling for notifications...
2025-04-09 11:34:25,122 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:34:25,122 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:34:25,130 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:34:25,130 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:34:30,142 - DEBUG - Polling for notifications...
2025-04-09 11:34:30,142 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:34:30,146 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:34:30,154 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:34:30,154 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:34:35,167 - DEBUG - Polling for notifications...
2025-04-09 11:34:35,167 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:34:35,167 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:34:35,175 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:34:35,175 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:34:40,186 - DEBUG - Polling for notifications...
2025-04-09 11:34:40,186 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:34:40,190 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:34:40,198 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:34:40,199 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:34:45,212 - DEBUG - Polling for notifications...
2025-04-09 11:34:45,212 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:34:45,216 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:34:45,224 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:34:45,224 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:34:50,234 - DEBUG - Polling for notifications...
2025-04-09 11:34:50,234 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:34:50,237 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:34:50,245 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:34:50,245 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:34:55,256 - DEBUG - Polling for notifications...
2025-04-09 11:34:55,256 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:34:55,260 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:34:55,270 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:34:55,270 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:35:00,279 - DEBUG - Polling for notifications...
2025-04-09 11:35:00,279 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:35:00,282 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:00,290 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:35:00,290 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:35:05,301 - DEBUG - Polling for notifications...
2025-04-09 11:35:05,301 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:35:05,301 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:05,309 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:35:05,309 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:35:07,319 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:35:07,319 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:07,327 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-09 11:35:07,327 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-09 11:35:10,319 - DEBUG - Polling for notifications...
2025-04-09 11:35:10,319 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744190804 with data: None
2025-04-09 11:35:10,323 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:10,331 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744190804 HTTP/1.1" 200 21
2025-04-09 11:35:10,335 - DEBUG - Received response: {
  "update": -437
}

2025-04-09 11:35:15,191 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'aaa', 'description': 'asd'}
2025-04-09 11:35:15,195 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:15,251 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 13814
2025-04-09 11:35:15,251 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Ky1HZVnKgJLFRrGQPSqB";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2176515688928">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2176516089088">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2176516089200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2176516089312">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2176516089424">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2176516089536">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2176516089648">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">194</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre>
<pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>data = sanitize_dict(data)</pre>
<pre class="line current"><span class="ws">    </span>if data.description == None and data.name == None:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nessun parametro passato&#34;</pre>
<pre class="line after"><span class="ws">    </span>if data.name:</pre>
<pre class="line after"><span class="ws">        </span>plugin.name = data.name</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nome aggiornato&#34;</pre>
<pre class="line after"><span class="ws">    </span>else:</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 194, in modifyPlugin
    if data.description == None and data.name == None:
AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 194, in modifyPlugin
    if data.description == None and data.name == None:
AttributeError: 'dict' object has no attribute 'description'


-->

2025-04-09 11:35:15,251 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "Ky1HZVnKgJLFRrGQPSqB";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2176515688928">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2176516089088">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2176516089200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2176516089312">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2176516089424">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2176516089536">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2176516089648">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">194</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre>
<pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>data = sanitize_dict(data)</pre>
<pre class="line current"><span class="ws">    </span>if data.description == None and data.name == None:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nessun parametro passato&#34;</pre>
<pre class="line after"><span class="ws">    </span>if data.name:</pre>
<pre class="line after"><span class="ws">        </span>plugin.name = data.name</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nome aggiornato&#34;</pre>
<pre class="line after"><span class="ws">    </span>else:</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 194, in modifyPlugin
    if data.description == None and data.name == None:
AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 194, in modifyPlugin
    if data.description == None and data.name == None:
AttributeError: 'dict' object has no attribute 'description'


-->

2025-04-09 11:35:15,284 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:35:15,288 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:15,292 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:35:15,296 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:35:15,336 - DEBUG - Polling for notifications...
2025-04-09 11:35:15,336 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:35:15,336 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:15,344 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:35:15,344 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:35:20,349 - DEBUG - Polling for notifications...
2025-04-09 11:35:20,349 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:35:20,353 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:20,361 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:35:20,361 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:35:25,374 - DEBUG - Polling for notifications...
2025-04-09 11:35:25,374 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:35:25,378 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:25,386 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:35:25,386 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:35:30,400 - DEBUG - Polling for notifications...
2025-04-09 11:35:30,400 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:35:30,404 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:30,412 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:35:30,412 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:35:35,418 - DEBUG - Polling for notifications...
2025-04-09 11:35:35,418 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:35:35,418 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:35,427 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:35:35,427 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:35:40,439 - DEBUG - Polling for notifications...
2025-04-09 11:35:40,439 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:35:40,443 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:40,451 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:35:40,451 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:35:45,456 - DEBUG - Polling for notifications...
2025-04-09 11:35:45,456 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:35:45,460 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:45,468 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:35:45,468 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:35:50,475 - DEBUG - Polling for notifications...
2025-04-09 11:35:50,475 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:35:50,479 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:50,487 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:35:50,487 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:35:55,497 - DEBUG - Polling for notifications...
2025-04-09 11:35:55,497 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:35:55,501 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:35:55,510 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:35:55,510 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:36:00,518 - DEBUG - Polling for notifications...
2025-04-09 11:36:00,518 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:36:00,522 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:36:00,528 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:36:00,530 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:36:05,545 - DEBUG - Polling for notifications...
2025-04-09 11:36:05,545 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:36:05,549 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:36:05,557 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:36:05,557 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:36:10,570 - DEBUG - Polling for notifications...
2025-04-09 11:36:10,570 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:36:10,570 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:36:10,578 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:36:10,578 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:36:15,584 - DEBUG - Polling for notifications...
2025-04-09 11:36:15,584 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:36:15,588 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:36:15,597 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:36:15,597 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:36:20,608 - DEBUG - Polling for notifications...
2025-04-09 11:36:20,608 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:36:20,612 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:36:20,620 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:36:20,620 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:36:25,631 - DEBUG - Polling for notifications...
2025-04-09 11:36:25,631 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:36:25,635 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:36:25,647 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:36:25,647 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:36:30,658 - DEBUG - Polling for notifications...
2025-04-09 11:36:30,658 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:36:30,662 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:36:30,666 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:36:30,666 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:36:35,671 - DEBUG - Polling for notifications...
2025-04-09 11:36:35,671 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:36:35,675 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:36:35,683 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:36:35,683 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:36:40,686 - DEBUG - Polling for notifications...
2025-04-09 11:36:40,686 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:36:40,690 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:36:40,698 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:36:40,698 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:36:45,703 - DEBUG - Polling for notifications...
2025-04-09 11:36:45,703 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:36:45,707 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:36:45,715 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:36:45,715 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:36:50,725 - DEBUG - Polling for notifications...
2025-04-09 11:36:50,725 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:36:50,729 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:36:50,739 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:36:50,739 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:36:55,747 - DEBUG - Polling for notifications...
2025-04-09 11:36:55,747 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:36:55,751 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:36:55,758 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:36:55,758 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:37:00,766 - DEBUG - Polling for notifications...
2025-04-09 11:37:00,766 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:37:00,766 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:37:00,773 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:37:00,773 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:37:05,780 - DEBUG - Polling for notifications...
2025-04-09 11:37:05,781 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:37:05,784 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:37:05,788 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:37:05,792 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:37:10,798 - DEBUG - Polling for notifications...
2025-04-09 11:37:10,798 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:37:10,802 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:37:10,810 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:37:10,810 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:37:15,814 - DEBUG - Polling for notifications...
2025-04-09 11:37:15,814 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:37:15,818 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:37:15,826 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:37:15,830 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:37:20,844 - DEBUG - Polling for notifications...
2025-04-09 11:37:20,844 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:37:20,848 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:37:20,856 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:37:20,856 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:37:25,866 - DEBUG - Polling for notifications...
2025-04-09 11:37:25,866 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:37:25,870 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:37:25,878 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:37:25,878 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:37:30,884 - DEBUG - Polling for notifications...
2025-04-09 11:37:30,884 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:37:30,888 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:37:30,896 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:37:30,896 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:37:35,906 - DEBUG - Polling for notifications...
2025-04-09 11:37:35,906 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:37:35,910 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:37:35,918 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:37:35,918 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:37:40,926 - DEBUG - Polling for notifications...
2025-04-09 11:37:40,926 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:37:40,930 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:37:40,941 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:37:40,941 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:37:45,951 - DEBUG - Polling for notifications...
2025-04-09 11:37:45,951 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:37:45,955 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:37:45,963 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191315 HTTP/1.1" 200 21
2025-04-09 11:37:45,963 - DEBUG - Received response: {
  "update": -948
}

2025-04-09 11:37:50,968 - DEBUG - Polling for notifications...
2025-04-09 11:37:50,968 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191315 with data: None
2025-04-09 11:37:50,972 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:37:52,994 - ERROR - Error during request: HTTPSConnectionPool(host='127.0.0.1', port=5000): Max retries exceeded with url: /notification/1744191315 (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x000001F0E4F4C2B0>: Failed to establish a new connection: [WinError 10061] Impossibile stabilire la connessione. Rifiuto persistente del computer di destinazione'))
2025-04-09 11:42:19,615 - INFO - Application started.
2025-04-09 11:42:19,615 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 11:42:19,615 - INFO - Attempting to log in user: test
2025-04-09 11:42:19,680 - DEBUG - Loading KWallet
2025-04-09 11:42:19,680 - DEBUG - Loading SecretService
2025-04-09 11:42:19,728 - DEBUG - Loading Windows
2025-04-09 11:42:19,748 - DEBUG - Loaded cffi backend
2025-04-09 11:42:19,836 - DEBUG - Loading chainer
2025-04-09 11:42:19,840 - DEBUG - Loading libsecret
2025-04-09 11:42:19,842 - DEBUG - Loading macOS
2025-04-09 11:42:19,856 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 11:42:19,860 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:19,877 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 11:42:19,877 - DEBUG - Received response
2025-04-09 11:42:19,898 - INFO - User test logged in successfully.
2025-04-09 11:42:19,898 - INFO - Starting polling for notifications.
2025-04-09 11:42:19,898 - DEBUG - Polling for notifications...
2025-04-09 11:42:19,901 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191740 with data: None
2025-04-09 11:42:19,905 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:19,913 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191740 HTTP/1.1" 200 20
2025-04-09 11:42:19,917 - DEBUG - Received response: {
  "update": -13
}

2025-04-09 11:42:19,969 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:42:19,973 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:19,982 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:42:19,982 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:42:24,139 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:42:24,143 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:24,161 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-09 11:42:24,161 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-09 11:42:24,930 - DEBUG - Polling for notifications...
2025-04-09 11:42:24,930 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191740 with data: None
2025-04-09 11:42:24,934 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:24,942 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191740 HTTP/1.1" 200 20
2025-04-09 11:42:24,942 - DEBUG - Received response: {
  "update": -13
}

2025-04-09 11:42:29,956 - DEBUG - Polling for notifications...
2025-04-09 11:42:29,956 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191740 with data: None
2025-04-09 11:42:29,960 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:29,972 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191740 HTTP/1.1" 200 20
2025-04-09 11:42:29,972 - DEBUG - Received response: {
  "update": -13
}

2025-04-09 11:42:32,899 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'asd', 'description': 'aaa'}
2025-04-09 11:42:32,903 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:32,935 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 13829
2025-04-09 11:42:32,935 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "7Gc0ji0hW4ZkbZyULqID";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2137651197904">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2137654517360">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2137654517472">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2137654517584">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2137654517696">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2137654517808">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2137654517920">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">193</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre>
<pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line current"><span class="ws">    </span>if data.description == None and data.name == None:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nessun parametro passato&#34;</pre>
<pre class="line after"><span class="ws">    </span>if data.name:</pre>
<pre class="line after"><span class="ws">        </span>plugin.name = data.name</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nome aggiornato&#34;</pre>
<pre class="line after"><span class="ws">    </span>else:</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 193, in modifyPlugin
    if data.description == None and data.name == None:
AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 193, in modifyPlugin
    if data.description == None and data.name == None:
AttributeError: 'dict' object has no attribute 'description'


-->

2025-04-09 11:42:32,935 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "7Gc0ji0hW4ZkbZyULqID";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2137651197904">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2137654517360">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2137654517472">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2137654517584">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2137654517696">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2137654517808">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2137654517920">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">193</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span># Funzione per modificare i dati di un plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre>
<pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line current"><span class="ws">    </span>if data.description == None and data.name == None:</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nessun parametro passato&#34;</pre>
<pre class="line after"><span class="ws">    </span>if data.name:</pre>
<pre class="line after"><span class="ws">        </span>plugin.name = data.name</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nome aggiornato&#34;</pre>
<pre class="line after"><span class="ws">    </span>else:</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 193, in modifyPlugin
    if data.description == None and data.name == None:
AttributeError: &#39;dict&#39; object has no attribute &#39;description&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 193, in modifyPlugin
    if data.description == None and data.name == None:
AttributeError: 'dict' object has no attribute 'description'


-->

2025-04-09 11:42:32,967 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:42:32,971 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:32,979 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:42:32,979 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:42:34,986 - DEBUG - Polling for notifications...
2025-04-09 11:42:34,986 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191753 with data: None
2025-04-09 11:42:34,990 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:34,994 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191753 HTTP/1.1" 200 20
2025-04-09 11:42:34,994 - DEBUG - Received response: {
  "update": -26
}

2025-04-09 11:42:40,005 - DEBUG - Polling for notifications...
2025-04-09 11:42:40,006 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191753 with data: None
2025-04-09 11:42:40,009 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:40,013 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191753 HTTP/1.1" 200 20
2025-04-09 11:42:40,013 - DEBUG - Received response: {
  "update": -26
}

2025-04-09 11:42:45,024 - DEBUG - Polling for notifications...
2025-04-09 11:42:45,024 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191753 with data: None
2025-04-09 11:42:45,028 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:45,036 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191753 HTTP/1.1" 200 20
2025-04-09 11:42:45,040 - DEBUG - Received response: {
  "update": -26
}

2025-04-09 11:42:50,055 - DEBUG - Polling for notifications...
2025-04-09 11:42:50,055 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191753 with data: None
2025-04-09 11:42:50,055 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:50,063 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191753 HTTP/1.1" 200 20
2025-04-09 11:42:50,063 - DEBUG - Received response: {
  "update": -26
}

2025-04-09 11:42:55,068 - DEBUG - Polling for notifications...
2025-04-09 11:42:55,068 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191753 with data: None
2025-04-09 11:42:55,072 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:42:55,080 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191753 HTTP/1.1" 200 20
2025-04-09 11:42:55,080 - DEBUG - Received response: {
  "update": -26
}

2025-04-09 11:43:00,092 - DEBUG - Polling for notifications...
2025-04-09 11:43:00,092 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191753 with data: None
2025-04-09 11:43:00,092 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:43:00,096 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191753 HTTP/1.1" 200 20
2025-04-09 11:43:00,100 - DEBUG - Received response: {
  "update": -26
}

2025-04-09 11:43:05,102 - DEBUG - Polling for notifications...
2025-04-09 11:43:05,102 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191753 with data: None
2025-04-09 11:43:05,102 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:43:05,110 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191753 HTTP/1.1" 200 20
2025-04-09 11:43:05,110 - DEBUG - Received response: {
  "update": -26
}

2025-04-09 11:43:10,115 - DEBUG - Polling for notifications...
2025-04-09 11:43:10,115 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191753 with data: None
2025-04-09 11:43:10,115 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:43:10,123 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191753 HTTP/1.1" 200 20
2025-04-09 11:43:10,123 - DEBUG - Received response: {
  "update": -26
}

2025-04-09 11:43:15,132 - DEBUG - Polling for notifications...
2025-04-09 11:43:15,132 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191753 with data: None
2025-04-09 11:43:15,132 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:43:15,140 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191753 HTTP/1.1" 200 20
2025-04-09 11:43:15,140 - DEBUG - Received response: {
  "update": -26
}

2025-04-09 11:43:20,153 - DEBUG - Polling for notifications...
2025-04-09 11:43:20,153 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191753 with data: None
2025-04-09 11:43:20,157 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:43:20,165 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191753 HTTP/1.1" 200 20
2025-04-09 11:43:20,165 - DEBUG - Received response: {
  "update": -26
}

2025-04-09 11:43:25,177 - DEBUG - Polling for notifications...
2025-04-09 11:43:25,177 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191753 with data: None
2025-04-09 11:43:25,177 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:43:25,185 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191753 HTTP/1.1" 200 20
2025-04-09 11:43:25,185 - DEBUG - Received response: {
  "update": -26
}

2025-04-09 11:43:30,199 - DEBUG - Polling for notifications...
2025-04-09 11:43:30,199 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191753 with data: None
2025-04-09 11:43:30,203 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:43:30,207 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191753 HTTP/1.1" 200 20
2025-04-09 11:43:30,211 - DEBUG - Received response: {
  "update": -26
}

2025-04-09 11:44:28,921 - INFO - Application started.
2025-04-09 11:44:28,921 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 11:44:28,921 - INFO - Attempting to log in user: test
2025-04-09 11:44:28,969 - DEBUG - Loading KWallet
2025-04-09 11:44:28,973 - DEBUG - Loading SecretService
2025-04-09 11:44:29,009 - DEBUG - Loading Windows
2025-04-09 11:44:29,029 - DEBUG - Loaded cffi backend
2025-04-09 11:44:29,118 - DEBUG - Loading chainer
2025-04-09 11:44:29,118 - DEBUG - Loading libsecret
2025-04-09 11:44:29,122 - DEBUG - Loading macOS
2025-04-09 11:44:29,130 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 11:44:29,138 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:44:29,146 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 11:44:29,146 - DEBUG - Received response
2025-04-09 11:44:29,166 - INFO - User test logged in successfully.
2025-04-09 11:44:29,170 - INFO - Starting polling for notifications.
2025-04-09 11:44:29,170 - DEBUG - Polling for notifications...
2025-04-09 11:44:29,174 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191869 with data: None
2025-04-09 11:44:29,178 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:44:29,186 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191869 HTTP/1.1" 200 20
2025-04-09 11:44:29,190 - DEBUG - Received response: {
  "update": -17
}

2025-04-09 11:44:29,230 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:44:29,230 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:44:29,242 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:44:29,242 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:44:30,341 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:44:30,341 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:44:30,353 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-09 11:44:30,353 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-09 11:44:34,201 - DEBUG - Polling for notifications...
2025-04-09 11:44:34,201 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191869 with data: None
2025-04-09 11:44:34,205 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:44:34,213 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191869 HTTP/1.1" 200 20
2025-04-09 11:44:34,213 - DEBUG - Received response: {
  "update": -17
}

2025-04-09 11:44:35,358 - ERROR - Valori inseriti non consentiti.
2025-04-09 11:44:35,392 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:44:35,394 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:44:35,402 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:44:35,402 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:45:58,805 - INFO - Application started.
2025-04-09 11:45:58,809 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 11:45:58,809 - INFO - Attempting to log in user: test
2025-04-09 11:45:58,861 - DEBUG - Loading KWallet
2025-04-09 11:45:58,865 - DEBUG - Loading SecretService
2025-04-09 11:45:58,914 - DEBUG - Loading Windows
2025-04-09 11:45:58,930 - DEBUG - Loaded cffi backend
2025-04-09 11:45:59,015 - DEBUG - Loading chainer
2025-04-09 11:45:59,015 - DEBUG - Loading libsecret
2025-04-09 11:45:59,019 - DEBUG - Loading macOS
2025-04-09 11:45:59,035 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 11:45:59,039 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:45:59,051 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 11:45:59,051 - DEBUG - Received response
2025-04-09 11:45:59,071 - INFO - User test logged in successfully.
2025-04-09 11:45:59,071 - INFO - Starting polling for notifications.
2025-04-09 11:45:59,075 - DEBUG - Polling for notifications...
2025-04-09 11:45:59,079 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191959 with data: None
2025-04-09 11:45:59,079 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:45:59,089 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191959 HTTP/1.1" 200 21
2025-04-09 11:45:59,092 - DEBUG - Received response: {
  "update": -107
}

2025-04-09 11:45:59,133 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:45:59,133 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:45:59,141 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:45:59,141 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:46:00,420 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:46:00,422 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:46:00,428 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-09 11:46:00,428 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-09 11:46:04,106 - DEBUG - Polling for notifications...
2025-04-09 11:46:04,106 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191959 with data: None
2025-04-09 11:46:04,106 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:46:04,114 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191959 HTTP/1.1" 200 21
2025-04-09 11:46:04,118 - DEBUG - Received response: {
  "update": -107
}

2025-04-09 11:46:07,102 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'aaa', 'description': 'a'}
2025-04-09 11:46:07,106 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:46:07,137 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 13731
2025-04-09 11:46:07,141 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;dict&#39; object has no attribute &#39;name&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "37Vfnj4L1JLrd0AjzI5R";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;dict&#39; object has no attribute &#39;name&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1623772922032">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1623773110544">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1623773110656">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1623773110768">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1623773110880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1623773110992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1623773111104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">194</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre>
<pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>data = sanitize_dict(data)</pre>
<pre class="line current"><span class="ws">    </span>if data.name:</pre>
<pre class="line after"><span class="ws">        </span>plugin.name = data.name</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nome aggiornato&#34;</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per ottenere la lista dei messaggi di log</pre>
<pre class="line after"><span class="ws"></span>@app.route(&#34;/log_list&#34;, endpoint=&#39;log_list&#39;, methods=[&#34;GET&#34;])</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;dict&#39; object has no attribute &#39;name&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 194, in modifyPlugin
    if data.name:
AttributeError: &#39;dict&#39; object has no attribute &#39;name&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 194, in modifyPlugin
    if data.name:
AttributeError: 'dict' object has no attribute 'name'


-->

2025-04-09 11:46:07,141 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;dict&#39; object has no attribute &#39;name&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "37Vfnj4L1JLrd0AjzI5R";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;dict&#39; object has no attribute &#39;name&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1623772922032">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1623773110544">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1623773110656">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1623773110768">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1623773110880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1623773110992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1623773111104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">194</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>@app.route(&#34;/edit_plugin/&lt;int:id&gt;&#34;, endpoint=&#39;edit_plugin&#39;, methods=[&#34;PATCH&#34;])</pre>
<pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>data = sanitize_dict(data)</pre>
<pre class="line current"><span class="ws">    </span>if data.name:</pre>
<pre class="line after"><span class="ws">        </span>plugin.name = data.name</pre>
<pre class="line after"><span class="ws">        </span>return &#34;nome aggiornato&#34;</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Funzione per ottenere la lista dei messaggi di log</pre>
<pre class="line after"><span class="ws"></span>@app.route(&#34;/log_list&#34;, endpoint=&#39;log_list&#39;, methods=[&#34;GET&#34;])</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;dict&#39; object has no attribute &#39;name&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 194, in modifyPlugin
    if data.name:
AttributeError: &#39;dict&#39; object has no attribute &#39;name&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 194, in modifyPlugin
    if data.name:
AttributeError: 'dict' object has no attribute 'name'


-->

2025-04-09 11:46:07,177 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:46:07,181 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:46:07,189 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:46:07,189 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:46:09,131 - DEBUG - Polling for notifications...
2025-04-09 11:46:09,131 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744191967 with data: None
2025-04-09 11:46:09,135 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:46:09,143 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744191967 HTTP/1.1" 200 21
2025-04-09 11:46:09,147 - DEBUG - Received response: {
  "update": -115
}

2025-04-09 11:47:22,996 - INFO - Application started.
2025-04-09 11:47:22,996 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 11:47:22,996 - INFO - Attempting to log in user: test
2025-04-09 11:47:23,040 - DEBUG - Loading KWallet
2025-04-09 11:47:23,044 - DEBUG - Loading SecretService
2025-04-09 11:47:23,076 - DEBUG - Loading Windows
2025-04-09 11:47:23,088 - DEBUG - Loaded cffi backend
2025-04-09 11:47:23,164 - DEBUG - Loading chainer
2025-04-09 11:47:23,164 - DEBUG - Loading libsecret
2025-04-09 11:47:23,168 - DEBUG - Loading macOS
2025-04-09 11:47:23,176 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 11:47:23,180 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:47:23,188 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 11:47:23,192 - DEBUG - Received response
2025-04-09 11:47:23,212 - INFO - User test logged in successfully.
2025-04-09 11:47:23,212 - INFO - Starting polling for notifications.
2025-04-09 11:47:23,212 - DEBUG - Polling for notifications...
2025-04-09 11:47:23,220 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192043 with data: None
2025-04-09 11:47:23,220 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:47:23,228 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192043 HTTP/1.1" 200 20
2025-04-09 11:47:23,232 - DEBUG - Received response: {
  "update": -21
}

2025-04-09 11:47:23,272 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:47:23,276 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:47:23,288 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:47:23,288 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:47:25,210 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:47:25,214 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:47:25,227 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-09 11:47:25,227 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-09 11:47:28,242 - DEBUG - Polling for notifications...
2025-04-09 11:47:28,242 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192043 with data: None
2025-04-09 11:47:28,246 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:47:28,258 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192043 HTTP/1.1" 200 20
2025-04-09 11:47:28,258 - DEBUG - Received response: {
  "update": -21
}

2025-04-09 11:47:33,066 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'asd', 'description': 'a'}
2025-04-09 11:47:33,066 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:47:33,074 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 15
2025-04-09 11:47:33,074 - DEBUG - Received response: nome aggiornato
2025-04-09 11:47:33,074 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-09 11:47:33,106 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:47:33,110 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:47:33,118 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:47:33,118 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:47:33,269 - DEBUG - Polling for notifications...
2025-04-09 11:47:33,269 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192053 with data: None
2025-04-09 11:47:33,273 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:47:33,281 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192053 HTTP/1.1" 200 20
2025-04-09 11:47:33,281 - DEBUG - Received response: {
  "update": -31
}

2025-04-09 11:48:12,720 - INFO - Application started.
2025-04-09 11:48:12,720 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 11:48:12,720 - INFO - Attempting to log in user: test
2025-04-09 11:48:12,764 - DEBUG - Loading KWallet
2025-04-09 11:48:12,768 - DEBUG - Loading SecretService
2025-04-09 11:48:12,800 - DEBUG - Loading Windows
2025-04-09 11:48:12,812 - DEBUG - Loaded cffi backend
2025-04-09 11:48:12,888 - DEBUG - Loading chainer
2025-04-09 11:48:12,892 - DEBUG - Loading libsecret
2025-04-09 11:48:12,893 - DEBUG - Loading macOS
2025-04-09 11:48:12,904 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 11:48:12,908 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:48:12,912 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 401 35
2025-04-09 11:48:12,916 - DEBUG - Received response
2025-04-09 11:48:12,916 - ERROR - Error 401: {
  "msg": "Error, login failed"
}

2025-04-09 11:48:43,041 - INFO - Application started.
2025-04-09 11:48:43,041 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 11:48:43,041 - INFO - Attempting to log in user: test
2025-04-09 11:48:43,089 - DEBUG - Loading KWallet
2025-04-09 11:48:43,090 - DEBUG - Loading SecretService
2025-04-09 11:48:43,125 - DEBUG - Loading Windows
2025-04-09 11:48:43,137 - DEBUG - Loaded cffi backend
2025-04-09 11:48:43,214 - DEBUG - Loading chainer
2025-04-09 11:48:43,214 - DEBUG - Loading libsecret
2025-04-09 11:48:43,214 - DEBUG - Loading macOS
2025-04-09 11:48:43,226 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 11:48:43,230 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:48:43,243 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 11:48:43,250 - DEBUG - Received response
2025-04-09 11:48:43,267 - INFO - User test logged in successfully.
2025-04-09 11:48:43,267 - INFO - Starting polling for notifications.
2025-04-09 11:48:43,267 - DEBUG - Polling for notifications...
2025-04-09 11:48:43,271 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192123 with data: None
2025-04-09 11:48:43,271 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:48:43,279 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192123 HTTP/1.1" 200 20
2025-04-09 11:48:43,283 - DEBUG - Received response: {
  "update": -12
}

2025-04-09 11:48:43,323 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:48:43,323 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:48:43,335 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:48:43,335 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:51:32,511 - INFO - Application started.
2025-04-09 11:51:32,511 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 11:51:32,511 - INFO - Attempting to log in user: test
2025-04-09 11:51:32,556 - DEBUG - Loading KWallet
2025-04-09 11:51:32,556 - DEBUG - Loading SecretService
2025-04-09 11:51:32,592 - DEBUG - Loading Windows
2025-04-09 11:51:32,604 - DEBUG - Loaded cffi backend
2025-04-09 11:51:32,684 - DEBUG - Loading chainer
2025-04-09 11:51:32,688 - DEBUG - Loading libsecret
2025-04-09 11:51:32,688 - DEBUG - Loading macOS
2025-04-09 11:51:32,700 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 11:51:32,704 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:51:32,712 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 11:51:32,712 - DEBUG - Received response
2025-04-09 11:51:32,737 - INFO - User test logged in successfully.
2025-04-09 11:51:32,737 - INFO - Starting polling for notifications.
2025-04-09 11:51:32,737 - DEBUG - Polling for notifications...
2025-04-09 11:51:32,739 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192293 with data: None
2025-04-09 11:51:32,743 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:51:32,751 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192293 HTTP/1.1" 200 20
2025-04-09 11:51:32,751 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 11:51:32,791 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:51:32,795 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:51:32,803 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 11:51:32,803 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:51:34,423 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:51:34,427 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:51:34,435 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 40
2025-04-09 11:51:34,435 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-09 11:51:37,758 - DEBUG - Polling for notifications...
2025-04-09 11:51:37,758 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192293 with data: None
2025-04-09 11:51:37,762 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:51:37,770 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192293 HTTP/1.1" 200 20
2025-04-09 11:51:37,770 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 11:51:40,072 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'asd', 'description': 'aaa'}
2025-04-09 11:51:40,076 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:51:40,105 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 30
2025-04-09 11:51:40,105 - DEBUG - Received response: nome aggiornatonome aggiornato
2025-04-09 11:51:40,105 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-09 11:51:40,133 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:51:40,133 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:51:40,141 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 138
2025-04-09 11:51:40,141 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "asd"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:51:41,668 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:51:41,668 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:51:41,676 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 43
2025-04-09 11:51:41,680 - DEBUG - Received response: {
  "description": "aaa",
  "params": ""
}

2025-04-09 11:51:42,773 - DEBUG - Polling for notifications...
2025-04-09 11:51:42,774 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192300 with data: None
2025-04-09 11:51:42,777 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:51:42,781 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192300 HTTP/1.1" 200 20
2025-04-09 11:51:42,785 - DEBUG - Received response: {
  "update": -29
}

2025-04-09 11:51:46,288 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-09 11:51:46,291 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:51:46,334 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 15235
2025-04-09 11:51:46,334 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>IndexError: list index out of range
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "h1GMQLuTXpjbAhDrfClq";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>IndexError</h1>
<div class="detail">
  <p class="errormsg">IndexError: list index out of range
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2297266946224">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2297267184672">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2297267184784">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2297267184896">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2297267185008">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2297267185120">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2297267185232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2297267191392">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>IndexError: list index out of range
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 181, in plug_table_details
    extension = plugin.name.split(&#39;.&#39;)[1]
IndexError: list index out of range
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 181, in plug_table_details
    extension = plugin.name.split('.')[1]
IndexError: list index out of range


-->

2025-04-09 11:51:46,334 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>IndexError: list index out of range
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "h1GMQLuTXpjbAhDrfClq";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>IndexError</h1>
<div class="detail">
  <p class="errormsg">IndexError: list index out of range
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2297266946224">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2297267184672">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2297267184784">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2297267184896">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2297267185008">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2297267185120">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2297267185232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2297267191392">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>IndexError: list index out of range
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 181, in plug_table_details
    extension = plugin.name.split(&#39;.&#39;)[1]
IndexError: list index out of range
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 181, in plug_table_details
    extension = plugin.name.split('.')[1]
IndexError: list index out of range


-->

2025-04-09 11:51:47,795 - DEBUG - Polling for notifications...
2025-04-09 11:51:47,795 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192300 with data: None
2025-04-09 11:51:47,799 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-09 11:51:47,800 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:51:47,802 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:51:47,807 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192300 HTTP/1.1" 200 20
2025-04-09 11:51:47,811 - DEBUG - Received response: {
  "update": -29
}

2025-04-09 11:51:47,827 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 15235
2025-04-09 11:51:47,831 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>IndexError: list index out of range
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "h1GMQLuTXpjbAhDrfClq";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>IndexError</h1>
<div class="detail">
  <p class="errormsg">IndexError: list index out of range
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2297265520448">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2297265518992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2297265519104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2297265518432">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2297265517872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2297265518880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2297267229232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2297267229344">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>IndexError: list index out of range
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 181, in plug_table_details
    extension = plugin.name.split(&#39;.&#39;)[1]
IndexError: list index out of range
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 181, in plug_table_details
    extension = plugin.name.split('.')[1]
IndexError: list index out of range


-->

2025-04-09 11:51:47,831 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>IndexError: list index out of range
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "h1GMQLuTXpjbAhDrfClq";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>IndexError</h1>
<div class="detail">
  <p class="errormsg">IndexError: list index out of range
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2297265520448">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2297265518992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2297265519104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2297265518432">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2297265517872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2297265518880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2297267229232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2297267229344">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>IndexError: list index out of range
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 181, in plug_table_details
    extension = plugin.name.split(&#39;.&#39;)[1]
IndexError: list index out of range
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 181, in plug_table_details
    extension = plugin.name.split('.')[1]
IndexError: list index out of range


-->

2025-04-09 11:56:11,131 - INFO - Application started.
2025-04-09 11:56:11,131 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 11:56:11,131 - INFO - Attempting to log in user: test
2025-04-09 11:56:11,175 - DEBUG - Loading KWallet
2025-04-09 11:56:11,175 - DEBUG - Loading SecretService
2025-04-09 11:56:11,211 - DEBUG - Loading Windows
2025-04-09 11:56:11,219 - DEBUG - Loaded cffi backend
2025-04-09 11:56:11,300 - DEBUG - Loading chainer
2025-04-09 11:56:11,300 - DEBUG - Loading libsecret
2025-04-09 11:56:11,304 - DEBUG - Loading macOS
2025-04-09 11:56:11,312 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 11:56:11,316 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:11,324 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 11:56:11,340 - DEBUG - Received response
2025-04-09 11:56:11,362 - INFO - User test logged in successfully.
2025-04-09 11:56:11,362 - INFO - Starting polling for notifications.
2025-04-09 11:56:11,363 - DEBUG - Polling for notifications...
2025-04-09 11:56:11,367 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192571 with data: None
2025-04-09 11:56:11,367 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:11,375 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192571 HTTP/1.1" 200 20
2025-04-09 11:56:11,375 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 11:56:11,415 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:56:11,419 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:11,427 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 138
2025-04-09 11:56:11,427 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "asd"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:56:14,153 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:56:14,153 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:14,161 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 43
2025-04-09 11:56:14,165 - DEBUG - Received response: {
  "description": "aaa",
  "params": ""
}

2025-04-09 11:56:16,393 - DEBUG - Polling for notifications...
2025-04-09 11:56:16,393 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192571 with data: None
2025-04-09 11:56:16,397 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:16,410 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192571 HTTP/1.1" 200 20
2025-04-09 11:56:16,410 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 11:56:21,425 - DEBUG - Polling for notifications...
2025-04-09 11:56:21,425 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192571 with data: None
2025-04-09 11:56:21,425 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:21,433 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192571 HTTP/1.1" 200 20
2025-04-09 11:56:21,433 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 11:56:22,026 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'asd', 'description': 'aaaaa'}
2025-04-09 11:56:22,030 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:22,053 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 30
2025-04-09 11:56:22,057 - DEBUG - Received response: nome aggiornatonome aggiornato
2025-04-09 11:56:22,057 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-09 11:56:22,085 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:56:22,089 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:22,097 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 138
2025-04-09 11:56:22,097 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "asd"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:56:24,160 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:56:24,164 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:24,172 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 45
2025-04-09 11:56:24,172 - DEBUG - Received response: {
  "description": "aaaaa",
  "params": ""
}

2025-04-09 11:56:25,667 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-09 11:56:25,675 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:25,699 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 15235
2025-04-09 11:56:25,703 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>IndexError: list index out of range
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "yNj5MVX8Quq7xlJXVVyO";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>IndexError</h1>
<div class="detail">
  <p class="errormsg">IndexError: list index out of range
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1768438251584">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1768438440768">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1768438440880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1768438440992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1768438441104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1768438441216">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1768438441328">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1768438447488">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>IndexError: list index out of range
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 181, in plug_table_details
    extension = plugin.name.split(&#39;.&#39;)[1]
IndexError: list index out of range
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 181, in plug_table_details
    extension = plugin.name.split('.')[1]
IndexError: list index out of range


-->

2025-04-09 11:56:25,708 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>IndexError: list index out of range
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "yNj5MVX8Quq7xlJXVVyO";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>IndexError</h1>
<div class="detail">
  <p class="errormsg">IndexError: list index out of range
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1768438251584">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1768438440768">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1768438440880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1768438440992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1768438441104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1768438441216">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1768438441328">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1768438447488">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>IndexError: list index out of range
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 181, in plug_table_details
    extension = plugin.name.split(&#39;.&#39;)[1]
IndexError: list index out of range
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 181, in plug_table_details
    extension = plugin.name.split('.')[1]
IndexError: list index out of range


-->

2025-04-09 11:56:26,448 - DEBUG - Polling for notifications...
2025-04-09 11:56:26,448 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192582 with data: None
2025-04-09 11:56:26,448 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:26,456 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192582 HTTP/1.1" 200 20
2025-04-09 11:56:26,460 - DEBUG - Received response: {
  "update": -33
}

2025-04-09 11:56:48,255 - INFO - Application started.
2025-04-09 11:56:48,255 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 11:56:48,255 - INFO - Attempting to log in user: test
2025-04-09 11:56:48,299 - DEBUG - Loading KWallet
2025-04-09 11:56:48,299 - DEBUG - Loading SecretService
2025-04-09 11:56:48,331 - DEBUG - Loading Windows
2025-04-09 11:56:48,343 - DEBUG - Loaded cffi backend
2025-04-09 11:56:48,415 - DEBUG - Loading chainer
2025-04-09 11:56:48,419 - DEBUG - Loading libsecret
2025-04-09 11:56:48,419 - DEBUG - Loading macOS
2025-04-09 11:56:48,427 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 11:56:48,431 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:48,439 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 11:56:48,442 - DEBUG - Received response
2025-04-09 11:56:48,463 - INFO - User test logged in successfully.
2025-04-09 11:56:48,463 - INFO - Starting polling for notifications.
2025-04-09 11:56:48,463 - DEBUG - Polling for notifications...
2025-04-09 11:56:48,465 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192608 with data: None
2025-04-09 11:56:48,469 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:48,480 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192608 HTTP/1.1" 200 20
2025-04-09 11:56:48,480 - DEBUG - Received response: {
  "update": -59
}

2025-04-09 11:56:48,522 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:56:48,522 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:48,530 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 138
2025-04-09 11:56:48,530 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "asd"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:56:49,701 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:56:49,705 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:49,713 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 45
2025-04-09 11:56:49,713 - DEBUG - Received response: {
  "description": "aaaaa",
  "params": ""
}

2025-04-09 11:56:53,493 - DEBUG - Polling for notifications...
2025-04-09 11:56:53,493 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192609 with data: None
2025-04-09 11:56:53,497 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:53,505 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192609 HTTP/1.1" 200 20
2025-04-09 11:56:53,505 - DEBUG - Received response: {
  "update": -60
}

2025-04-09 11:56:56,618 - ERROR - Valori inseriti non consentiti.
2025-04-09 11:56:56,650 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:56:56,650 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:56,658 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 138
2025-04-09 11:56:56,658 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "asd"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:56:58,517 - DEBUG - Polling for notifications...
2025-04-09 11:56:58,518 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192617 with data: None
2025-04-09 11:56:58,522 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:56:58,527 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192617 HTTP/1.1" 200 20
2025-04-09 11:56:58,527 - DEBUG - Received response: {
  "update": -68
}

2025-04-09 11:57:00,375 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:57:00,378 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:57:00,389 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 45
2025-04-09 11:57:00,390 - DEBUG - Received response: {
  "description": "aaaaa",
  "params": ""
}

2025-04-09 11:57:03,547 - DEBUG - Polling for notifications...
2025-04-09 11:57:03,551 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192617 with data: None
2025-04-09 11:57:03,551 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:57:03,559 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192617 HTTP/1.1" 200 20
2025-04-09 11:57:03,559 - DEBUG - Received response: {
  "update": -68
}

2025-04-09 11:59:36,786 - INFO - Application started.
2025-04-09 11:59:36,786 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 11:59:36,786 - INFO - Attempting to log in user: test
2025-04-09 11:59:36,826 - DEBUG - Loading KWallet
2025-04-09 11:59:36,830 - DEBUG - Loading SecretService
2025-04-09 11:59:36,862 - DEBUG - Loading Windows
2025-04-09 11:59:36,874 - DEBUG - Loaded cffi backend
2025-04-09 11:59:36,955 - DEBUG - Loading chainer
2025-04-09 11:59:36,959 - DEBUG - Loading libsecret
2025-04-09 11:59:36,959 - DEBUG - Loading macOS
2025-04-09 11:59:36,971 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 11:59:36,975 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:59:36,979 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 11:59:36,983 - DEBUG - Received response
2025-04-09 11:59:37,005 - INFO - User test logged in successfully.
2025-04-09 11:59:37,005 - INFO - Starting polling for notifications.
2025-04-09 11:59:37,005 - DEBUG - Polling for notifications...
2025-04-09 11:59:37,007 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192777 with data: None
2025-04-09 11:59:37,012 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:59:37,019 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192777 HTTP/1.1" 200 21
2025-04-09 11:59:37,019 - DEBUG - Received response: {
  "update": -228
}

2025-04-09 11:59:37,060 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:59:37,060 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:59:37,070 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 138
2025-04-09 11:59:37,071 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "asd"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:59:38,052 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:59:38,055 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:59:38,060 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 45
2025-04-09 11:59:38,060 - DEBUG - Received response: {
  "description": "aaaaa",
  "params": ""
}

2025-04-09 11:59:42,036 - DEBUG - Polling for notifications...
2025-04-09 11:59:42,036 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192777 with data: None
2025-04-09 11:59:42,040 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:59:42,052 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192777 HTTP/1.1" 200 21
2025-04-09 11:59:42,052 - DEBUG - Received response: {
  "update": -228
}

2025-04-09 11:59:43,352 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'a.py', 'description': ''}
2025-04-09 11:59:43,354 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:59:43,382 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 15
2025-04-09 11:59:43,382 - DEBUG - Received response: nome aggiornato
2025-04-09 11:59:43,382 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-09 11:59:43,422 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 11:59:43,422 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:59:43,430 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 139
2025-04-09 11:59:43,434 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "a.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 11:59:45,764 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 11:59:45,768 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:59:45,780 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 45
2025-04-09 11:59:45,784 - DEBUG - Received response: {
  "description": "aaaaa",
  "params": ""
}

2025-04-09 11:59:47,063 - DEBUG - Polling for notifications...
2025-04-09 11:59:47,063 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192783 with data: None
2025-04-09 11:59:47,067 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:59:47,075 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-09 11:59:47,079 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192783 HTTP/1.1" 200 21
2025-04-09 11:59:47,079 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:59:47,079 - DEBUG - Received response: {
  "update": -234
}

2025-04-09 11:59:47,115 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 175
2025-04-09 11:59:47,115 - DEBUG - Received response: {
  "datetime": "Wed, 09 Apr 2025 11:59:47 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python a.py: No module named 'plugins.a'",
  "status": "failed"
}

2025-04-09 11:59:52,091 - DEBUG - Polling for notifications...
2025-04-09 11:59:52,091 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192783 with data: None
2025-04-09 11:59:52,096 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:59:52,104 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192783 HTTP/1.1" 200 21
2025-04-09 11:59:52,106 - DEBUG - Received response: {
  "update": -234
}

2025-04-09 11:59:57,115 - DEBUG - Polling for notifications...
2025-04-09 11:59:57,120 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192783 with data: None
2025-04-09 11:59:57,120 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 11:59:57,128 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192783 HTTP/1.1" 200 21
2025-04-09 11:59:57,128 - DEBUG - Received response: {
  "update": -234
}

2025-04-09 12:00:02,132 - DEBUG - Polling for notifications...
2025-04-09 12:00:02,132 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192783 with data: None
2025-04-09 12:00:02,132 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:00:02,140 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192783 HTTP/1.1" 200 21
2025-04-09 12:00:02,144 - DEBUG - Received response: {
  "update": -234
}

2025-04-09 12:02:06,154 - INFO - Application started.
2025-04-09 12:02:06,154 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 12:02:06,154 - INFO - Attempting to log in user: test
2025-04-09 12:02:06,198 - DEBUG - Loading KWallet
2025-04-09 12:02:06,202 - DEBUG - Loading SecretService
2025-04-09 12:02:06,234 - DEBUG - Loading Windows
2025-04-09 12:02:06,250 - DEBUG - Loaded cffi backend
2025-04-09 12:02:06,326 - DEBUG - Loading chainer
2025-04-09 12:02:06,330 - DEBUG - Loading libsecret
2025-04-09 12:02:06,330 - DEBUG - Loading macOS
2025-04-09 12:02:06,338 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 12:02:06,346 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:02:06,355 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 12:02:06,355 - DEBUG - Received response
2025-04-09 12:02:06,378 - INFO - User test logged in successfully.
2025-04-09 12:02:06,381 - INFO - Starting polling for notifications.
2025-04-09 12:02:06,381 - DEBUG - Polling for notifications...
2025-04-09 12:02:06,385 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192926 with data: None
2025-04-09 12:02:06,389 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:02:06,393 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192926 HTTP/1.1" 200 20
2025-04-09 12:02:06,397 - DEBUG - Received response: {
  "update": -13
}

2025-04-09 12:02:06,437 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 12:02:06,441 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:02:06,449 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 139
2025-04-09 12:02:06,453 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "a.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 12:02:07,544 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 12:02:07,548 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:02:07,559 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 45
2025-04-09 12:02:07,559 - DEBUG - Received response: {
  "description": "aaaaa",
  "params": ""
}

2025-04-09 12:02:11,400 - DEBUG - Polling for notifications...
2025-04-09 12:02:11,400 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192926 with data: None
2025-04-09 12:02:11,403 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:02:11,414 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192926 HTTP/1.1" 200 20
2025-04-09 12:02:11,414 - DEBUG - Received response: {
  "update": -13
}

2025-04-09 12:02:16,425 - DEBUG - Polling for notifications...
2025-04-09 12:02:16,425 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192926 with data: None
2025-04-09 12:02:16,429 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:02:16,436 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192926 HTTP/1.1" 200 20
2025-04-09 12:02:16,436 - DEBUG - Received response: {
  "update": -13
}

2025-04-09 12:02:17,197 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'b.py', 'description': 'b'}
2025-04-09 12:02:17,201 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:02:17,225 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 500 13790
2025-04-09 12:02:17,225 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: cambiaNome() takes 2 positional arguments but 3 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "O91P7eTh7iYQoVPc9tVI";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: cambiaNome() takes 2 positional arguments but 3 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2391419190880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2391420526080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2391420526192">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2391420526304">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2391420526416">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2391420526528">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2391420526640">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">195</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>ret = &#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>if data[&#39;name&#39;]:</pre>
<pre class="line current"><span class="ws">        </span>cambiaNome(&#34;../plugins&#34;,plugin.name, data[&#39;name&#39;])</pre>
<pre class="line after"><span class="ws">        </span>plugin.name = data[&#39;name&#39;]</pre>
<pre class="line after"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>ret += &#34;nome aggiornato&#34;</pre>
<pre class="line after"><span class="ws">    </span>if data[&#39;description&#39;]:</pre>
<pre class="line after"><span class="ws">        </span>plugin.description = data[&#39;description&#39;]</pre></div>
</div>
</ul>
  <blockquote>TypeError: cambiaNome() takes 2 positional arguments but 3 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 195, in modifyPlugin
    cambiaNome(&#34;../plugins&#34;,plugin.name, data[&#39;name&#39;])
TypeError: cambiaNome() takes 2 positional arguments but 3 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 195, in modifyPlugin
    cambiaNome("../plugins",plugin.name, data['name'])
TypeError: cambiaNome() takes 2 positional arguments but 3 were given


-->

2025-04-09 12:02:17,225 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: cambiaNome() takes 2 positional arguments but 3 were given
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "O91P7eTh7iYQoVPc9tVI";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: cambiaNome() takes 2 positional arguments but 3 were given
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2391419190880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2391420526080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2391420526192">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2391420526304">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2391420526416">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2391420526528">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2391420526640">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">195</em>,
      in <code class="function">modifyPlugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def modifyPlugin(id=0):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>ret = &#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>if data[&#39;name&#39;]:</pre>
<pre class="line current"><span class="ws">        </span>cambiaNome(&#34;../plugins&#34;,plugin.name, data[&#39;name&#39;])</pre>
<pre class="line after"><span class="ws">        </span>plugin.name = data[&#39;name&#39;]</pre>
<pre class="line after"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>ret += &#34;nome aggiornato&#34;</pre>
<pre class="line after"><span class="ws">    </span>if data[&#39;description&#39;]:</pre>
<pre class="line after"><span class="ws">        </span>plugin.description = data[&#39;description&#39;]</pre></div>
</div>
</ul>
  <blockquote>TypeError: cambiaNome() takes 2 positional arguments but 3 were given
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 195, in modifyPlugin
    cambiaNome(&#34;../plugins&#34;,plugin.name, data[&#39;name&#39;])
TypeError: cambiaNome() takes 2 positional arguments but 3 were given
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 195, in modifyPlugin
    cambiaNome("../plugins",plugin.name, data['name'])
TypeError: cambiaNome() takes 2 positional arguments but 3 were given


-->

2025-04-09 12:02:17,261 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 12:02:17,265 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:02:17,273 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 139
2025-04-09 12:02:17,273 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "a.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 12:02:21,445 - DEBUG - Polling for notifications...
2025-04-09 12:02:21,445 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192937 with data: None
2025-04-09 12:02:21,449 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:02:21,457 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192937 HTTP/1.1" 200 20
2025-04-09 12:02:21,457 - DEBUG - Received response: {
  "update": -24
}

2025-04-09 12:03:06,706 - INFO - Application started.
2025-04-09 12:03:06,706 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 12:03:06,710 - INFO - Attempting to log in user: test
2025-04-09 12:03:06,750 - DEBUG - Loading KWallet
2025-04-09 12:03:06,754 - DEBUG - Loading SecretService
2025-04-09 12:03:06,787 - DEBUG - Loading Windows
2025-04-09 12:03:06,799 - DEBUG - Loaded cffi backend
2025-04-09 12:03:06,875 - DEBUG - Loading chainer
2025-04-09 12:03:06,875 - DEBUG - Loading libsecret
2025-04-09 12:03:06,879 - DEBUG - Loading macOS
2025-04-09 12:03:06,887 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 12:03:06,891 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:06,898 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 12:03:06,898 - DEBUG - Received response
2025-04-09 12:03:06,921 - INFO - User test logged in successfully.
2025-04-09 12:03:06,921 - INFO - Starting polling for notifications.
2025-04-09 12:03:06,925 - DEBUG - Polling for notifications...
2025-04-09 12:03:06,929 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192987 with data: None
2025-04-09 12:03:06,933 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:06,937 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192987 HTTP/1.1" 200 20
2025-04-09 12:03:06,941 - DEBUG - Received response: {
  "update": -10
}

2025-04-09 12:03:06,981 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 12:03:06,981 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:06,989 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 139
2025-04-09 12:03:06,993 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "a.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 12:03:10,210 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 12:03:10,214 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:10,226 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 45
2025-04-09 12:03:10,227 - DEBUG - Received response: {
  "description": "aaaaa",
  "params": ""
}

2025-04-09 12:03:11,951 - DEBUG - Polling for notifications...
2025-04-09 12:03:11,951 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192987 with data: None
2025-04-09 12:03:11,955 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:11,963 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192987 HTTP/1.1" 200 20
2025-04-09 12:03:11,963 - DEBUG - Received response: {
  "update": -10
}

2025-04-09 12:03:16,973 - DEBUG - Polling for notifications...
2025-04-09 12:03:16,973 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192987 with data: None
2025-04-09 12:03:16,977 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:16,989 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192987 HTTP/1.1" 200 20
2025-04-09 12:03:16,989 - DEBUG - Received response: {
  "update": -10
}

2025-04-09 12:03:19,391 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'b.py', 'description': 'bbbbb'}
2025-04-09 12:03:19,395 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:19,423 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 30
2025-04-09 12:03:19,423 - DEBUG - Received response: nome aggiornatonome aggiornato
2025-04-09 12:03:19,423 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-09 12:03:19,456 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 12:03:19,460 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:19,468 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 139
2025-04-09 12:03:19,468 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "b.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 12:03:20,856 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 12:03:20,860 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:20,868 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 45
2025-04-09 12:03:20,868 - DEBUG - Received response: {
  "description": "bbbbb",
  "params": ""
}

2025-04-09 12:03:22,005 - DEBUG - Polling for notifications...
2025-04-09 12:03:22,005 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:03:22,009 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:22,018 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:03:22,018 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:03:22,519 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-09 12:03:22,523 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:22,539 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 175
2025-04-09 12:03:22,551 - DEBUG - Received response: {
  "datetime": "Wed, 09 Apr 2025 12:03:22 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python b.py: No module named 'plugins.b'",
  "status": "failed"
}

2025-04-09 12:03:27,032 - DEBUG - Polling for notifications...
2025-04-09 12:03:27,032 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:03:27,032 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:27,039 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:03:27,039 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:03:32,054 - DEBUG - Polling for notifications...
2025-04-09 12:03:32,054 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:03:32,058 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:32,065 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:03:32,065 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:03:37,083 - DEBUG - Polling for notifications...
2025-04-09 12:03:37,083 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:03:37,083 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:37,091 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:03:37,091 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:03:42,100 - DEBUG - Polling for notifications...
2025-04-09 12:03:42,100 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:03:42,104 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:42,112 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:03:42,116 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:03:47,123 - DEBUG - Polling for notifications...
2025-04-09 12:03:47,123 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:03:47,123 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:47,131 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:03:47,131 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:03:52,143 - DEBUG - Polling for notifications...
2025-04-09 12:03:52,143 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:03:52,147 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:52,155 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:03:52,159 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:03:57,176 - DEBUG - Polling for notifications...
2025-04-09 12:03:57,176 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:03:57,176 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:03:57,184 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:03:57,184 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:04:02,196 - DEBUG - Polling for notifications...
2025-04-09 12:04:02,196 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:04:02,200 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:04:02,208 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:04:02,208 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:04:07,225 - DEBUG - Polling for notifications...
2025-04-09 12:04:07,225 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:04:07,229 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:04:07,233 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:04:07,233 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:04:12,239 - DEBUG - Polling for notifications...
2025-04-09 12:04:12,239 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:04:12,242 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:04:12,250 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:04:12,250 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:04:17,258 - DEBUG - Polling for notifications...
2025-04-09 12:04:17,258 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:04:17,262 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:04:17,266 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:04:17,266 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:04:22,271 - DEBUG - Polling for notifications...
2025-04-09 12:04:22,271 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:04:22,275 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:04:22,283 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:04:22,283 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:04:27,295 - DEBUG - Polling for notifications...
2025-04-09 12:04:27,295 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:04:27,299 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:04:27,303 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:04:27,307 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:04:32,315 - DEBUG - Polling for notifications...
2025-04-09 12:04:32,315 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:04:32,319 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:04:32,327 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:04:32,327 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:04:37,333 - DEBUG - Polling for notifications...
2025-04-09 12:04:37,333 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:04:37,337 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:04:37,345 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:04:37,345 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:04:42,362 - DEBUG - Polling for notifications...
2025-04-09 12:04:42,362 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:04:42,365 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:04:42,373 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:04:42,373 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:04:47,387 - DEBUG - Polling for notifications...
2025-04-09 12:04:47,387 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:04:47,391 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:04:47,399 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:04:47,399 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:04:52,415 - DEBUG - Polling for notifications...
2025-04-09 12:04:52,415 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:04:52,415 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:04:52,423 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:04:52,423 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:04:57,441 - DEBUG - Polling for notifications...
2025-04-09 12:04:57,441 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:04:57,444 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:04:57,452 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:04:57,452 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:05:02,468 - DEBUG - Polling for notifications...
2025-04-09 12:05:02,468 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:05:02,472 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:05:02,480 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:05:02,480 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:05:07,489 - DEBUG - Polling for notifications...
2025-04-09 12:05:07,489 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:05:07,492 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:05:07,500 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:05:07,500 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:05:12,505 - DEBUG - Polling for notifications...
2025-04-09 12:05:12,505 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:05:12,509 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:05:12,521 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:05:12,522 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:05:17,530 - DEBUG - Polling for notifications...
2025-04-09 12:05:17,530 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:05:17,534 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:05:17,542 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:05:17,546 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:05:22,555 - DEBUG - Polling for notifications...
2025-04-09 12:05:22,555 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:05:22,555 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:05:22,563 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:05:22,563 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:05:27,568 - DEBUG - Polling for notifications...
2025-04-09 12:05:27,568 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:05:27,572 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:05:27,580 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:05:27,580 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:05:32,586 - DEBUG - Polling for notifications...
2025-04-09 12:05:32,586 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:05:32,589 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:05:32,598 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:05:32,598 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:05:37,613 - DEBUG - Polling for notifications...
2025-04-09 12:05:37,613 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:05:37,618 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:05:37,626 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:05:37,626 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:05:42,638 - DEBUG - Polling for notifications...
2025-04-09 12:05:42,638 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:05:42,642 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:05:42,650 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:05:42,655 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:05:47,659 - DEBUG - Polling for notifications...
2025-04-09 12:05:47,664 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:05:47,667 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:05:47,675 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:05:47,675 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:05:52,691 - DEBUG - Polling for notifications...
2025-04-09 12:05:52,691 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:05:52,691 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:05:52,699 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:05:52,699 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:05:57,716 - DEBUG - Polling for notifications...
2025-04-09 12:05:57,716 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:05:57,720 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:05:57,728 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:05:57,728 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:06:02,738 - DEBUG - Polling for notifications...
2025-04-09 12:06:02,738 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:06:02,742 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:02,750 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:06:02,750 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:06:07,754 - DEBUG - Polling for notifications...
2025-04-09 12:06:07,754 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:06:07,758 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:07,766 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:06:07,770 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:06:12,783 - DEBUG - Polling for notifications...
2025-04-09 12:06:12,783 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:06:12,787 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:12,795 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:06:12,795 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:06:15,967 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/2 with data: None
2025-04-09 12:06:15,970 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:15,978 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/2 HTTP/1.1" 200 40
2025-04-09 12:06:15,982 - DEBUG - Received response: {
  "description": "",
  "params": ""
}

2025-04-09 12:06:17,803 - DEBUG - Polling for notifications...
2025-04-09 12:06:17,803 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:06:17,803 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:17,811 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:06:17,811 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:06:19,446 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/2 with data: {}
2025-04-09 12:06:19,450 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:19,495 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/2 HTTP/1.1" 200 102
2025-04-09 12:06:19,499 - DEBUG - Received response: {
  "datetime": "Wed, 09 Apr 2025 12:06:19 GMT",
  "log": "Io piango tanto",
  "status": "finished"
}

2025-04-09 12:06:22,825 - DEBUG - Polling for notifications...
2025-04-09 12:06:22,825 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:06:22,829 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:22,837 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:06:22,837 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:06:27,840 - DEBUG - Polling for notifications...
2025-04-09 12:06:27,840 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:06:27,844 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:27,852 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:06:27,852 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:06:32,870 - DEBUG - Polling for notifications...
2025-04-09 12:06:32,870 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:06:32,874 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:32,882 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:06:32,882 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:06:34,278 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 12:06:34,282 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:34,291 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 45
2025-04-09 12:06:34,294 - DEBUG - Received response: {
  "description": "bbbbb",
  "params": ""
}

2025-04-09 12:06:37,894 - DEBUG - Polling for notifications...
2025-04-09 12:06:37,894 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:06:37,898 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:37,906 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:06:37,906 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:06:42,916 - DEBUG - Polling for notifications...
2025-04-09 12:06:42,916 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744192999 with data: None
2025-04-09 12:06:42,916 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:42,924 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744192999 HTTP/1.1" 200 20
2025-04-09 12:06:42,940 - DEBUG - Received response: {
  "update": -22
}

2025-04-09 12:06:46,467 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'pluginEs', 'description': 'esempio'}
2025-04-09 12:06:46,471 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:46,493 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 30
2025-04-09 12:06:46,497 - DEBUG - Received response: nome aggiornatonome aggiornato
2025-04-09 12:06:46,497 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-09 12:06:46,529 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 12:06:46,533 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:46,541 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 143
2025-04-09 12:06:46,541 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 12:06:47,952 - DEBUG - Polling for notifications...
2025-04-09 12:06:47,952 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193207 with data: None
2025-04-09 12:06:47,955 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:47,963 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193207 HTTP/1.1" 200 21
2025-04-09 12:06:47,963 - DEBUG - Received response: {
  "update": -230
}

2025-04-09 12:06:48,357 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 12:06:48,361 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:48,373 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 47
2025-04-09 12:06:48,373 - DEBUG - Received response: {
  "description": "esempio",
  "params": ""
}

2025-04-09 12:06:49,654 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-09 12:06:49,658 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:49,682 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 15235
2025-04-09 12:06:49,682 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>IndexError: list index out of range
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "EWGMEuzvZytvjHLDaaba";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>IndexError</h1>
<div class="detail">
  <p class="errormsg">IndexError: list index out of range
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1772839041536">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1772842591488">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1772842591600">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1772842591712">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1772842591824">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1772842591936">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1772842592048">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1772842598208">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>IndexError: list index out of range
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 181, in plug_table_details
    extension = plugin.name.split(&#39;.&#39;)[1]
IndexError: list index out of range
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 181, in plug_table_details
    extension = plugin.name.split('.')[1]
IndexError: list index out of range


-->

2025-04-09 12:06:49,686 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>IndexError: list index out of range
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "EWGMEuzvZytvjHLDaaba";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>IndexError</h1>
<div class="detail">
  <p class="errormsg">IndexError: list index out of range
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1772839041536">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1772842591488">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1772842591600">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1772842591712">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1772842591824">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1772842591936">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1772842592048">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1772842598208">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>IndexError: list index out of range
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 181, in plug_table_details
    extension = plugin.name.split(&#39;.&#39;)[1]
IndexError: list index out of range
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 181, in plug_table_details
    extension = plugin.name.split('.')[1]
IndexError: list index out of range


-->

2025-04-09 12:06:51,479 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-09 12:06:51,482 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:51,505 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 500 15235
2025-04-09 12:06:51,509 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>IndexError: list index out of range
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "EWGMEuzvZytvjHLDaaba";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>IndexError</h1>
<div class="detail">
  <p class="errormsg">IndexError: list index out of range
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1772842651872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1772842652656">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1772842651760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1772842652768">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1772842651984">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1772842652880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1772842652432">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1772842652544">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>IndexError: list index out of range
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 181, in plug_table_details
    extension = plugin.name.split(&#39;.&#39;)[1]
IndexError: list index out of range
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 181, in plug_table_details
    extension = plugin.name.split('.')[1]
IndexError: list index out of range


-->

2025-04-09 12:06:51,509 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>IndexError: list index out of range
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "EWGMEuzvZytvjHLDaaba";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>IndexError</h1>
<div class="detail">
  <p class="errormsg">IndexError: list index out of range
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1772842651872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1772842652656">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1772842651760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1772842652768">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1772842651984">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1772842652880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1772842652432">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1772842652544">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py"</cite>,
      line <em class="line">181</em>,
      in <code class="function">plug_table_details</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def plug_table_details(id=0,parametri=&#39;&#39;):</pre>
<pre class="line before"><span class="ws">    </span>plugin = PlugTable.query.get(id)  # gestione dell&#39;id tramite il metodo http GET</pre>
<pre class="line before"><span class="ws">    </span>if plugin is None:</pre>
<pre class="line before"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>extension = plugin.name.split(&#39;.&#39;)[1]</pre>
<pre class="line after"><span class="ws">    </span>result = avvia_plugin(plugin.name ,parametri, extension)</pre>
<pre class="line after"><span class="ws">    </span>logUpdate(result)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify(result) # Use the renamed method</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>IndexError: list index out of range
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py&#34;, line 181, in plug_table_details
    extension = plugin.name.split(&#39;.&#39;)[1]
IndexError: list index out of range
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\NetStrike\NetStrike\ServerSide\core\core.py", line 181, in plug_table_details
    extension = plugin.name.split('.')[1]
IndexError: list index out of range


-->

2025-04-09 12:06:52,968 - DEBUG - Polling for notifications...
2025-04-09 12:06:52,968 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193207 with data: None
2025-04-09 12:06:52,968 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:52,976 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193207 HTTP/1.1" 200 21
2025-04-09 12:06:52,976 - DEBUG - Received response: {
  "update": -230
}

2025-04-09 12:06:57,251 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 12:06:57,251 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:57,259 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 47
2025-04-09 12:06:57,263 - DEBUG - Received response: {
  "description": "esempio",
  "params": ""
}

2025-04-09 12:06:57,988 - DEBUG - Polling for notifications...
2025-04-09 12:06:57,988 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193207 with data: None
2025-04-09 12:06:57,992 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:06:57,996 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193207 HTTP/1.1" 200 21
2025-04-09 12:06:58,000 - DEBUG - Received response: {
  "update": -230
}

2025-04-09 12:07:03,009 - DEBUG - Polling for notifications...
2025-04-09 12:07:03,009 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193207 with data: None
2025-04-09 12:07:03,013 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:07:03,025 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193207 HTTP/1.1" 200 21
2025-04-09 12:07:03,025 - DEBUG - Received response: {
  "update": -230
}

2025-04-09 12:07:08,038 - DEBUG - Polling for notifications...
2025-04-09 12:07:08,038 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193207 with data: None
2025-04-09 12:07:08,042 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:07:08,050 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193207 HTTP/1.1" 200 21
2025-04-09 12:07:08,063 - DEBUG - Received response: {
  "update": -230
}

2025-04-09 12:07:08,264 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'pluginEs.py', 'description': 'ese'}
2025-04-09 12:07:08,269 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:07:08,289 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 30
2025-04-09 12:07:08,293 - DEBUG - Received response: nome aggiornatonome aggiornato
2025-04-09 12:07:08,293 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-09 12:07:08,321 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 12:07:08,325 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:07:08,333 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 12:07:08,346 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 12:07:09,087 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 12:07:09,087 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:07:09,099 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 43
2025-04-09 12:07:09,099 - DEBUG - Received response: {
  "description": "ese",
  "params": ""
}

2025-04-09 12:07:10,194 - DEBUG - Sending POST request to https://127.0.0.1:5000/test_execute/1 with data: {}
2025-04-09 12:07:10,198 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:07:10,214 - DEBUG - https://127.0.0.1:5000 "POST /test_execute/1 HTTP/1.1" 200 189
2025-04-09 12:07:10,214 - DEBUG - Received response: {
  "datetime": "Wed, 09 Apr 2025 12:07:10 GMT",
  "log": "Errore nell'importazione ed esecuzione del modulo Python pluginEs.py: No module named 'plugins.pluginEs'",
  "status": "failed"
}

2025-04-09 12:07:13,077 - DEBUG - Polling for notifications...
2025-04-09 12:07:13,077 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193228 with data: None
2025-04-09 12:07:13,081 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:07:13,089 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193228 HTTP/1.1" 200 21
2025-04-09 12:07:13,089 - DEBUG - Received response: {
  "update": -251
}

2025-04-09 12:07:18,094 - DEBUG - Polling for notifications...
2025-04-09 12:07:18,094 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193228 with data: None
2025-04-09 12:07:18,098 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:07:18,106 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193228 HTTP/1.1" 200 21
2025-04-09 12:07:18,106 - DEBUG - Received response: {
  "update": -251
}

2025-04-09 12:07:23,122 - DEBUG - Polling for notifications...
2025-04-09 12:07:23,122 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193228 with data: None
2025-04-09 12:07:23,125 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:07:23,134 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193228 HTTP/1.1" 200 21
2025-04-09 12:07:23,134 - DEBUG - Received response: {
  "update": -251
}

2025-04-09 12:07:28,142 - DEBUG - Polling for notifications...
2025-04-09 12:07:28,142 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193228 with data: None
2025-04-09 12:07:28,145 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:07:28,154 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193228 HTTP/1.1" 200 21
2025-04-09 12:07:28,154 - DEBUG - Received response: {
  "update": -251
}

2025-04-09 12:08:25,079 - INFO - Application started.
2025-04-09 12:08:25,079 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 12:08:25,079 - INFO - Attempting to log in user: test
2025-04-09 12:08:25,125 - DEBUG - Loading KWallet
2025-04-09 12:08:25,129 - DEBUG - Loading SecretService
2025-04-09 12:08:25,165 - DEBUG - Loading Windows
2025-04-09 12:08:25,181 - DEBUG - Loaded cffi backend
2025-04-09 12:08:25,262 - DEBUG - Loading chainer
2025-04-09 12:08:25,262 - DEBUG - Loading libsecret
2025-04-09 12:08:25,266 - DEBUG - Loading macOS
2025-04-09 12:08:25,280 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 12:08:25,283 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:08:25,291 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 12:08:25,311 - DEBUG - Received response
2025-04-09 12:08:25,330 - INFO - User test logged in successfully.
2025-04-09 12:08:25,330 - INFO - Starting polling for notifications.
2025-04-09 12:08:25,331 - DEBUG - Polling for notifications...
2025-04-09 12:08:25,331 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193305 with data: None
2025-04-09 12:08:25,335 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:08:25,343 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193305 HTTP/1.1" 200 20
2025-04-09 12:08:25,343 - DEBUG - Received response: {
  "update": -16
}

2025-04-09 12:08:25,384 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 12:08:25,388 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:08:25,396 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 146
2025-04-09 12:08:25,396 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "pluginEs.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 12:08:26,614 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 12:08:26,618 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:08:26,626 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 43
2025-04-09 12:08:26,630 - DEBUG - Received response: {
  "description": "ese",
  "params": ""
}

2025-04-09 12:08:30,354 - DEBUG - Polling for notifications...
2025-04-09 12:08:30,354 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193305 with data: None
2025-04-09 12:08:30,358 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:08:30,366 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193305 HTTP/1.1" 200 20
2025-04-09 12:08:30,366 - DEBUG - Received response: {
  "update": -16
}

2025-04-09 12:08:33,322 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'asdsdsd', 'description': ''}
2025-04-09 12:08:33,326 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:08:33,349 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 15
2025-04-09 12:08:33,349 - DEBUG - Received response: nome aggiornato
2025-04-09 12:08:33,349 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-09 12:08:33,377 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 12:08:33,381 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:08:33,385 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 142
2025-04-09 12:08:33,401 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "asdsdsd"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 12:08:35,370 - DEBUG - Polling for notifications...
2025-04-09 12:08:35,370 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193313 with data: None
2025-04-09 12:08:35,374 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:08:35,382 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193313 HTTP/1.1" 200 20
2025-04-09 12:08:35,382 - DEBUG - Received response: {
  "update": -24
}

2025-04-09 12:08:40,400 - DEBUG - Polling for notifications...
2025-04-09 12:08:40,400 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193313 with data: None
2025-04-09 12:08:40,404 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:08:40,412 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193313 HTTP/1.1" 200 20
2025-04-09 12:08:40,412 - DEBUG - Received response: {
  "update": -24
}

2025-04-09 12:08:45,422 - DEBUG - Polling for notifications...
2025-04-09 12:08:45,422 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193313 with data: None
2025-04-09 12:08:45,425 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:08:45,430 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193313 HTTP/1.1" 200 20
2025-04-09 12:08:45,430 - DEBUG - Received response: {
  "update": -24
}

2025-04-09 12:08:50,436 - DEBUG - Polling for notifications...
2025-04-09 12:08:50,436 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193313 with data: None
2025-04-09 12:08:50,436 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:08:50,444 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193313 HTTP/1.1" 200 20
2025-04-09 12:08:50,444 - DEBUG - Received response: {
  "update": -24
}

2025-04-09 12:08:55,451 - DEBUG - Polling for notifications...
2025-04-09 12:08:55,451 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193313 with data: None
2025-04-09 12:08:55,454 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:08:55,462 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193313 HTTP/1.1" 200 20
2025-04-09 12:08:55,462 - DEBUG - Received response: {
  "update": -24
}

2025-04-09 12:09:00,468 - DEBUG - Polling for notifications...
2025-04-09 12:09:00,468 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193313 with data: None
2025-04-09 12:09:00,472 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:09:00,480 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193313 HTTP/1.1" 200 20
2025-04-09 12:09:00,480 - DEBUG - Received response: {
  "update": -24
}

2025-04-09 12:09:05,491 - DEBUG - Polling for notifications...
2025-04-09 12:09:05,491 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193313 with data: None
2025-04-09 12:09:05,495 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:09:05,503 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193313 HTTP/1.1" 200 20
2025-04-09 12:09:05,503 - DEBUG - Received response: {
  "update": -24
}

2025-04-09 12:09:10,516 - DEBUG - Polling for notifications...
2025-04-09 12:09:10,516 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193313 with data: None
2025-04-09 12:09:10,520 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:09:10,528 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193313 HTTP/1.1" 200 20
2025-04-09 12:09:10,530 - DEBUG - Received response: {
  "update": -24
}

2025-04-09 12:09:15,542 - DEBUG - Polling for notifications...
2025-04-09 12:09:15,542 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193313 with data: None
2025-04-09 12:09:15,546 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:09:15,554 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193313 HTTP/1.1" 200 20
2025-04-09 12:09:15,554 - DEBUG - Received response: {
  "update": -24
}

2025-04-09 12:09:52,097 - INFO - Application started.
2025-04-09 12:09:52,097 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-04-09 12:09:52,097 - INFO - Attempting to log in user: test
2025-04-09 12:09:52,141 - DEBUG - Loading KWallet
2025-04-09 12:09:52,141 - DEBUG - Loading SecretService
2025-04-09 12:09:52,173 - DEBUG - Loading Windows
2025-04-09 12:09:52,185 - DEBUG - Loaded cffi backend
2025-04-09 12:09:52,261 - DEBUG - Loading chainer
2025-04-09 12:09:52,261 - DEBUG - Loading libsecret
2025-04-09 12:09:52,265 - DEBUG - Loading macOS
2025-04-09 12:09:52,273 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-04-09 12:09:52,277 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:09:52,289 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-04-09 12:09:52,289 - DEBUG - Received response
2025-04-09 12:09:52,313 - INFO - User test logged in successfully.
2025-04-09 12:09:52,313 - INFO - Starting polling for notifications.
2025-04-09 12:09:52,313 - DEBUG - Polling for notifications...
2025-04-09 12:09:52,317 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193392 with data: None
2025-04-09 12:09:52,320 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:09:52,325 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193392 HTTP/1.1" 200 20
2025-04-09 12:09:52,345 - DEBUG - Received response: {
  "update": -25
}

2025-04-09 12:09:52,370 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 12:09:52,370 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:09:52,382 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 142
2025-04-09 12:09:52,382 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "asdsdsd"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 12:09:53,729 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 12:09:53,733 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:09:53,741 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 43
2025-04-09 12:09:53,745 - DEBUG - Received response: {
  "description": "ese",
  "params": ""
}

2025-04-09 12:09:57,352 - DEBUG - Polling for notifications...
2025-04-09 12:09:57,352 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193392 with data: None
2025-04-09 12:09:57,352 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:09:57,359 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193392 HTTP/1.1" 200 20
2025-04-09 12:09:57,363 - DEBUG - Received response: {
  "update": -25
}

2025-04-09 12:10:02,373 - DEBUG - Polling for notifications...
2025-04-09 12:10:02,373 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193392 with data: None
2025-04-09 12:10:02,377 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:10:02,385 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193392 HTTP/1.1" 200 20
2025-04-09 12:10:02,389 - DEBUG - Received response: {
  "update": -25
}

2025-04-09 12:10:04,920 - DEBUG - Sending PATCH request to https://127.0.0.1:5000/edit_plugin/1 with data: {'name': 'aaa.py', 'description': 'test cambio nome con successo'}
2025-04-09 12:10:04,924 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:10:04,956 - DEBUG - https://127.0.0.1:5000 "PATCH /edit_plugin/1 HTTP/1.1" 200 30
2025-04-09 12:10:04,956 - DEBUG - Received response: nome aggiornatonome aggiornato
2025-04-09 12:10:04,960 - ERROR - Error during request: Expecting value: line 1 column 1 (char 0)
2025-04-09 12:10:04,992 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-04-09 12:10:04,992 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:10:05,000 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 200 141
2025-04-09 12:10:05,000 - DEBUG - Received response: [
  {
    "id": 1,
    "name": "aaa.py"
  },
  {
    "id": 2,
    "name": "newPlugin.py"
  },
  {
    "id": 3,
    "name": "saluti.py"
  }
]

2025-04-09 12:10:06,011 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_details/1 with data: None
2025-04-09 12:10:06,015 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:10:06,023 - DEBUG - https://127.0.0.1:5000 "GET /plugin_details/1 HTTP/1.1" 200 69
2025-04-09 12:10:06,023 - DEBUG - Received response: {
  "description": "test cambio nome con successo",
  "params": ""
}

2025-04-09 12:10:07,395 - DEBUG - Polling for notifications...
2025-04-09 12:10:07,395 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1744193405 with data: None
2025-04-09 12:10:07,399 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-04-09 12:10:07,407 - DEBUG - https://127.0.0.1:5000 "GET /notification/1744193405 HTTP/1.1" 200 20
2025-04-09 12:10:07,411 - DEBUG - Received response: {
  "update": -38
}

2025-05-14 05:20:52,514 - INFO - Application started.
2025-05-14 05:20:52,514 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-05-14 05:20:52,515 - INFO - Attempting to log in user: test
2025-05-14 05:20:52,570 - DEBUG - Loading KWallet
2025-05-14 05:20:52,576 - DEBUG - Loading SecretService
2025-05-14 05:20:52,657 - DEBUG - Loading Windows
2025-05-14 05:20:52,707 - DEBUG - Loaded cffi backend
2025-05-14 05:20:52,850 - DEBUG - Loading chainer
2025-05-14 05:20:52,853 - DEBUG - Loading libsecret
2025-05-14 05:20:52,859 - DEBUG - Loading macOS
2025-05-14 05:20:52,873 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-05-14 05:20:52,879 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:20:52,899 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-05-14 05:20:52,900 - DEBUG - Received response
2025-05-14 05:20:52,918 - INFO - User test logged in successfully.
2025-05-14 05:20:52,918 - INFO - Starting polling for notifications.
2025-05-14 05:20:52,919 - DEBUG - Polling for notifications...
2025-05-14 05:20:52,924 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1747192853 with data: None
2025-05-14 05:20:52,926 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:20:52,931 - DEBUG - https://127.0.0.1:5000 "GET /notification/1747192853 HTTP/1.1" 200 4
2025-05-14 05:20:52,950 - DEBUG - Received response: -53

2025-05-14 05:20:52,987 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:20:52,989 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:20:53,090 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:20:53,091 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983056880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983056992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323980412112">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323981107632">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323981107744">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323981107856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323981107968">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323981108080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323981108192">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323981180032">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323981185856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323981472368">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323981472480">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323981876560">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323981876672">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323982178336">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323982452352">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323982845232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323982845344">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323982845456">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323982845568">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323982845680">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323982845792">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:20:53,093 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983056880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983056992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323980412112">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323981107632">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323981107744">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323981107856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323981107968">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323981108080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323981108192">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323981180032">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323981185856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323981472368">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323981472480">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323981876560">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323981876672">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323982178336">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323982452352">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323982845232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323982845344">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323982845456">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323982845568">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323982845680">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323982845792">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:01,517 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'import os #libreria per poter lavorare con le cartelle e file dell\'applicazione\nimport importlib #va a sostituire la funzione manuale di import dato che non siamo a conoscenza dei nomi dei file \n                 #e per rendere l\'importazione dinamica\nimport sys  #serve per modificare a riga 38 i percorsi da cui prendere i file python\nimport abc\nimport inspect #serve per vedere i parametri\nimport subprocess #serve per eseguire comandi di sistema\nimport platform #serve per il multipiattaforma\nimport time #serve per operare con il tempo\nfrom datetime import datetime #serve per l\'ora esatta dei ping\nimport matplotlib.pyplot as plt #serve per creare il crafico dei ping\nimport smtplib #serve per inviare email via SMTP\nfrom email.message import EmailMessage #usato per costruire l\'email\nfrom pathlib import Path #serve per ottenere il riferimento al percorso del file corrente\n\n\n\n\nclass Plugin(Interfaccia_Plugin):\n    vet_param = None\n    \n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def invioGrafico(self, email, dati, url):\n        x = [d[0] for d in dati if d[1] is not None]  # orari dei ping riusciti\n        y = [d[1] for d in dati if d[1] is not None]  # valori dei ping riusciti\n\n        # crea il grafico\n        plt.figure(figsize=(10, 5))\n        plt.plot(x, y, marker=\'o\')\n        plt.title(f\'Ping Monitor - {url}\')\n        plt.xlabel(\'Orario\')\n        plt.ylabel(\'Ping (ms)\')\n        plt.grid(True)\n        plt.xticks(rotation=45)\n\n        # salva il grafico come immagine\n        img_path = os.path.join(os.getcwd(), \'ping_graph.png\')\n        plt.tight_layout()\n        plt.savefig(img_path)\n        plt.close()\n\n        # prepara l’email con l’allegato\n        msg = EmailMessage()\n        msg[\'Subject\'] = f\'Grafico Monitoraggio - {url}\'\n        msg[\'From\'] = \'nicolacasagrande54@gmail.com\'\n        msg[\'To\'] = email\n        msg.set_content(\'In allegato il grafico con i risultati del monitoraggio.\')\n\n        # allega l’immagine\n        with open(img_path, \'rb\') as f:\n            img_data = f.read()\n            msg.add_attachment(img_data, maintype=\'image\', subtype=\'png\', filename=\'ping_graph.png\')\n\n        # invia l’email con l’allegato\n        with smtplib.SMTP(\'smtp.gmail.com\', 587) as smtp:\n            smtp.starttls()\n            smtp.login(\'nicolacasagrande54@gmail.com\', \'nizh qsff zgzv zasd\')\n            smtp.send_message(msg)\n\n    def invioEmailAvviso(self, email, url):\n        msg = EmailMessage()  # crea una nuova email\n        msg[\'Subject\'] = f\' Server Offline - {url}\'  # oggetto dell’email\n        msg[\'From\'] = \'nicolacasagrande54@gmail.com\'  # mittente (puoi cambiarlo)\n        msg[\'To\'] = email  # destinatario\n        msg.set_content(f\'Il server {url} è stato rilevato come offline.\')  # contenuto del messaggio\n\n        with smtplib.SMTP(\'smtp.gmail.com\', 587) as smtp:  # connessione al server SMTP\n            smtp.starttls()  # cifratura della connessione\n            smtp.login(\'nicolacasagrande54@gmail.com\', \'nizh qsff zgzv zasd\')  # login al server\n            smtp.send_message(msg)  # invia l’email\n\n    def monitoraggio_server(self, email,url,tempo_monitoraggio):\n        intervallo_ping = 1  # ogni N secondi fa un ping , per ora 1\n        max_fail = 2  # ogni N tentativi manda l\'avviso, per ora 2\n        fail_count = 0  # contatore di ping falliti per fermare poi il ciclo\n        dati_ping = []  # salva il futuro output\n        start_time = time.time()  # orario di inizio del monitoraggio\n\n        # loop che continua finché non finisce il tempo di monitoraggio o N tentativi falliscono\n        while (time.time() - start_time) < tempo_monitoraggio: #time.time() da l\'orario in quel momento\n            try:\n                # comando diverso a seconda del sistema operativo\n                if platform.system().lower() == "windows":\n                    comando = ["ping", "-n", "1", url]\n                else:\n                    comando = ["ping", "-c", "1", url] #linux e ios\n\n                # esegue il ping con il comando salvato prima e salva il risultato\n                result = subprocess.run(comando, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n\n                if result.returncode == 0:  # se vero il ping è riuscito\n                    output = result.stdout  # prendiamo l’output del ping\n                    if platform.system().lower() == "windows": # comando diverso a seconda del sistema operativo\n                        for line in output.splitlines():  # scorriamo ogni riga\n                            if "durata=" in line:\n                                time_part = line.split("durata=")[1].split("ms")[0].strip()\n                                ping_ms = float(time_part)\n                                break\n                            elif "time=" in line:\n                                time_part = line.split("time=")[1].split("ms")[0].strip()\n                                ping_ms = float(time_part)\n                                break\n                        else:\n                            ping_ms = None\n                    else:\n                        for line in output.splitlines():\n                            if "time=" in line:\n                                ping_ms = float(line.split("time=")[1].split(" ")[0])  \n                                break\n                        else:\n                            ping_ms = None\n                    #fail_count = 0   reset se il ping è ok???\n                else:\n                    ping_ms = None  # ping fallito\n                    fail_count += 1  \n                    \n            except Exception as e:  # errore nel ping\n                ping_ms = None\n                fail_count += 1\n\n            oraPing = datetime.now()  # orario esatto del ping\n            dati_ping.append((oraPing, ping_ms))  #salvo ora e tempo del ping\n\n            if fail_count >= max_fail:\n                self.invioEmailAvviso(email, url)  # se ha fallito troppe volte, manda avviso\n                break\n\n            time.sleep(intervallo_ping)  # aspetta prima del prossimo ping\n\n        # dopo il monitoraggio manda il grafico via email\n        self.invioGrafico(email, dati_ping, url)\n        return dati_ping  # ritorna i dati raccolti \n\n\n\n    def execute(self):\n        self.monitoraggio_server("samuele231106@gmail.com","google.com",10)\n        return "Output"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True', 'name': 'status.py'}
2025-05-14 05:21:01,519 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:21:01,600 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 500 56787
2025-05-14 05:21:01,602 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983761280">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983761392">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983058224">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983057104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983060240">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983059680">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983059232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983060128">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983058000">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983058672">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">239</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre>
<pre class="line before"><span class="ws">            </span>description=&#39;&#39;  # DEBUG</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span># Add the new plugin to the database</pre>
<pre class="line before"><span class="ws">        </span>db.session.add(new_plugin)</pre>
<pre class="line current"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>last_update = round(time.time())</pre>
<pre class="line after"><span class="ws">        </span>print(&#34;Updated time: &#34;+str(last_update))</pre>
<pre class="line after"><span class="ws">        </span># Return a success response</pre>
<pre class="line after"><span class="ws">        </span>logging.debug(get_jwt_identity()+&#34;: Added a plugin (&#34;+data[&#39;name&#39;]+&#34;)&#34; )</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Plugin uploaded successfully&#34;}), 201</pre></div>
</div>

<li><div class="frame" id="frame-1323983057328">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-1323983306336">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-1323983306448">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1323983306560">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1323983425200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-1323983425312">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1323983425424">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1323983425536">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-1323983425648">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-1323983425760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-1323983425872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983502272">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983502384">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983617072">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983617184">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">93</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>mapper,</pre>
<pre class="line before"><span class="ws">            </span>table,</pre>
<pre class="line before"><span class="ws">            </span>update,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_insert_statements(</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>insert,</pre></div>
</div>

<li><div class="frame" id="frame-1323983760272">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">1233</em>,
      in <code class="function">_emit_insert_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>statement.values(value_params),</pre>
<pre class="line before"><span class="ws">                            </span>params,</pre>
<pre class="line before"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line before"><span class="ws">                        </span>)</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line current"><span class="ws">                        </span>result = connection.execute(</pre>
<pre class="line after"><span class="ws">                            </span>statement,</pre>
<pre class="line after"><span class="ws">                            </span>params,</pre>
<pre class="line after"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">                        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983760384">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983760496">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983760608">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983760720">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983760832">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983760944">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983761056">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983761168">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 239, in new_plugin
    db.session.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 93, in save_obj
    _emit_insert_statements(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 1233, in _emit_insert_statements
    result = connection.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 239, in new_plugin
    db.session.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO "plugTable" (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: ('status.py', '', '', 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:01,604 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983761280">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983761392">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983058224">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983057104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983060240">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983059680">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983059232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983060128">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983058000">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983058672">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">239</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre>
<pre class="line before"><span class="ws">            </span>description=&#39;&#39;  # DEBUG</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span># Add the new plugin to the database</pre>
<pre class="line before"><span class="ws">        </span>db.session.add(new_plugin)</pre>
<pre class="line current"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>last_update = round(time.time())</pre>
<pre class="line after"><span class="ws">        </span>print(&#34;Updated time: &#34;+str(last_update))</pre>
<pre class="line after"><span class="ws">        </span># Return a success response</pre>
<pre class="line after"><span class="ws">        </span>logging.debug(get_jwt_identity()+&#34;: Added a plugin (&#34;+data[&#39;name&#39;]+&#34;)&#34; )</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Plugin uploaded successfully&#34;}), 201</pre></div>
</div>

<li><div class="frame" id="frame-1323983057328">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-1323983306336">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-1323983306448">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1323983306560">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1323983425200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-1323983425312">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1323983425424">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1323983425536">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-1323983425648">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-1323983425760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-1323983425872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983502272">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983502384">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983617072">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983617184">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">93</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>mapper,</pre>
<pre class="line before"><span class="ws">            </span>table,</pre>
<pre class="line before"><span class="ws">            </span>update,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_insert_statements(</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>insert,</pre></div>
</div>

<li><div class="frame" id="frame-1323983760272">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">1233</em>,
      in <code class="function">_emit_insert_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>statement.values(value_params),</pre>
<pre class="line before"><span class="ws">                            </span>params,</pre>
<pre class="line before"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line before"><span class="ws">                        </span>)</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line current"><span class="ws">                        </span>result = connection.execute(</pre>
<pre class="line after"><span class="ws">                            </span>statement,</pre>
<pre class="line after"><span class="ws">                            </span>params,</pre>
<pre class="line after"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">                        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983760384">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983760496">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983760608">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983760720">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983760832">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983760944">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983761056">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983761168">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 239, in new_plugin
    db.session.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 93, in save_obj
    _emit_insert_statements(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 1233, in _emit_insert_statements
    result = connection.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 239, in new_plugin
    db.session.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO "plugTable" (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: ('status.py', '', '', 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:01,608 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:21:01,609 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:21:01,648 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:21:01,649 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983764080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983764192">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983761952">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983761616">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983762064">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983761840">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983761504">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983762288">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983762400">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983762512">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323983762624">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323983762736">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983762848">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323983762960">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323983763072">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323983763184">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983763296">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983763408">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983763520">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983763632">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983763744">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983763856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983763968">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:01,651 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983764080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983764192">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983761952">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983761616">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983762064">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983761840">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983761504">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983762288">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983762400">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983762512">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323983762624">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323983762736">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983762848">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323983762960">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323983763072">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323983763184">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983763296">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983763408">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983763520">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983763632">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983763744">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983763856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983763968">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:01,653 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:21:01,655 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:21:01,701 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:21:01,702 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983881712">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983881824">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983762176">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983764304">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983764528">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983764416">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983764752">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983765088">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983765200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983765312">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323983880256">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323983880368">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983880480">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323983880592">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323983880704">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323983880816">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983880928">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983881040">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983881152">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983881264">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983881376">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983881488">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983881600">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:01,703 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983881712">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983881824">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983762176">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983764304">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983764528">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983764416">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983764752">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983765088">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983765200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983765312">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323983880256">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323983880368">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983880480">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323983880592">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323983880704">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323983880816">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983880928">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983881040">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983881152">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983881264">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983881376">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983881488">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983881600">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:01,706 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:21:01,707 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:21:01,758 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:21:01,759 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983884512">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983884624">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983882608">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983881936">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983882160">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983882048">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983882384">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983882720">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983882832">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983882944">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323983883056">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323983883168">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983883280">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323983883392">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323983883504">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323983883616">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983883728">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983883840">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983883952">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983884064">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983884176">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983884288">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983884400">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:01,761 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983884512">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983884624">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983882608">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983881936">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983882160">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983882048">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983882384">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983882720">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983882832">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983882944">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323983883056">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323983883168">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983883280">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323983883392">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323983883504">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323983883616">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983883728">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983883840">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983883952">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983884064">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983884176">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983884288">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983884400">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:18,027 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'from core.interfaccia_plugin import Interfaccia_Plugin\n\nclass Plugin(Interfaccia_Plugin):\n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def execute(self):\n        return "Io sono stato caricato"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True\n', 'name': 'qualcosa.py'}
2025-05-14 05:21:18,028 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:21:18,097 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 500 56797
2025-05-14 05:21:18,098 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;qualcosa.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;qualcosa.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983888880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983888992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983882496">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983885632">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983886976">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983884848">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983886528">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983886416">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983885184">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983885296">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">239</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre>
<pre class="line before"><span class="ws">            </span>description=&#39;&#39;  # DEBUG</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span># Add the new plugin to the database</pre>
<pre class="line before"><span class="ws">        </span>db.session.add(new_plugin)</pre>
<pre class="line current"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>last_update = round(time.time())</pre>
<pre class="line after"><span class="ws">        </span>print(&#34;Updated time: &#34;+str(last_update))</pre>
<pre class="line after"><span class="ws">        </span># Return a success response</pre>
<pre class="line after"><span class="ws">        </span>logging.debug(get_jwt_identity()+&#34;: Added a plugin (&#34;+data[&#39;name&#39;]+&#34;)&#34; )</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Plugin uploaded successfully&#34;}), 201</pre></div>
</div>

<li><div class="frame" id="frame-1323983885520">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-1323983885856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-1323983885072">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1323983885968">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1323983884960">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-1323983887200">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1323983886640">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1323983886080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-1323983885408">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-1323983887424">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-1323983886304">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983885744">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983886192">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983887648">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983887760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">93</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>mapper,</pre>
<pre class="line before"><span class="ws">            </span>table,</pre>
<pre class="line before"><span class="ws">            </span>update,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_insert_statements(</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>insert,</pre></div>
</div>

<li><div class="frame" id="frame-1323983887872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">1233</em>,
      in <code class="function">_emit_insert_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>statement.values(value_params),</pre>
<pre class="line before"><span class="ws">                            </span>params,</pre>
<pre class="line before"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line before"><span class="ws">                        </span>)</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line current"><span class="ws">                        </span>result = connection.execute(</pre>
<pre class="line after"><span class="ws">                            </span>statement,</pre>
<pre class="line after"><span class="ws">                            </span>params,</pre>
<pre class="line after"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">                        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983887984">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983888096">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983888208">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983888320">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983888432">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983888544">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983888656">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983888768">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;qualcosa.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 239, in new_plugin
    db.session.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 93, in save_obj
    _emit_insert_statements(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 1233, in _emit_insert_statements
    result = connection.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;qualcosa.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 239, in new_plugin
    db.session.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO "plugTable" (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: ('qualcosa.py', '', '', 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:18,100 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;qualcosa.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;qualcosa.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983888880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983888992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983882496">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983885632">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983886976">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983884848">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983886528">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983886416">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983885184">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983885296">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">239</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre>
<pre class="line before"><span class="ws">            </span>description=&#39;&#39;  # DEBUG</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span># Add the new plugin to the database</pre>
<pre class="line before"><span class="ws">        </span>db.session.add(new_plugin)</pre>
<pre class="line current"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>last_update = round(time.time())</pre>
<pre class="line after"><span class="ws">        </span>print(&#34;Updated time: &#34;+str(last_update))</pre>
<pre class="line after"><span class="ws">        </span># Return a success response</pre>
<pre class="line after"><span class="ws">        </span>logging.debug(get_jwt_identity()+&#34;: Added a plugin (&#34;+data[&#39;name&#39;]+&#34;)&#34; )</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Plugin uploaded successfully&#34;}), 201</pre></div>
</div>

<li><div class="frame" id="frame-1323983885520">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-1323983885856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-1323983885072">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1323983885968">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1323983884960">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-1323983887200">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1323983886640">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1323983886080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-1323983885408">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-1323983887424">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-1323983886304">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983885744">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983886192">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983887648">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983887760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">93</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>mapper,</pre>
<pre class="line before"><span class="ws">            </span>table,</pre>
<pre class="line before"><span class="ws">            </span>update,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_insert_statements(</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>insert,</pre></div>
</div>

<li><div class="frame" id="frame-1323983887872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">1233</em>,
      in <code class="function">_emit_insert_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>statement.values(value_params),</pre>
<pre class="line before"><span class="ws">                            </span>params,</pre>
<pre class="line before"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line before"><span class="ws">                        </span>)</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line current"><span class="ws">                        </span>result = connection.execute(</pre>
<pre class="line after"><span class="ws">                            </span>statement,</pre>
<pre class="line after"><span class="ws">                            </span>params,</pre>
<pre class="line after"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">                        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983887984">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983888096">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983888208">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983888320">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983888432">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983888544">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983888656">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983888768">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;qualcosa.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 239, in new_plugin
    db.session.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 93, in save_obj
    _emit_insert_statements(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 1233, in _emit_insert_statements
    result = connection.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;qualcosa.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 239, in new_plugin
    db.session.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO "plugTable" (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: ('qualcosa.py', '', '', 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:18,103 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:21:18,105 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:21:18,153 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:21:18,156 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983891568">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983891680">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983889552">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983889216">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983889664">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983889440">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983889104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983889888">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983890000">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983890112">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323983890224">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323983890336">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983890448">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323983890560">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323983890672">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323983890784">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983890896">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983891008">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983891120">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983891232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983891344">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983891456">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983886752">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:18,159 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983891568">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983891680">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983889552">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983889216">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983889664">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983889440">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983889104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983889888">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983890000">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983890112">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323983890224">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323983890336">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983890448">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323983890560">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323983890672">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323983890784">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983890896">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983891008">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983891120">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983891232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983891344">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983891456">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983886752">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:18,161 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:21:18,163 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:21:18,218 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:21:18,220 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983894368">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983894480">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983889776">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983891792">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983892016">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983891904">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983892240">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983892576">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983892688">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983892800">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323983892912">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323983893024">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983893136">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323983893248">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323983893360">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323983893472">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983893584">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983893696">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983893808">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983893920">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983894032">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983894144">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983894256">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:18,222 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323983894368">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983894480">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983889776">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983891792">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983892016">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983891904">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983892240">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983892576">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983892688">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983892800">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323983892912">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323983893024">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983893136">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323983893248">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323983893360">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323983893472">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983893584">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983893696">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323983893808">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323983893920">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983894032">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323983894144">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323983894256">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:18,223 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:21:18,225 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:21:18,263 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:21:18,263 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323984093920">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984094032">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983892352">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983894592">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983894816">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983894704">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983895040">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983895376">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983895488">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983895600">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323983895712">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323983895824">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983895936">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323983896048">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323983896160">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323983896272">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983896384">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984093248">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323984093360">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323984093472">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984093584">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323984093696">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984093808">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:21:18,266 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323984093920">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984094032">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323983892352">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323983894592">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323983894816">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323983894704">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323983895040">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323983895376">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323983895488">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983895600">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323983895712">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323983895824">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983895936">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323983896048">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323983896160">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323983896272">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323983896384">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984093248">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323984093360">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323984093472">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984093584">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323984093696">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984093808">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:22:23,902 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'import os #libreria per poter lavorare con le cartelle e file dell\'applicazione\nimport importlib #va a sostituire la funzione manuale di import dato che non siamo a conoscenza dei nomi dei file \n                 #e per rendere l\'importazione dinamica\nimport sys  #serve per modificare a riga 38 i percorsi da cui prendere i file python\nimport abc\nimport inspect #serve per vedere i parametri\nimport subprocess #serve per eseguire comandi di sistema\nimport platform #serve per il multipiattaforma\nimport time #serve per operare con il tempo\nfrom datetime import datetime #serve per l\'ora esatta dei ping\nimport matplotlib.pyplot as plt #serve per creare il crafico dei ping\nimport smtplib #serve per inviare email via SMTP\nfrom email.message import EmailMessage #usato per costruire l\'email\nfrom pathlib import Path #serve per ottenere il riferimento al percorso del file corrente\n\n\n\n\nclass Plugin(Interfaccia_Plugin):\n    vet_param = None\n    \n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def invioGrafico(self, email, dati, url):\n        x = [d[0] for d in dati if d[1] is not None]  # orari dei ping riusciti\n        y = [d[1] for d in dati if d[1] is not None]  # valori dei ping riusciti\n\n        # crea il grafico\n        plt.figure(figsize=(10, 5))\n        plt.plot(x, y, marker=\'o\')\n        plt.title(f\'Ping Monitor - {url}\')\n        plt.xlabel(\'Orario\')\n        plt.ylabel(\'Ping (ms)\')\n        plt.grid(True)\n        plt.xticks(rotation=45)\n\n        # salva il grafico come immagine\n        img_path = os.path.join(os.getcwd(), \'ping_graph.png\')\n        plt.tight_layout()\n        plt.savefig(img_path)\n        plt.close()\n\n        # prepara l’email con l’allegato\n        msg = EmailMessage()\n        msg[\'Subject\'] = f\'Grafico Monitoraggio - {url}\'\n        msg[\'From\'] = \'nicolacasagrande54@gmail.com\'\n        msg[\'To\'] = email\n        msg.set_content(\'In allegato il grafico con i risultati del monitoraggio.\')\n\n        # allega l’immagine\n        with open(img_path, \'rb\') as f:\n            img_data = f.read()\n            msg.add_attachment(img_data, maintype=\'image\', subtype=\'png\', filename=\'ping_graph.png\')\n\n        # invia l’email con l’allegato\n        with smtplib.SMTP(\'smtp.gmail.com\', 587) as smtp:\n            smtp.starttls()\n            smtp.login(\'nicolacasagrande54@gmail.com\', \'nizh qsff zgzv zasd\')\n            smtp.send_message(msg)\n\n    def invioEmailAvviso(self, email, url):\n        msg = EmailMessage()  # crea una nuova email\n        msg[\'Subject\'] = f\' Server Offline - {url}\'  # oggetto dell’email\n        msg[\'From\'] = \'nicolacasagrande54@gmail.com\'  # mittente (puoi cambiarlo)\n        msg[\'To\'] = email  # destinatario\n        msg.set_content(f\'Il server {url} è stato rilevato come offline.\')  # contenuto del messaggio\n\n        with smtplib.SMTP(\'smtp.gmail.com\', 587) as smtp:  # connessione al server SMTP\n            smtp.starttls()  # cifratura della connessione\n            smtp.login(\'nicolacasagrande54@gmail.com\', \'nizh qsff zgzv zasd\')  # login al server\n            smtp.send_message(msg)  # invia l’email\n\n    def monitoraggio_server(self, email,url,tempo_monitoraggio):\n        intervallo_ping = 1  # ogni N secondi fa un ping , per ora 1\n        max_fail = 2  # ogni N tentativi manda l\'avviso, per ora 2\n        fail_count = 0  # contatore di ping falliti per fermare poi il ciclo\n        dati_ping = []  # salva il futuro output\n        start_time = time.time()  # orario di inizio del monitoraggio\n\n        # loop che continua finché non finisce il tempo di monitoraggio o N tentativi falliscono\n        while (time.time() - start_time) < tempo_monitoraggio: #time.time() da l\'orario in quel momento\n            try:\n                # comando diverso a seconda del sistema operativo\n                if platform.system().lower() == "windows":\n                    comando = ["ping", "-n", "1", url]\n                else:\n                    comando = ["ping", "-c", "1", url] #linux e ios\n\n                # esegue il ping con il comando salvato prima e salva il risultato\n                result = subprocess.run(comando, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n\n                if result.returncode == 0:  # se vero il ping è riuscito\n                    output = result.stdout  # prendiamo l’output del ping\n                    if platform.system().lower() == "windows": # comando diverso a seconda del sistema operativo\n                        for line in output.splitlines():  # scorriamo ogni riga\n                            if "durata=" in line:\n                                time_part = line.split("durata=")[1].split("ms")[0].strip()\n                                ping_ms = float(time_part)\n                                break\n                            elif "time=" in line:\n                                time_part = line.split("time=")[1].split("ms")[0].strip()\n                                ping_ms = float(time_part)\n                                break\n                        else:\n                            ping_ms = None\n                    else:\n                        for line in output.splitlines():\n                            if "time=" in line:\n                                ping_ms = float(line.split("time=")[1].split(" ")[0])  \n                                break\n                        else:\n                            ping_ms = None\n                    #fail_count = 0   reset se il ping è ok???\n                else:\n                    ping_ms = None  # ping fallito\n                    fail_count += 1  \n                    \n            except Exception as e:  # errore nel ping\n                ping_ms = None\n                fail_count += 1\n\n            oraPing = datetime.now()  # orario esatto del ping\n            dati_ping.append((oraPing, ping_ms))  #salvo ora e tempo del ping\n\n            if fail_count >= max_fail:\n                self.invioEmailAvviso(email, url)  # se ha fallito troppe volte, manda avviso\n                break\n\n            time.sleep(intervallo_ping)  # aspetta prima del prossimo ping\n\n        # dopo il monitoraggio manda il grafico via email\n        self.invioGrafico(email, dati_ping, url)\n        return dati_ping  # ritorna i dati raccolti \n\n\n\n    def execute(self):\n        self.monitoraggio_server("samuele231106@gmail.com","google.com",10)\n        return "Output"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True', 'name': 'status.py'}
2025-05-14 05:22:23,903 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:22:23,959 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 500 56787
2025-05-14 05:22:23,961 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323984098288">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984098400">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323984096608">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323984096272">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323984096832">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323984096048">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323984094704">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323984094816">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323984094928">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984097056">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">239</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre>
<pre class="line before"><span class="ws">            </span>description=&#39;&#39;  # DEBUG</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span># Add the new plugin to the database</pre>
<pre class="line before"><span class="ws">        </span>db.session.add(new_plugin)</pre>
<pre class="line current"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>last_update = round(time.time())</pre>
<pre class="line after"><span class="ws">        </span>print(&#34;Updated time: &#34;+str(last_update))</pre>
<pre class="line after"><span class="ws">        </span># Return a success response</pre>
<pre class="line after"><span class="ws">        </span>logging.debug(get_jwt_identity()+&#34;: Added a plugin (&#34;+data[&#39;name&#39;]+&#34;)&#34; )</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Plugin uploaded successfully&#34;}), 201</pre></div>
</div>

<li><div class="frame" id="frame-1323984096496">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-1323984095040">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-1323984095824">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1323984094480">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1323984095712">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-1323984095264">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1323984095152">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1323984096160">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-1323984095376">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-1323984096720">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-1323984096944">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984096384">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984095600">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984095488">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984097168">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">93</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>mapper,</pre>
<pre class="line before"><span class="ws">            </span>table,</pre>
<pre class="line before"><span class="ws">            </span>update,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_insert_statements(</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>insert,</pre></div>
</div>

<li><div class="frame" id="frame-1323984097280">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">1233</em>,
      in <code class="function">_emit_insert_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>statement.values(value_params),</pre>
<pre class="line before"><span class="ws">                            </span>params,</pre>
<pre class="line before"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line before"><span class="ws">                        </span>)</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line current"><span class="ws">                        </span>result = connection.execute(</pre>
<pre class="line after"><span class="ws">                            </span>statement,</pre>
<pre class="line after"><span class="ws">                            </span>params,</pre>
<pre class="line after"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">                        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984097392">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984097504">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984097616">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323984097728">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323984097840">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984097952">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323984098064">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984098176">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 239, in new_plugin
    db.session.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 93, in save_obj
    _emit_insert_statements(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 1233, in _emit_insert_statements
    result = connection.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 239, in new_plugin
    db.session.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO "plugTable" (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: ('status.py', '', '', 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:22:23,963 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323984098288">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984098400">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323984096608">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323984096272">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323984096832">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323984096048">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323984094704">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323984094816">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323984094928">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984097056">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">239</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre>
<pre class="line before"><span class="ws">            </span>description=&#39;&#39;  # DEBUG</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span># Add the new plugin to the database</pre>
<pre class="line before"><span class="ws">        </span>db.session.add(new_plugin)</pre>
<pre class="line current"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>last_update = round(time.time())</pre>
<pre class="line after"><span class="ws">        </span>print(&#34;Updated time: &#34;+str(last_update))</pre>
<pre class="line after"><span class="ws">        </span># Return a success response</pre>
<pre class="line after"><span class="ws">        </span>logging.debug(get_jwt_identity()+&#34;: Added a plugin (&#34;+data[&#39;name&#39;]+&#34;)&#34; )</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Plugin uploaded successfully&#34;}), 201</pre></div>
</div>

<li><div class="frame" id="frame-1323984096496">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-1323984095040">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-1323984095824">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1323984094480">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1323984095712">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-1323984095264">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-1323984095152">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-1323984096160">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-1323984095376">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-1323984096720">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-1323984096944">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984096384">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984095600">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984095488">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984097168">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">93</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>mapper,</pre>
<pre class="line before"><span class="ws">            </span>table,</pre>
<pre class="line before"><span class="ws">            </span>update,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_insert_statements(</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>insert,</pre></div>
</div>

<li><div class="frame" id="frame-1323984097280">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">1233</em>,
      in <code class="function">_emit_insert_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>statement.values(value_params),</pre>
<pre class="line before"><span class="ws">                            </span>params,</pre>
<pre class="line before"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line before"><span class="ws">                        </span>)</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line current"><span class="ws">                        </span>result = connection.execute(</pre>
<pre class="line after"><span class="ws">                            </span>statement,</pre>
<pre class="line after"><span class="ws">                            </span>params,</pre>
<pre class="line after"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">                        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984097392">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984097504">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984097616">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323984097728">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323984097840">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984097952">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323984098064">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984098176">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 239, in new_plugin
    db.session.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 93, in save_obj
    _emit_insert_statements(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 1233, in _emit_insert_statements
    result = connection.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 239, in new_plugin
    db.session.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO "plugTable" (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: ('status.py', '', '', 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:22:23,965 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:22:23,966 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:22:24,005 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:22:24,006 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323984101088">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984101200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323984098960">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323984098624">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323984099072">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323984098848">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323984098512">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323984099296">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323984099408">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984099520">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323984099632">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323984099744">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984099856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323984099968">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323984100080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323984100192">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984100304">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984100416">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323984100528">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323984100640">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984100752">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323984100864">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984100976">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:22:24,008 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323984101088">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984101200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323984098960">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323984098624">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323984099072">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323984098848">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323984098512">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323984099296">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323984099408">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984099520">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323984099632">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323984099744">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984099856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323984099968">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323984100080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323984100192">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984100304">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984100416">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323984100528">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323984100640">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984100752">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323984100864">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984100976">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:22:24,010 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:22:24,011 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:22:24,051 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:22:24,053 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323984103888">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984104000">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323984099184">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323984101312">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323984101536">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323984101424">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323984101760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323984102096">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323984102208">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984102320">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323984102432">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323984102544">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984102656">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323984102768">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323984102880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323984102992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984103104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984103216">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323984103328">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323984103440">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984103552">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323984103664">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984103776">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:22:24,055 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323984103888">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984104000">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323984099184">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323984101312">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323984101536">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323984101424">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323984101760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323984102096">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323984102208">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984102320">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323984102432">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323984102544">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984102656">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323984102768">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323984102880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323984102992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984103104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984103216">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323984103328">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323984103440">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984103552">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323984103664">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984103776">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:22:24,057 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:22:24,058 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:22:24,112 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:22:24,114 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323984106576">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984106688">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323984104672">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323984101872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323984104112">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323984104336">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323984104224">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323984104560">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323984104896">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984105008">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323984105120">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323984105232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984105344">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323984105456">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323984105568">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323984105680">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984105792">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984105904">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323984106016">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323984106128">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984106240">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323984106352">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984106464">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:22:24,117 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QybHjlKgSPSUiSb50atH";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1323984106576">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984106688">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-1323984104672">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-1323984101872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1323984104112">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1323984104336">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1323984104224">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1323984104560">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1323984104896">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984105008">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-1323984105120">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-1323984105232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984105344">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-1323984105456">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-1323984105568">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-1323984105680">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984105792">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984105904">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-1323984106016">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-1323984106128">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-1323984106240">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-1323984106352">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-1323984106464">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:22:54,038 - INFO - Application started.
2025-05-14 05:22:54,038 - INFO - ClientCore initialized with server URL: https://127.0.0.1:5000
2025-05-14 05:22:54,039 - INFO - Attempting to log in user: test
2025-05-14 05:22:54,080 - DEBUG - Loading KWallet
2025-05-14 05:22:54,082 - DEBUG - Loading SecretService
2025-05-14 05:22:54,112 - DEBUG - Loading Windows
2025-05-14 05:22:54,123 - DEBUG - Loaded cffi backend
2025-05-14 05:22:54,202 - DEBUG - Loading chainer
2025-05-14 05:22:54,203 - DEBUG - Loading libsecret
2025-05-14 05:22:54,205 - DEBUG - Loading macOS
2025-05-14 05:22:54,213 - DEBUG - Sending POST request to https://127.0.0.1:5000/login
2025-05-14 05:22:54,219 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:22:54,226 - DEBUG - https://127.0.0.1:5000 "POST /login HTTP/1.1" 200 354
2025-05-14 05:22:54,227 - DEBUG - Received response
2025-05-14 05:22:54,244 - INFO - User test logged in successfully.
2025-05-14 05:22:54,244 - INFO - Starting polling for notifications.
2025-05-14 05:22:54,245 - DEBUG - Polling for notifications...
2025-05-14 05:22:54,248 - DEBUG - Sending GET request to https://127.0.0.1:5000/notification/1747192974 with data: None
2025-05-14 05:22:54,250 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:22:54,257 - DEBUG - https://127.0.0.1:5000 "GET /notification/1747192974 HTTP/1.1" 200 4
2025-05-14 05:22:54,259 - DEBUG - Received response: -17

2025-05-14 05:22:54,301 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:22:54,303 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:22:54,356 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:22:54,358 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kZPaubZzF1vI2Hucl4vz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2309309083744">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309309083856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2309306308464">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2309307003424">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2309307003536">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2309307003648">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2309307003760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2309307003872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2309307003984">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309307075824">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-2309307081648">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-2309307499232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309307499344">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2309307887040">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2309307887152">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2309308205200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309308479216">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309308872096">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2309308872208">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2309308872320">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309308872432">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2309308872544">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309308872656">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:22:54,360 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kZPaubZzF1vI2Hucl4vz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2309309083744">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309309083856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2309306308464">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2309307003424">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2309307003536">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2309307003648">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2309307003760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2309307003872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2309307003984">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309307075824">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-2309307081648">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-2309307499232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309307499344">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2309307887040">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2309307887152">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2309308205200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309308479216">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309308872096">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2309308872208">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2309308872320">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309308872432">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2309308872544">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309308872656">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:23:00,075 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'import os #libreria per poter lavorare con le cartelle e file dell\'applicazione\nimport importlib #va a sostituire la funzione manuale di import dato che non siamo a conoscenza dei nomi dei file \n                 #e per rendere l\'importazione dinamica\nimport sys  #serve per modificare a riga 38 i percorsi da cui prendere i file python\nimport abc\nimport inspect #serve per vedere i parametri\nimport subprocess #serve per eseguire comandi di sistema\nimport platform #serve per il multipiattaforma\nimport time #serve per operare con il tempo\nfrom datetime import datetime #serve per l\'ora esatta dei ping\nimport matplotlib.pyplot as plt #serve per creare il crafico dei ping\nimport smtplib #serve per inviare email via SMTP\nfrom email.message import EmailMessage #usato per costruire l\'email\nfrom pathlib import Path #serve per ottenere il riferimento al percorso del file corrente\n\n\n\n\nclass Plugin(Interfaccia_Plugin):\n    vet_param = None\n    \n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def invioGrafico(self, email, dati, url):\n        x = [d[0] for d in dati if d[1] is not None]  # orari dei ping riusciti\n        y = [d[1] for d in dati if d[1] is not None]  # valori dei ping riusciti\n\n        # crea il grafico\n        plt.figure(figsize=(10, 5))\n        plt.plot(x, y, marker=\'o\')\n        plt.title(f\'Ping Monitor - {url}\')\n        plt.xlabel(\'Orario\')\n        plt.ylabel(\'Ping (ms)\')\n        plt.grid(True)\n        plt.xticks(rotation=45)\n\n        # salva il grafico come immagine\n        img_path = os.path.join(os.getcwd(), \'ping_graph.png\')\n        plt.tight_layout()\n        plt.savefig(img_path)\n        plt.close()\n\n        # prepara l’email con l’allegato\n        msg = EmailMessage()\n        msg[\'Subject\'] = f\'Grafico Monitoraggio - {url}\'\n        msg[\'From\'] = \'nicolacasagrande54@gmail.com\'\n        msg[\'To\'] = email\n        msg.set_content(\'In allegato il grafico con i risultati del monitoraggio.\')\n\n        # allega l’immagine\n        with open(img_path, \'rb\') as f:\n            img_data = f.read()\n            msg.add_attachment(img_data, maintype=\'image\', subtype=\'png\', filename=\'ping_graph.png\')\n\n        # invia l’email con l’allegato\n        with smtplib.SMTP(\'smtp.gmail.com\', 587) as smtp:\n            smtp.starttls()\n            smtp.login(\'nicolacasagrande54@gmail.com\', \'nizh qsff zgzv zasd\')\n            smtp.send_message(msg)\n\n    def invioEmailAvviso(self, email, url):\n        msg = EmailMessage()  # crea una nuova email\n        msg[\'Subject\'] = f\' Server Offline - {url}\'  # oggetto dell’email\n        msg[\'From\'] = \'nicolacasagrande54@gmail.com\'  # mittente (puoi cambiarlo)\n        msg[\'To\'] = email  # destinatario\n        msg.set_content(f\'Il server {url} è stato rilevato come offline.\')  # contenuto del messaggio\n\n        with smtplib.SMTP(\'smtp.gmail.com\', 587) as smtp:  # connessione al server SMTP\n            smtp.starttls()  # cifratura della connessione\n            smtp.login(\'nicolacasagrande54@gmail.com\', \'nizh qsff zgzv zasd\')  # login al server\n            smtp.send_message(msg)  # invia l’email\n\n    def monitoraggio_server(self, email,url,tempo_monitoraggio):\n        intervallo_ping = 1  # ogni N secondi fa un ping , per ora 1\n        max_fail = 2  # ogni N tentativi manda l\'avviso, per ora 2\n        fail_count = 0  # contatore di ping falliti per fermare poi il ciclo\n        dati_ping = []  # salva il futuro output\n        start_time = time.time()  # orario di inizio del monitoraggio\n\n        # loop che continua finché non finisce il tempo di monitoraggio o N tentativi falliscono\n        while (time.time() - start_time) < tempo_monitoraggio: #time.time() da l\'orario in quel momento\n            try:\n                # comando diverso a seconda del sistema operativo\n                if platform.system().lower() == "windows":\n                    comando = ["ping", "-n", "1", url]\n                else:\n                    comando = ["ping", "-c", "1", url] #linux e ios\n\n                # esegue il ping con il comando salvato prima e salva il risultato\n                result = subprocess.run(comando, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n\n                if result.returncode == 0:  # se vero il ping è riuscito\n                    output = result.stdout  # prendiamo l’output del ping\n                    if platform.system().lower() == "windows": # comando diverso a seconda del sistema operativo\n                        for line in output.splitlines():  # scorriamo ogni riga\n                            if "durata=" in line:\n                                time_part = line.split("durata=")[1].split("ms")[0].strip()\n                                ping_ms = float(time_part)\n                                break\n                            elif "time=" in line:\n                                time_part = line.split("time=")[1].split("ms")[0].strip()\n                                ping_ms = float(time_part)\n                                break\n                        else:\n                            ping_ms = None\n                    else:\n                        for line in output.splitlines():\n                            if "time=" in line:\n                                ping_ms = float(line.split("time=")[1].split(" ")[0])  \n                                break\n                        else:\n                            ping_ms = None\n                    #fail_count = 0   reset se il ping è ok???\n                else:\n                    ping_ms = None  # ping fallito\n                    fail_count += 1  \n                    \n            except Exception as e:  # errore nel ping\n                ping_ms = None\n                fail_count += 1\n\n            oraPing = datetime.now()  # orario esatto del ping\n            dati_ping.append((oraPing, ping_ms))  #salvo ora e tempo del ping\n\n            if fail_count >= max_fail:\n                self.invioEmailAvviso(email, url)  # se ha fallito troppe volte, manda avviso\n                break\n\n            time.sleep(intervallo_ping)  # aspetta prima del prossimo ping\n\n        # dopo il monitoraggio manda il grafico via email\n        self.invioGrafico(email, dati_ping, url)\n        return dati_ping  # ritorna i dati raccolti \n\n\n\n    def execute(self):\n        self.monitoraggio_server("samuele231106@gmail.com","google.com",10)\n        return "Output"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True', 'name': 'status.py'}
2025-05-14 05:23:00,077 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:23:00,134 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 500 56787
2025-05-14 05:23:00,137 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kZPaubZzF1vI2Hucl4vz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2309312786416">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312786528">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2309309083968">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2309309086096">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2309309085200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2309309085872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2309309086320">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2309309084864">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2309309085088">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309309084080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">239</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre>
<pre class="line before"><span class="ws">            </span>description=&#39;&#39;  # DEBUG</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span># Add the new plugin to the database</pre>
<pre class="line before"><span class="ws">        </span>db.session.add(new_plugin)</pre>
<pre class="line current"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>last_update = round(time.time())</pre>
<pre class="line after"><span class="ws">        </span>print(&#34;Updated time: &#34;+str(last_update))</pre>
<pre class="line after"><span class="ws">        </span># Return a success response</pre>
<pre class="line after"><span class="ws">        </span>logging.debug(get_jwt_identity()+&#34;: Added a plugin (&#34;+data[&#39;name&#39;]+&#34;)&#34; )</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Plugin uploaded successfully&#34;}), 201</pre></div>
</div>

<li><div class="frame" id="frame-2309309085760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-2309309333200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-2309309333312">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2309309448256">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-2309309452064">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-2309309452176">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2309309452288">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-2309309452400">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-2309309452512">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-2309309452624">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-2309309452736">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312543792">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312543904">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312658592">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312658704">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">93</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>mapper,</pre>
<pre class="line before"><span class="ws">            </span>table,</pre>
<pre class="line before"><span class="ws">            </span>update,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_insert_statements(</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>insert,</pre></div>
</div>

<li><div class="frame" id="frame-2309312785408">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">1233</em>,
      in <code class="function">_emit_insert_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>statement.values(value_params),</pre>
<pre class="line before"><span class="ws">                            </span>params,</pre>
<pre class="line before"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line before"><span class="ws">                        </span>)</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line current"><span class="ws">                        </span>result = connection.execute(</pre>
<pre class="line after"><span class="ws">                            </span>statement,</pre>
<pre class="line after"><span class="ws">                            </span>params,</pre>
<pre class="line after"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">                        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312785520">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312785632">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312785744">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2309312785856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2309312785968">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312786080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2309312786192">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312786304">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 239, in new_plugin
    db.session.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 93, in save_obj
    _emit_insert_statements(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 1233, in _emit_insert_statements
    result = connection.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 239, in new_plugin
    db.session.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO "plugTable" (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: ('status.py', '', '', 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:23:00,140 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kZPaubZzF1vI2Hucl4vz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2309312786416">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312786528">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2309309083968">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2309309086096">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2309309085200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2309309085872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2309309086320">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2309309084864">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2309309085088">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309309084080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">239</em>,
      in <code class="function">new_plugin</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>params=&#39;&#39;,  # DEBUG</pre>
<pre class="line before"><span class="ws">            </span>description=&#39;&#39;  # DEBUG</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws">        </span># Add the new plugin to the database</pre>
<pre class="line before"><span class="ws">        </span>db.session.add(new_plugin)</pre>
<pre class="line current"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line after"><span class="ws">        </span>last_update = round(time.time())</pre>
<pre class="line after"><span class="ws">        </span>print(&#34;Updated time: &#34;+str(last_update))</pre>
<pre class="line after"><span class="ws">        </span># Return a success response</pre>
<pre class="line after"><span class="ws">        </span>logging.debug(get_jwt_identity()+&#34;: Added a plugin (&#34;+data[&#39;name&#39;]+&#34;)&#34; )</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Plugin uploaded successfully&#34;}), 201</pre></div>
</div>

<li><div class="frame" id="frame-2309309085760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py"</cite>,
      line <em class="line">599</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;  # noqa: E501</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._proxied.commit()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def connection(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>
<pre class="line after"><span class="ws">        </span>execution_options: Optional[CoreExecuteOptionsParameter] = None,</pre></div>
</div>

<li><div class="frame" id="frame-2309309333200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2032</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>trans = self._transaction</pre>
<pre class="line before"><span class="ws">        </span>if trans is None:</pre>
<pre class="line before"><span class="ws">            </span>trans = self._autobegin_t()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>trans.commit(_to_root=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def prepare(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If no transaction is in progress, this method raises an</pre></div>
</div>

<li><div class="frame" id="frame-2309309333312">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">commit</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2309309448256">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-2309309452064">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1313</em>,
      in <code class="function">commit</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>SessionTransactionState.CLOSED,</pre>
<pre class="line before"><span class="ws">    </span>)</pre>
<pre class="line before"><span class="ws">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>
<pre class="line before"><span class="ws">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>
<pre class="line before"><span class="ws">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>
<pre class="line current"><span class="ws">                </span>self._prepare_impl()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._parent is None or self.nested:</pre>
<pre class="line after"><span class="ws">            </span>for conn, trans, should_commit, autoclose in set(</pre>
<pre class="line after"><span class="ws">                </span>self._connections.values()</pre>
<pre class="line after"><span class="ws">            </span>):</pre></div>
</div>

<li><div class="frame" id="frame-2309309452176">
  <h4>File <cite class="filename">"&lt;string&gt;"</cite>,
      line <em class="line">2</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source "></div>
</div>

<li><div class="frame" id="frame-2309309452288">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py"</cite>,
      line <em class="line">139</em>,
      in <code class="function">_go</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>self._current_fn = fn</pre>
<pre class="line before"><span class="ws">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>ret_value = fn(self, *arg, **kw)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>if self._state is expect_state:</pre>
<pre class="line after"><span class="ws">                    </span>return ret_value</pre></div>
</div>

<li><div class="frame" id="frame-2309309452400">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">1288</em>,
      in <code class="function">_prepare_impl</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if not self.session._flushing:</pre>
<pre class="line before"><span class="ws">            </span>for _flush_guard in range(100):</pre>
<pre class="line before"><span class="ws">                </span>if self.session._is_clean():</pre>
<pre class="line before"><span class="ws">                    </span>break</pre>
<pre class="line current"><span class="ws">                </span>self.session.flush()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise exc.FlushError(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>
<pre class="line after"><span class="ws">                    </span>&#34;creating new objects?&#34;</pre></div>
</div>

<li><div class="frame" id="frame-2309309452512">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4353</em>,
      in <code class="function">flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._is_clean():</pre>
<pre class="line before"><span class="ws">            </span>return</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._flushing = True</pre>
<pre class="line current"><span class="ws">            </span>self._flush(objects)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>self._flushing = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>util.warn(</pre></div>
</div>

<li><div class="frame" id="frame-2309309452624">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4488</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>transaction.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>with util.safe_reraise():</pre>
<pre class="line after"><span class="ws">                </span>transaction.rollback(_capture_exception=True)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def bulk_save_objects(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>objects: Iterable[object],</pre></div>
</div>

<li><div class="frame" id="frame-2309309452736">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py"</cite>,
      line <em class="line">146</em>,
      in <code class="function">__exit__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># see #2703 for notes</pre>
<pre class="line before"><span class="ws">        </span>if type_ is None:</pre>
<pre class="line before"><span class="ws">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>
<pre class="line before"><span class="ws">            </span>assert exc_value is not None</pre>
<pre class="line before"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line current"><span class="ws">            </span>raise exc_value.with_traceback(exc_tb)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self._exc_info = None  # remove potential circular references</pre>
<pre class="line after"><span class="ws">            </span>assert value is not None</pre>
<pre class="line after"><span class="ws">            </span>raise value.with_traceback(traceback)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312543792">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">4449</em>,
      in <code class="function">_flush</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>self._warn_on_events = True</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>flush_context.execute()</pre>
<pre class="line after"><span class="ws">            </span>finally:</pre>
<pre class="line after"><span class="ws">                </span>self._warn_on_events = False</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>self.dispatch.after_flush(self, flush_context)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312543904">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">466</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>while set_:</pre>
<pre class="line before"><span class="ws">                    </span>n = set_.pop()</pre>
<pre class="line before"><span class="ws">                    </span>n.execute_aggregate(self, set_)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>
<pre class="line current"><span class="ws">                </span>rec.execute(self)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_flush_changes(self) -&gt; None:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>
<pre class="line after"><span class="ws">        </span>flush().</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312658592">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py"</cite>,
      line <em class="line">642</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>
<pre class="line before"><span class="ws">        </span>assert mapper is mapper.base_mapper</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>
<pre class="line before"><span class="ws">    </span>def execute(self, uow):</pre>
<pre class="line current"><span class="ws">        </span>util.preloaded.orm_persistence.save_obj(</pre>
<pre class="line after"><span class="ws">            </span>self.mapper,</pre>
<pre class="line after"><span class="ws">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>
<pre class="line after"><span class="ws">            </span>uow,</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312658704">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">93</em>,
      in <code class="function">save_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>mapper,</pre>
<pre class="line before"><span class="ws">            </span>table,</pre>
<pre class="line before"><span class="ws">            </span>update,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_emit_insert_statements(</pre>
<pre class="line after"><span class="ws">            </span>base_mapper,</pre>
<pre class="line after"><span class="ws">            </span>uowtransaction,</pre>
<pre class="line after"><span class="ws">            </span>mapper,</pre>
<pre class="line after"><span class="ws">            </span>table,</pre>
<pre class="line after"><span class="ws">            </span>insert,</pre></div>
</div>

<li><div class="frame" id="frame-2309312785408">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py"</cite>,
      line <em class="line">1233</em>,
      in <code class="function">_emit_insert_statements</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>statement.values(value_params),</pre>
<pre class="line before"><span class="ws">                            </span>params,</pre>
<pre class="line before"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line before"><span class="ws">                        </span>)</pre>
<pre class="line before"><span class="ws">                    </span>else:</pre>
<pre class="line current"><span class="ws">                        </span>result = connection.execute(</pre>
<pre class="line after"><span class="ws">                            </span>statement,</pre>
<pre class="line after"><span class="ws">                            </span>params,</pre>
<pre class="line after"><span class="ws">                            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">                        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312785520">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312785632">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312785744">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2309312785856">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2309312785968">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312786080">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2309312786192">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312786304">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 239, in new_plugin
    db.session.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py&#34;, line 599, in commit
    return self._proxied.commit()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2032, in commit
    trans.commit(_to_root=True)
  File &#34;&lt;string&gt;&#34;, line 2, in commit
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1313, in commit
    self._prepare_impl()
  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py&#34;, line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 1288, in _prepare_impl
    self.session.flush()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4353, in flush
    self._flush(objects)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4488, in _flush
    with util.safe_reraise():
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py&#34;, line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 4449, in _flush
    flush_context.execute()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 466, in execute
    rec.execute(self)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py&#34;, line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 93, in save_obj
    _emit_insert_statements(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py&#34;, line 1233, in _emit_insert_statements
    result = connection.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO &#34;plugTable&#34; (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: (&#39;status.py&#39;, &#39;&#39;, &#39;&#39;, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table plugTable has no column named permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 239, in new_plugin
    db.session.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table plugTable has no column named permit
[SQL: INSERT INTO "plugTable" (name, params, description, permit) VALUES (?, ?, ?, ?)]
[parameters: ('status.py', '', '', 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:23:00,143 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:23:00,145 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:23:00,190 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:23:00,191 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kZPaubZzF1vI2Hucl4vz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2309312789216">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312789328">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2309312787088">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2309312786752">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2309312787200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2309312786976">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2309312786640">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2309312787424">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2309312787536">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312787648">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-2309312787760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-2309312787872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312787984">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2309312788096">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2309312788208">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2309312788320">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312788432">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312788544">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2309312788656">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2309312788768">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312788880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2309312788992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312789104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:23:00,193 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kZPaubZzF1vI2Hucl4vz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2309312789216">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312789328">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2309312787088">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2309312786752">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2309312787200">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2309312786976">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2309312786640">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2309312787424">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2309312787536">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312787648">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-2309312787760">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-2309312787872">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312787984">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2309312788096">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2309312788208">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2309312788320">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312788432">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312788544">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2309312788656">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2309312788768">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312788880">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2309312788992">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312789104">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:23:00,195 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:23:00,196 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:23:00,234 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:23:00,235 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kZPaubZzF1vI2Hucl4vz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2309312923232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312923344">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2309312787312">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2309312789440">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2309312789664">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2309312789552">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2309312789888">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2309312790224">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2309312790336">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312921664">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-2309312921776">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-2309312921888">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312922000">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2309312922112">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2309312922224">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2309312922336">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312922448">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312922560">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2309312922672">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2309312922784">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312922896">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2309312923008">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312923120">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:23:00,237 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kZPaubZzF1vI2Hucl4vz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2309312923232">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312923344">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2309312787312">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2309312789440">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2309312789664">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2309312789552">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2309312789888">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2309312790224">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2309312790336">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312921664">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-2309312921776">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-2309312921888">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312922000">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2309312922112">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2309312922224">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2309312922336">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312922448">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312922560">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2309312922672">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2309312922784">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312922896">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2309312923008">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312923120">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:23:00,239 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:23:00,242 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:23:00,280 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 500 42698
2025-05-14 05:23:00,282 - DEBUG - Received response: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kZPaubZzF1vI2Hucl4vz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2309312926032">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312926144">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2309312924128">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2309312923456">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2309312923680">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2309312923568">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2309312923904">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2309312924240">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2309312924352">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312924464">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-2309312924576">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-2309312924688">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312924800">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2309312924912">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2309312925024">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2309312925136">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312925248">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312925360">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2309312925472">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2309312925584">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312925696">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2309312925808">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312925920">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:23:00,283 - ERROR - Error 500: <!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "kZPaubZzF1vI2Hucl4vz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>OperationalError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2309312926032">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312926144">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2309312924128">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2309312923456">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2309312923680">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2309312923568">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2309312923904">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2309312924240">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2309312924352">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">decorator</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>@wraps(fn)</pre>
<pre class="line before"><span class="ws">        </span>def decorator(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>verify_jwt_in_request(</pre>
<pre class="line before"><span class="ws">                </span>optional, fresh, refresh, locations, verify_type, skip_revocation_check</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(fn)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return decorator</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrapper</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312924464">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py"</cite>,
      line <em class="line">157</em>,
      in <code class="function">plug_table</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span># Funzione per la lista dei plugin</pre>
<pre class="line before"><span class="ws"></span>@app.route(&#34;/plugin_list&#34;, endpoint=&#39;plugin_list&#39;, methods=[&#34;GET&#34;])</pre>
<pre class="line before"><span class="ws"></span>@jwt_required()</pre>
<pre class="line before"><span class="ws"></span>def plug_table():</pre>
<pre class="line current"><span class="ws">    </span>pluginT = PlugTable.query.all()</pre>
<pre class="line after"><span class="ws">    </span>if pluginT is None or not pluginT:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(get_jwt_identity()+&#34;: Requested the plugin list but was not found&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return &#34;error 404, no such plugin has been found&#34;</pre>
<pre class="line after"><span class="ws">    </span>logging.debug(get_jwt_identity()+&#34;: Requested the plugin list&#34; )</pre>
<pre class="line after"><span class="ws">    </span>return jsonify([plugin.list() for plugin in pluginT])</pre></div>
</div>

<li><div class="frame" id="frame-2309312924576">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-2309312924688">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312924800">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2309312924912">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2309312925024">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(</pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2309312925136">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(</pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312925248">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(</pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312925360">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(</pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2309312925472">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(</pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2309312925584">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2309312925696">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2309312925808">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2309312925920">
  <h4>File <cite class="filename">"C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py&#34;, line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py&#34;, line 157, in plug_table
    pluginT = PlugTable.query.all()
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT &#34;plugTable&#34;.id AS &#34;plugTable_id&#34;, &#34;plugTable&#34;.name AS &#34;plugTable_name&#34;, &#34;plugTable&#34;.params AS &#34;plugTable_params&#34;, &#34;plugTable&#34;.description AS &#34;plugTable_description&#34;, &#34;plugTable&#34;.permit AS &#34;plugTable_permit&#34; 
FROM &#34;plugTable&#34;]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: no such column: plugTable.permit

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
    return current_app.ensure_sync(fn)(*args, **kwargs)
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\core\core.py", line 157, in plug_table
    pluginT = PlugTable.query.all()
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Erre\Desktop\PlugInk\ServerSide\venv\lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: plugTable.permit
[SQL: SELECT "plugTable".id AS "plugTable_id", "plugTable".name AS "plugTable_name", "plugTable".params AS "plugTable_params", "plugTable".description AS "plugTable_description", "plugTable".permit AS "plugTable_permit" 
FROM "plugTable"]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


-->

2025-05-14 05:27:53,468 - DEBUG - Sending POST request to https://127.0.0.1:5000/upload_plugin with data: {'content': 'import os #libreria per poter lavorare con le cartelle e file dell\'applicazione\nimport importlib #va a sostituire la funzione manuale di import dato che non siamo a conoscenza dei nomi dei file \n                 #e per rendere l\'importazione dinamica\nimport sys  #serve per modificare a riga 38 i percorsi da cui prendere i file python\nimport abc\nimport inspect #serve per vedere i parametri\nimport subprocess #serve per eseguire comandi di sistema\nimport platform #serve per il multipiattaforma\nimport time #serve per operare con il tempo\nfrom datetime import datetime #serve per l\'ora esatta dei ping\nimport matplotlib.pyplot as plt #serve per creare il crafico dei ping\nimport smtplib #serve per inviare email via SMTP\nfrom email.message import EmailMessage #usato per costruire l\'email\nfrom pathlib import Path #serve per ottenere il riferimento al percorso del file corrente\n\n\n\n\nclass Plugin(Interfaccia_Plugin):\n    vet_param = None\n    \n    def __init__(self):\n        self.params = []\n        self.keys = []\n\n    def invioGrafico(self, email, dati, url):\n        x = [d[0] for d in dati if d[1] is not None]  # orari dei ping riusciti\n        y = [d[1] for d in dati if d[1] is not None]  # valori dei ping riusciti\n\n        # crea il grafico\n        plt.figure(figsize=(10, 5))\n        plt.plot(x, y, marker=\'o\')\n        plt.title(f\'Ping Monitor - {url}\')\n        plt.xlabel(\'Orario\')\n        plt.ylabel(\'Ping (ms)\')\n        plt.grid(True)\n        plt.xticks(rotation=45)\n\n        # salva il grafico come immagine\n        img_path = os.path.join(os.getcwd(), \'ping_graph.png\')\n        plt.tight_layout()\n        plt.savefig(img_path)\n        plt.close()\n\n        # prepara l’email con l’allegato\n        msg = EmailMessage()\n        msg[\'Subject\'] = f\'Grafico Monitoraggio - {url}\'\n        msg[\'From\'] = \'nicolacasagrande54@gmail.com\'\n        msg[\'To\'] = email\n        msg.set_content(\'In allegato il grafico con i risultati del monitoraggio.\')\n\n        # allega l’immagine\n        with open(img_path, \'rb\') as f:\n            img_data = f.read()\n            msg.add_attachment(img_data, maintype=\'image\', subtype=\'png\', filename=\'ping_graph.png\')\n\n        # invia l’email con l’allegato\n        with smtplib.SMTP(\'smtp.gmail.com\', 587) as smtp:\n            smtp.starttls()\n            smtp.login(\'nicolacasagrande54@gmail.com\', \'nizh qsff zgzv zasd\')\n            smtp.send_message(msg)\n\n    def invioEmailAvviso(self, email, url):\n        msg = EmailMessage()  # crea una nuova email\n        msg[\'Subject\'] = f\' Server Offline - {url}\'  # oggetto dell’email\n        msg[\'From\'] = \'nicolacasagrande54@gmail.com\'  # mittente (puoi cambiarlo)\n        msg[\'To\'] = email  # destinatario\n        msg.set_content(f\'Il server {url} è stato rilevato come offline.\')  # contenuto del messaggio\n\n        with smtplib.SMTP(\'smtp.gmail.com\', 587) as smtp:  # connessione al server SMTP\n            smtp.starttls()  # cifratura della connessione\n            smtp.login(\'nicolacasagrande54@gmail.com\', \'nizh qsff zgzv zasd\')  # login al server\n            smtp.send_message(msg)  # invia l’email\n\n    def monitoraggio_server(self, email,url,tempo_monitoraggio):\n        intervallo_ping = 1  # ogni N secondi fa un ping , per ora 1\n        max_fail = 2  # ogni N tentativi manda l\'avviso, per ora 2\n        fail_count = 0  # contatore di ping falliti per fermare poi il ciclo\n        dati_ping = []  # salva il futuro output\n        start_time = time.time()  # orario di inizio del monitoraggio\n\n        # loop che continua finché non finisce il tempo di monitoraggio o N tentativi falliscono\n        while (time.time() - start_time) < tempo_monitoraggio: #time.time() da l\'orario in quel momento\n            try:\n                # comando diverso a seconda del sistema operativo\n                if platform.system().lower() == "windows":\n                    comando = ["ping", "-n", "1", url]\n                else:\n                    comando = ["ping", "-c", "1", url] #linux e ios\n\n                # esegue il ping con il comando salvato prima e salva il risultato\n                result = subprocess.run(comando, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n\n                if result.returncode == 0:  # se vero il ping è riuscito\n                    output = result.stdout  # prendiamo l’output del ping\n                    if platform.system().lower() == "windows": # comando diverso a seconda del sistema operativo\n                        for line in output.splitlines():  # scorriamo ogni riga\n                            if "durata=" in line:\n                                time_part = line.split("durata=")[1].split("ms")[0].strip()\n                                ping_ms = float(time_part)\n                                break\n                            elif "time=" in line:\n                                time_part = line.split("time=")[1].split("ms")[0].strip()\n                                ping_ms = float(time_part)\n                                break\n                        else:\n                            ping_ms = None\n                    else:\n                        for line in output.splitlines():\n                            if "time=" in line:\n                                ping_ms = float(line.split("time=")[1].split(" ")[0])  \n                                break\n                        else:\n                            ping_ms = None\n                    #fail_count = 0   reset se il ping è ok???\n                else:\n                    ping_ms = None  # ping fallito\n                    fail_count += 1  \n                    \n            except Exception as e:  # errore nel ping\n                ping_ms = None\n                fail_count += 1\n\n            oraPing = datetime.now()  # orario esatto del ping\n            dati_ping.append((oraPing, ping_ms))  #salvo ora e tempo del ping\n\n            if fail_count >= max_fail:\n                self.invioEmailAvviso(email, url)  # se ha fallito troppe volte, manda avviso\n                break\n\n            time.sleep(intervallo_ping)  # aspetta prima del prossimo ping\n\n        # dopo il monitoraggio manda il grafico via email\n        self.invioGrafico(email, dati_ping, url)\n        return dati_ping  # ritorna i dati raccolti \n\n\n\n    def execute(self):\n        self.monitoraggio_server("samuele231106@gmail.com","google.com",10)\n        return "Output"\n\n    def get_param(self):\n        return self.keys\n\n    def set_param(self, vet_param):\n        self.params = vet_param\n        return True', 'name': 'status.py'}
2025-05-14 05:27:53,477 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:27:53,485 - DEBUG - https://127.0.0.1:5000 "POST /upload_plugin HTTP/1.1" 422 45
2025-05-14 05:27:53,486 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-05-14 05:27:53,486 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-05-14 05:27:53,487 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:27:53,489 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:27:53,495 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 422 45
2025-05-14 05:27:53,496 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-05-14 05:27:53,496 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-05-14 05:27:53,498 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:27:53,499 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:27:53,504 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 422 45
2025-05-14 05:27:53,505 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-05-14 05:27:53,505 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

2025-05-14 05:27:53,506 - DEBUG - Sending GET request to https://127.0.0.1:5000/plugin_list with data: None
2025-05-14 05:27:53,507 - DEBUG - Starting new HTTPS connection (1): 127.0.0.1:5000
2025-05-14 05:27:53,513 - DEBUG - https://127.0.0.1:5000 "GET /plugin_list HTTP/1.1" 422 45
2025-05-14 05:27:53,514 - DEBUG - Received response: {
  "msg": "Signature verification failed"
}

2025-05-14 05:27:53,514 - ERROR - Error 422: {
  "msg": "Signature verification failed"
}

